name: 'Functional Test'
description: 'Run VM functional tests against DAOS RPMs'

on:
  workflow_call:
    inputs:
      distro:
        type: choice
        options:
          - el8
          - el9
          - leap15
      tags:
        type: string
        required: true
      ftest_args:
        type: string
        default: --nvme=auto

env:
  CONFIG_POWER_ONLY: false
  PRAGMA_SUFFIX: -vm
  OPERATIONS_EMAIL: phil.henderson@intel.com
  TEST_RPMS: true
  COMMIT_MESSAGE:
  JENKINS_URL: https://build.hpdd.intel.com/
  REPOSITORY_URL: https://repo.dc.hpdd.intel.com/
  REMOVE_EXISTING_RPMS: false
  # TODO -- this should be on stable, backedup storage
  ARTIFACTS_URL: file:///scratch/job_repos/
  REPO_FILE_URL: https://artifactory.dc.hpdd.intel.com/artifactory/repo-files/
  # keep VS Code's GHA linting happy
  NODESTRING:
  CP_PR_REPOS:
  CP_FEATURES:
  CP_TEST_TAG:
  CP_EL8_VM9_LABEL:
  CP_EL9_VM9_LABEL:
  CP_LEAP15_VM9_LABEL:
  CP_PRIORITY:
  CP_EL8_VERSION:
  CP_EL9_VERSION:
  CP_LEAP15_VERSION:
  DISTRO:
  CLUSTER_REQUEST_reqid:
  STAGE_NAME:
  QUEUE_URL:
  LABEL:
  DISTRO_NAME:
  DISTRO_VERSION:
  COMMIT_STATUS_DISTRO_VERSION:
  FTEST_ARG:

runs:
  using: "composite"
  steps:
    - name: Set variables
      run: |
          set -eux
          env
          STAGE_TAGS="vm"
          FTEST_ARG={{ $inputs.ftest_args }}
          INST_RPMS="daos-client daos-tests daos-server daos-serialize daos-tests-internal"
          case "${{ inputs.distro }}" in
              'el8')
                  CHROOT_NAME="rocky+epel-8-x86_64"
                  DISTRO_NAME="EL"
                  DISTRO_NAME_UPPER="EL"
                  DISTRO_NAME_LOWER="el"
                  DISTRO_VERSION="${{ env.CP_EL8_VERSION &&
                                      env.CP_EL8_VERSION || env.EL8_VERSION }}"
                  DISTRO_VERSION_MAJOR="8"
                  OPENMPI="openmpi"
                  LABEL="${{ env.CP_EL8_VM9_LABEL &&
                              env.CP_EL8_VM9_LABEL || 'ci_vm9' }}"
                  ;;
              'el9')
                  CHROOT_NAME="rocky+epel-9-x86_64"
                  DISTRO_NAME="EL"
                  DISTRO_NAME_UPPER="EL"
                  DISTRO_NAME_LOWER="el"
                  DISTRO_VERSION="${{ env.CP_EL9_VERSION &&
                                      env.CP_EL9_VERSION || env.EL9_VERSION }}"
                  DISTRO_VERSION_MAJOR="9"
                  PROV_DISTRO_VERSION_MAJOR="8"
                  OPENMPI="openmpi"
                  LABEL="${{ env.CP_EL9_VM9_LABEL &&
                              env.CP_EL9_VM9_LABEL || 'ci_vm9' }}"
                  ;;
              'leap15')
                  CHROOT_NAME="opensuse-leap-${{ env.CP_LEAP15_VERSION &&
                                                  env.CP_LEAP15_VERSION ||
                                                  env.LEAP15_VERSION }}-x86_64"
                  DISTRO_NAME="Leap"
                  DISTRO_NAME_UPPER="LEAP"
                  DISTRO_NAME_LOWER="leap"
                  DISTRO_VERSION="${{ env.CP_LEAP15_VERSION &&
                                      env.CP_LEAP15_VERSION || env.LEAP15_VERSION }}"
                  DISTRO_VERSION_MAJOR="15"
                  OPENMPI="openmpi3"
                  LABEL="${{ env.CP_LEAP15_VM9_LABEL &&
                              env.CP_LEAP15_VM9_LABEL || 'ci_vm9' }}"
                  ;;
          esac
          echo "CHROOT_NAME=$CHROOT_NAME" >> $GITHUB_ENV
          echo "DISTRO_NAME=$DISTRO_NAME" >> $GITHUB_ENV
          echo "DISTRO_VERSION=$DISTRO_VERSION" >> $GITHUB_ENV
          echo "DISTRO_WITH_VERSION=$DISTRO_NAME_LOWER$DISTRO_VERSION" >> $GITHUB_ENV
          echo "BUILD_CHROOT=/var/lib/mock/$CHROOT_NAME-${{ github.run_id }}/" >> $GITHUB_ENV
          echo "STAGE_NAME=Functional on $DISTRO_NAME $DISTRO_VERSION" >> $GITHUB_ENV
          echo "STAGE_TAGS=$STAGE_TAGS" >> $GITHUB_ENV
          echo "FTEST_ARG=$FTEST_ARG" >> $GITHUB_ENV
          echo "DISTRO=${DISTRO_NAME_UPPER}_$DISTRO_VERSION_MAJOR" >> $GITHUB_ENV
          echo -n "PROVISION_DISTRO=${DISTRO_NAME_UPPER}_" >> $GITHUB_ENV
          echo "${PROV_DISTRO_VERSION_MAJOR:-$DISTRO_VERSION_MAJOR}" >> $GITHUB_ENV
          echo -n "DAOS_STACK_${DISTRO_NAME_UPPER}_" >> $GITHUB_ENV
          echo "${PROV_DISTRO_VERSION_MAJOR:-$DISTRO_VERSION_MAJOR}_LOCAL_REPO=not_used" >> \
                $GITHUB_ENV
          echo "LABEL=$LABEL" >> $GITHUB_ENV
          echo "INST_RPMS=$INST_RPMS" >> $GITHUB_ENV
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 500
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Request and Provision a Cluster
      timeout-minutes: 7200
      uses: ./.github/actions/provision-cluster
      with:
        condition: env.CP_SKIP_FUNC_TEST-${{ env.DISTRO }} != 'true' && \
                    env.CP_SKIP_FUNC_TEST != 'true'
    - name: Run Test
      timeout-minutes: 7200
      if: env.CP_SKIP_FUNC_TEST-${{ env.DISTRO }} != 'true' && env.CP_SKIP_FUNC_TEST != 'true'
      id: run-test
      run: |
        . ci/gha_functions.sh
        NODE_COUNT="$NODE_COUNT"
        TEST_TAG={{ $inputs.tags }}
        FTEST_ARG="${{ env.FTEST_ARG }}" ci/functional/test_main.sh
    - name: Cancel cluster request (if cancelled after requesting)
      if: cancelled()
      run: |
        set -eux
        . ci/gha_functions.sh
        if ! JENKINS_URL="${{ env.JENKINS_URL }}" QUEUE_URL="${{ env.QUEUE_URL }}" \
              cancel_provision; then
            # probably already provisioned and needs un-provisioning
            if ! cleanup_provision_request "${{ env.CLUSTER_REQUEST_reqid }}"; then
                exit 1
            fi
        fi
    - name: Job cleanup
      if: (!cancelled() && (success() || failure()))
      run: |
        set -eux
        . ci/gha_functions.sh
        NODELIST=${{ env.NODESTRING }} ci/functional/job_cleanup.sh || true
        cleanup_provision_request "${{ env.CLUSTER_REQUEST_reqid }}"
    - name: Publish test results
      if: (!cancelled()) && (success() || failure()) &&
          steps.run-test.outcome != 'skipped'
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        check_name: ${{ env.STAGE_NAME }} Test Results (old)
        github_token: ${{ secrets.GITHUB_TOKEN }}
        junit_files: ${{ env.STAGE_NAME }}/**/results.xml
    - name: Publish artifacts
      if: (!cancelled()) && (success() || failure()) &&
          steps.run-test.outcome != 'skipped'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.STAGE_NAME }} artifacts
        path: ${{ env.STAGE_NAME }}/**
    - name: Upload test results
      if: (success() || failure()) &&
          steps.run-test.outcome != 'skipped'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.STAGE_NAME }} test-results
        path: ${{ env.STAGE_NAME }}/**/results.xml
    - name: Update commit status
      uses: ouzi-dev/commit-status-updater@v2
      with:
        # yamllint disable-line rule:line-length
        name: 'test/Functional on ${{ env.DISTRO_NAME }} ${{ env.COMMIT_STATUS_DISTRO_VERSION && env.COMMIT_STATUS_DISTRO_VERSION || env.DISTRO_VERSION }}'
        status: "${{ job.status }}"
