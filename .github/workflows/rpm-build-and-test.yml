name: RPM Build and Test

on:
  workflow_dispatch:
    inputs:
      pr-repos:
        description: 'Any PR-repos that you want included in this build'
        required: false
  pull_request:

concurrency:
  group: rpm-build-and-test-${{ github.head_ref  || github.run_id }}
  cancel-in-progress: true

jobs:

  Show-inputs:
    name: Show inputs
    runs-on: [self-hosted, mockbuilder]
    steps:
      - name: Show inputs
        run: |
          set -x
          echo "${{ github.event.inputs.pr-repos }}"
          echo "${{ inputs.pr-repos }}"

  Show-client-paylod:
    name: Show client_paylod
    runs-on: [self-hosted, mockbuilder]
    steps:
      - name: Show client_payload
        run: |
          echo "payload raw: ${{ github.event.client_payload }}"
          echo "payload as json: ${{ toJson(github.event.client_payload) }}"

  Import-commit-message:
    name: Get commit message
    runs-on: [self-hosted, mockbuilder]
    # Map a step output to a job output
    outputs:
      message: ${{ steps.commit_message.outputs.text }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 500
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Import Commit Message
        id: commit_message
        run: echo "text<<EOF" >> $GITHUB_OUTPUT;
             git show -s --format=%B >> $GITHUB_OUTPUT;
             echo "EOF" >> $GITHUB_OUTPUT;

  Import-commit-pragmas:
    name: Save commit pragmas
    runs-on: [self-hosted, mockbuilder]
    needs: [Import-commit-message]
    # Map a step output to a job output
    outputs:
      pragmas: ${{ steps.commit_pragmas.outputs.text }}
    steps:
      - name: Import Commit Pragmas
        id: commit_pragmas
        run: set -x; echo "text<<EOF" >> $GITHUB_OUTPUT;
             echo "${{ needs.Import-commit-message.outputs.message }}" |
               ci/get_commmit_pragmas.sh >> $GITHUB_OUTPUT;
             echo "EOF" >> $GITHUB_OUTPUT;
             cat $GITHUB_OUTPUT

  Import-commit-pragmas2:
    name: Make commit pragma variables
    runs-on: [self-hosted, mockbuilder]
    needs: [Import-commit-pragmas]
    # Map a step output to a job output
    outputs:
      skip-func-test-el8: ${{ steps.skip-func-test-el8.outputs.text }}
      rpm-test-version: ${{ steps.rpm-test-version.outputs.text }}
      pr-repos: ${{ steps.pr-repos.outputs.text }}
    steps:
      - name: Set skip-func-test-el8 variable
        id: skip-func-test-el8
        run: set -x;
             ${{ needs.Import-commit-pragmas.outputs.pragmas }}
             echo "text=$SKIP_FUNC_TEST_EL8" >> $GITHUB_OUTPUT;
             cat $GITHUB_OUTPUT
      - name: Set rpm-test-version variable
        id: rpm-test-version
        run: set -x;
             ${{ needs.Import-commit-pragmas.outputs.pragmas }}
             echo "text=$RPM_TEST_VERSION" >> $GITHUB_OUTPUT;
             cat $GITHUB_OUTPUT
      - name: Set pr-repos variable
        id: pr-repos
        run: set -x;
             ${{ needs.Import-commit-pragmas.outputs.pragmas }}
             echo "text=$PR_REPOS" >> $GITHUB_OUTPUT;
             cat $GITHUB_OUTPUT

  Build-EL8-RPM:
    name: Build RPM on EL 8
    runs-on: [self-hosted, mockbuilder]
    needs: [Import-commit-message, Import-commit-pragmas, Import-commit-pragmas2]
    # yamllint disable-line rule:line-length
    if: needs.Import-commit-pragmas2.outputs.rpm-test-version == '' && !contains(needs.Import-commit-pragmas2.outputs.pr-repos, 'daos@')
    env:
      ARTIFACTORY_URL: https://artifactory.dc.hpdd.intel.com/
      BUILD_CHROOT: /var/lib/mock/rocky+epel-8-x86_64-${{ github.run_id }}/
      DAOS_EMAIL: brian.murrell@intel.com
      DAOS_FULLNAME: daos-stack
      DISTRO: el8
      DISTRO_REPOS: disabled
      DISTRO_VERSION: 8
      MOCK_OPTIONS: --uniqueext=${{ github.run_id }}
      PR_NUM: ${{ github.event.pull_request.number }}
      # yamllint disable-line rule:line-length
      REPO_PATH: /data/gha_runners/job_repos/daos-stack/daos/PR-${{ github.event.pull_request.number }}/
      REPO_FILE_URL: https://artifactory.dc.hpdd.intel.com/artifactory/repo-files/
      RPM_BUILD_OPTIONS: --define "relval .8836.g3c16ca3d" --define "scons_args BUILD_TYPE=dev"
      RUN_ID: ${{ github.run_id }}
      STAGE_NAME: Build RPM on EL 8
      TARGET: el8
    steps:
      # - name: Show most recent commit
      #   run: echo "${{ needs.Import-commit-message.outputs.message }}"
      # - name: Show commit pragmas
      #   run: echo '${{ needs.Import-commit-pragmas.outputs.pragmas }}'
      - name: Show pr-repos commit pragma
        run: echo '${{ needs.Import-commit-pragmas2.outputs.pr-repos }}'
      - name: Import commit pragmas
        run: set -x; echo '${{ needs.Import-commit-pragmas.outputs.pragmas }}' |
             sed -e 's/^/cp_/' >> $GITHUB_ENV
      # - name: Show env
      #   run: env | sort
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 500
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Build RPM
        run: ci/rpm/build.sh
      - name: Save root.log
        uses: actions/upload-artifact@v3
        with:
          name: root.log
          path: ${{ env.BUILD_CHROOT }}result/root.log
      - name: Save build.log
        uses: actions/upload-artifact@v3
        with:
          name: build.log
          path: ${{ env.BUILD_CHROOT }}result/build.log
      - name: Create Repo
        run: env >&2;
             ci/rpm/create_repo.sh
      - name: Test Repo
        run: . ci/gha_functions.sh;
             dnf --disablerepo=\*
                 --repofrompath testrepo,file://${REPO_PATH}$(get_repo_serial)/$TARGET
                 repoquery -a;
             echo $?
      - name: Create lastSuccessfulBuild symlink
        run: . ci/gha_functions.sh;
             rm -f ${REPO_PATH}lastSuccessfulBuild;
             ln -s $(get_repo_serial) ${REPO_PATH}lastSuccessfulBuild

  Functional-EL8:
    name: Functional on EL 8
    runs-on: [self-hosted, ci_vm9]
    needs: [Build-EL8-RPM, Import-commit-message, Import-commit-pragmas, Import-commit-pragmas2]
    # https://github.com/actions/runner/issues/491#issuecomment-926924523
    if: |
      !failure() && !cancelled() &&
      needs.Import-commit-pragmas2.outputs.skip-func-test-el8 != 'true'
    env:
      TEST_TAG: pr,-hw
      # yamllint disable-line rule:line-length
      NODELIST: wolf-240vm1,wolf-240vm2,wolf-240vm3,wolf-240vm4,wolf-240vm5,wolf-240vm6,wolf-240vm7,wolf-240vm8,wolf-240vm9
      # yamllint disable-line rule:line-length
      NODESTRING: wolf-240vm1,wolf-240vm2,wolf-240vm3,wolf-240vm4,wolf-240vm5,wolf-240vm6,wolf-240vm7,wolf-240vm8,wolf-240vm9
      CONFIG_POWER_ONLY: false
      INST_RPMS: daos-client daos-tests daos-server daos-serialize daos-client-tests-openmpi ndctl
                 fio patchutils ior romio-tests testmpio python3-mpi4py-tests hdf5-mpich-tests
                 hdf5-openmpi-tests hdf5-vol-daos-openmpi-tests hdf5-vol-daos-mpich-tests
                 simul-mpich simul-openmpi MACSio-mpich MACSio-openmpi mpifileutils-mpich
      PRAGMA_SUFFIX: -vm
      NODE_COUNT: 9
      OPERATIONS_EMAIL: brian.murrell@intel.com
      TEST_RPMS: true
      COMMIT_MESSAGE: ${{ needs.Import-commit-message.outputs.message }}
      JENKINS_URL: https://build.hpdd.intel.com/
      REPOSITORY_URL: https://repo.dc.hpdd.intel.com/
      REMOVE_EXISTING_RPMS: false
      DISTRO: EL_8
      DAOS_STACK_EL_7_LOCAL_REPO: repository/daos-stack-el-7-x86_64-stable-local
      DAOS_STACK_EL_8_LOCAL_REPO: repository/daos-stack-el-8-x86_64-stable-local
      REPO_FILE_URL: https://artifactory.dc.hpdd.intel.com/artifactory/repo-files/
      # REMOTE_ACCT: ${REMOTE_ACCT:-"vagrant"}
      STAGE_NAME: Functional on EL 8
      # use to generate a launch.py junit failure
      # FTEST_ARG: --nvme=auto
    steps:
      # - name: Dump GitHub context
      #   env:
      #     GITHUB_CONTEXT: ${{ toJSON(github) }}
      #   run: echo "$GITHUB_CONTEXT"
      - name: Import commit pragmas
        run: set -x; echo '${{ needs.Import-commit-pragmas.outputs.pragmas }}' |
             sed -e 's/^/cp_/' >> $GITHUB_ENV
      # - name: Show env
      #   run: env | sort
      # - name: Show Skip-func-test-el8 commit pragma
      #   run: echo '${{ needs.Import-commit-pragmas2.outputs.skip-func-test-el8 }}'
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 500
          ref: ${{ github.event.pull_request.head.sha }}
      # - name: Show most recent commit
      #   run: echo "${{ needs.Import-commit-message.outputs.message }}"
      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.GHA_RUNNER_POC }}
      - name: Provision cluster
        run: ssh root@wolf-240 "POOL=${{ env.cp_PROVISIONING_POOL }}
             NODESTRING=${{ env.NODESTRING}}
             $(cat ci/provisioning/provision_cluster.sh)"
      - name: Wait for nodes to be ready
        #  uses: appleboy/ssh-action@master
        #  with:
        #    host: ${{ env.NODESTRING }}
        #    username: root
        #    key: ${{ secrets.GHA_RUNNER_POC }}
        #    # ssh_config: |
        #    #   Host *
        #    #   ConnectTimeout=420
        #    script: timeout=$((SECONDS+420));
        run: clush -B -S -l root -w ${{ env.NODESTRING }} "timeout=$((SECONDS+420));
                  while [ \$SECONDS -lt \$timeout ]; do
                      if [ -d /var/chef/reports ]; then
                          exit 0;
                      fi;
                      sleep 10;
                  done;
                  exit 1"
      - name: Post-provision cluster
        run: |
          . ci/gha_functions.sh
          inst_repos="${{ env.cp_PR_REPOS }} ${{ github.event.inputs.pr-repos }}"
          if [[ $inst_repos != *daos@* ]]; then
              inst_repos+=" daos@PR-${{ github.event.pull_request.number }}"
          fi
          INST_REPOS="$inst_repos" ci/provisioning/post_provision_config.sh
      - name: Run Test
        run: |
          . ci/gha_functions.sh
          test_tags=()
          for tag in ${{ env.cp_TEST_TAG && env.cp_TEST_TAG || 'pr' }}; do
              test_tag+=($tag,-hw)
          done
          TEST_TAG="$test_tag" ci/functional/test_main.sh
      - name: Job cleanup
        if: always()
        run: . ci/gha_functions.sh;
             ci/functional/job_cleanup.sh
      # - name: Debug - find junit files
      #   if: always()
      #   run: . ci/gha_functions.sh;
      #        hostname;
      #        pwd;
      #        find Functional\ on\ EL\ 8 -type f
      # - name: Debug Publish NLT test results
      #   if: always()
      #   run: pwd;
      #        ls -l ../../{,_temp/{,_github_workflow/}};
      #        echo mkdir -p ../../_temp/_github_home;
      #        ls -l ../../{,_temp/{,_github_workflow/}}
      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: Functional on EL 8 Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          junit_files: |
            Functional on EL 8/**/*.xml
            !Functional on EL 8/**/xunit1_results.xml
      - name: Publish artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Functional on EL 8 artifacts
          path: Functional on EL 8/**
      - name: Exit with failure
        run: exit 1