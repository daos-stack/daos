#!/bin/bash
# shellcheck disable=SC1000-SC9999

set -o pipefail

VERSION=0.2
CWD="$(realpath "$(dirname $0)")"
declare -A VALID_CMDS=([install]=true [update]=true)

DAOS_INSTALL_DIR="{{ daos_runtime_dir }}/install"
DAOS_SOURCE_DIR="{{ daos_source_dir }}"
SERVERS_LIST="{{ groups["daos_servers"] | join(',') }}"
{% if "daos_clients" in groups and groups["daos_clients"] | length > 0 %}
CLIENTS_LIST="{{ groups["daos_clients"] | join(',') }}"
{% endif %}

JOBS_NB=1
SCONS_EXE=scons-3
CLUSH_EXE=clush
MODULE_EXE=module

MPI_FILE_UTILS_DEPS=("https://github.com/hpc/libcircle/releases/download/v0.3/libcircle-0.3.0.tar.gz"
	"https://github.com/llnl/lwgrp/releases/download/v1.0.4/lwgrp-1.0.4.tar.gz"
	"https://github.com/llnl/dtcmp/releases/download/v1.1.4/dtcmp-1.1.4.tar.gz"
	"https://github.com/libarchive/libarchive/releases/download/v3.5.1/libarchive-3.5.1.tar.gz")

ANSI_COLOR_BLACK=30
ANSI_COLOR_RED=31
ANSI_COLOR_GREEN=32
ANSI_COLOR_YELLOW=33
ANSI_COLOR_BLUE=34
ANSI_COLOR_MAGENTA=35
ANSI_COLOR_CYAN=36
ANSI_COLOR_WHITE=37
ANSI_COLOR_BRIGHT_BLACK=90
ANSI_COLOR_BRIGHT_RED=91
ANSI_COLOR_BRIGHT_GREEN=92
ANSI_COLOR_BRIGHT_YELLOW=93
ANSI_COLOR_BRIGHT_BLUE=94
ANSI_COLOR_BRIGHT_MAGENTA=95
ANSI_COLOR_BRIGHT_CYAN=96
ANSI_COLOR_BRIGHT_WHITE=97

TRACE_LEVEL_QUIET=-1
TRACE_LEVEL_STANDARD=0
TRACE_LEVEL_VERBOSE=1
TRACE_LEVEL_DEBUG=2
TRACE_LEVEL=$TRACE_LEVEL_STANDARD

function debug
{
	if [[ $TRACE_LEVEL -ge $TRACE_LEVEL_DEBUG ]]
	then
		echo -e "[\e[${ANSI_COLOR_GREEN}mDEBUG  \e[00m] $@"
	fi
}


function info
{
	if [[ $TRACE_LEVEL -ge $TRACE_LEVEL_VERBOSE ]]
	then
		echo -e "[\e[${ANSI_COLOR_CYAN}mINFO   \e[00m] $@"
	fi
}

function warning
{
	if [[ $TRACE_LEVEL -ge $TRACE_LEVEL_STANDARD ]]
	then
		echo -e "[\e[${ANSI_COLOR_YELLOW}mWARNING\e[00m] $@" 1>&2
	fi
}

function error
{
	if [[ $TRACE_LEVEL -ge $TRACE_LEVEL_STANDARD ]]
	then
		echo -e "[\e[${ANSI_COLOR_BRIGHT_RED}mERROR  \e[00m] $@" 1>&2
	fi
}

function fatal
{
	if [[ $TRACE_LEVEL -ge $TRACE_LEVEL_STANDARD ]]
	then
		echo -e "[\e[${ANSI_COLOR_RED}mFATAL  \e[00m] $@" 1>&2
	fi
	exit 1
}

function check_cmds
{
	for cmd in $@
	do
		{ hash $cmd > "/dev/null" 2>&1 ; } || { fatal "$cmd command not installed" ; }
	done
}

function usage
{
	cat <<- EOF
		usage: daos-make.sh [OPTIONS] CMD

		Build and install DAOS for running avocado functional tests

		Options:
		   -m, --mpifileutils <path>    Path of mpi file utils source tree
		   -j, --jobs <job>             Allow N jobs at once; one job with no arg
		   -f, --force                  Overwrite the current install of DAOS
		   -h, --help                   Show this help message and exit
		   -V, --version                Show version number
		   -q, --quiet                  Quiet mode
		   -v, --verbose                Verbose mode
		   -D, --debug                  Debug mode

		Commands:
		   install                      Build and install DAOS
		   update                       Update current install of DAOS
	EOF
}

function run
{
	if [[ $TRACE_LEVEL -ge $TRACE_LEVEL_STANDARD ]]
	then
		"$@"
	else
		"$@" &> /dev/null
	fi
}

OPTIONS=$(getopt -o "m:j:fhVvDq" --long "mpifileutils:,jobs:,force,help,version,verbose,debug,quiet" -- "$@") || exit 1
eval set -- "$OPTIONS"
while true
do
	case "$1" in
		-m|--mpifileutils) MPI_FILE_UTILS_PATH="$2" ; shift 2 ;;
		-j|--jobs) JOBS_NB="$2" ; shift 2 ;;
		-f|--force) FORCE_INSTALL=true ; shift 1;;
		-h|--help) usage ; exit 0;;
		-V|--version) echo "daos-make.sh version=$VERSION" ; exit 0 ;;
		-v|--verbose) TRACE_LEVEL=$TRACE_LEVEL_VERBOSE ; shift 1 ;;
		-D|--debug) TRACE_LEVEL=$TRACE_LEVEL_DEBUG ; set -x ; shift 1 ;;
		-q|--quiet) TRACE_LEVEL=$TRACE_LEVEL_QUIET ; shift 1 ;;
		--) shift ; break ;;
		*) fatal "unrecognized command line option" ;;
	esac
done

[[ $1 ]] || fatal "Command not defined: use install or update"
CMD="$1"
[[ ${VALID_CMDS[$CMD]} == true ]] || fatal "Invalid command \"$CMD\": use install or update"

check_cmds $SCONS_EXE $MODULE_EXE $CLUSH_EXE

set -e

info "Mount of home partition"
{% if "daos_clients" in groups and groups["daos_clients"] | length > 0 %}
run $CLUSH_EXE -l root -w $CLIENTS_LIST -w $SERVERS_LIST mountpoint --quiet "$HOME"
{% else %}
run $CLUSH_EXE -w $SERVERS_LIST mountpoint --quiet "$HOME"
{% endif %}

for dir in "$DAOS_INSTALL_DIR" "$DAOS_SOURCE_DIR/build"
do
	if [[ -d "$dir" && "$CMD" == install ]]; then
		[[ -n "$FORCE_INSTALL" ]] || fatal "DAOS already installed: use install --force or update."
		info "Removing old DAOS install directory $dir"
		if ! run /bin/rm -fr "$dir" ; then
			fatal "Old install directory $dir could not be removed"
		fi

	fi
done

if [[ ! -d "$DAOS_INSTALL_DIR" ]] ; then
	info "Creating DAOS install directory $DAOS_INSTALL_DIR"
	if ! run mkdir -p "$DAOS_INSTALL_DIR" ; then
		fatal "DAOS install directory $DAOS_INSTALL_DIR could not be created"
	fi
fi

module load mpi/mpich-x86_64

cd "$DAOS_SOURCE_DIR"
SCONS_OPTS="-j $JOBS_NB"
case $CMD in
	install) SCONS_OPTS="$SCONS_OPTS --build-deps=yes --config=force" ;;
	update) SCONS_OPTS="$SCONS_OPTS --build-deps=no" ;;
	*) fatal "Unexpected case" ;;
esac

info "Building and installing DAOS from source tree $PWD to $DAOS_INSTALL_DIR"
if ! run env MPI_PKG=any "$SCONS_EXE" BUILD_TYPE=debug PREFIX="$DAOS_INSTALL_DIR" install $SCONS_OPTS ; then
	fatal "DAOS could not be properly build and/or installed"
fi

if [[ $MPI_FILE_UTILS_PATH ]] ; then
	if [[ ! -f "$MPI_FILE_UTILS_PATH/mpifileutils.spec" ]] ; then
		fatal "Invalid MPI File Utils directory: path=$MPI_FILE_UTILS_PATH"
	fi
	run rm -fr "$MPI_FILE_UTILS_PATH/deps" "$MPI_FILE_UTILS_PATH/build"
	run mkdir -p "$MPI_FILE_UTILS_PATH/deps" "$MPI_FILE_UTILS_PATH/build"

	for dep_uri in "${MPI_FILE_UTILS_DEPS[@]}" ; do
		pushd "$MPI_FILE_UTILS_PATH/deps" > /dev/null
		file_name=$(basename "$dep_uri")
		dep_name=$(basename "$dep_uri" .tar.gz)
		info "Building and installing MPI File Utils dependency $dep_name"
		run wget "$dep_uri"
		run tar xzf "$file_name"
		cd $dep_name
		opts="--prefix=$DAOS_INSTALL_DIR"
		if [[ $dep_name =~ dtcmp ]] ; then
			opts="$opts --with-lwgrp=$DAOS_INSTALL_DIR"
		fi
		run ./configure $opts
		run make -j $JOBS_NB install
		popd > /dev/null
	done

	pushd "$MPI_FILE_UTILS_PATH/build" > /dev/null
	run cmake .. \
		-DCMAKE_BUILD_TYPE=Debug \
		-DENABLE_DAOS=ON \
		-DENABLE_HDF5=ON \
		-DENABLE_LIBARCHIVE=ON \
		-DCMAKE_INSTALL_PREFIX=$DAOS_INSTALL_DIR \
		-DWITH_DAOS_PREFIX=$DAOS_INSTALL_DIR \
		-DWITH_HDF5_PREFIX=/usr \
		-DWITH_DTCMP_PREFIX=$DAOS_INSTALL_DIR \
		-DWITH_LibCircle_PREFIX=$DAOS_INSTALL_DIR \
		-DWITH_LibArchive_PREFIX=$DAOS_INSTALL_DIR
	run make -j $JOBS_NB install
	popd > /dev/null
fi

info "Updating DAOS libraries install"
for filepath in $(find "$DAOS_INSTALL_DIR/lib64" -maxdepth 1 -type l)
do
	filename=$(basename $filepath)
	run $CLUSH_EXE -l root -w $SERVERS_LIST -w $CLIENTS_LIST ln -fvs "$(readlink -f "$filepath")" "/lib64/$filename"
done

info "Updating dynamic linker configuration"
run $CLUSH_EXE -l root -w $SERVERS_LIST -w $CLIENTS_LIST ldconfig

info "Finalizing spdk install"
for item in $(find "$DAOS_INSTALL_DIR/share/daos" -type f)
do
        dest="/usr/${item#$DAOS_INSTALL_DIR/}"
        run $CLUSH_EXE -l root -w $SERVERS_LIST install -v -D -o root -g root -m 755 "$item" "$dest"
done

info "Finalizing daos_server_helper install"
run chmod 0446 "$DAOS_INSTALL_DIR/bin/daos_server_helper"
run $CLUSH_EXE -l root -w $SERVERS_LIST cp -f "$DAOS_INSTALL_DIR/bin/daos_server_helper" /usr/bin
run $CLUSH_EXE -l root -w $SERVERS_LIST chown root:daos_server /usr/bin/daos_server_helper
run $CLUSH_EXE -l root -w $SERVERS_LIST chmod 4755 /usr/bin/daos_server_helper
run $CLUSH_EXE -w $SERVERS_LIST chmod a-x  "$DAOS_INSTALL_DIR/bin/daos_server_helper"
