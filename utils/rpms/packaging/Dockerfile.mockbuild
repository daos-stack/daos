#
# Copyright 2018-2024 Intel Corporation
# Copyright 2025 Hewlett Packard Enterprise Development LP
#
# 'recipe' for Docker to build an RPM
#

# Pull base image
ARG FVERSION=latest
FROM fedora:$FVERSION
# Needed for later use of FVERSION
ARG FVERSION
LABEL maintainer="daos@daos.groups.io"

# Use local repo server if present
ARG REPO_FILE_URL
ARG DAOS_LAB_CA_FILE_URL
# script to install OS updates basic tools and daos dependencies
# COPY ./utils/scripts/install-fedora.sh /tmp/install.sh
# script to setup local repo if available
COPY ./utils/scripts/helpers/repo-helper-fedora.sh /tmp/repo-helper.sh

RUN chmod +x /tmp/repo-helper.sh &&                 \
    /tmp/repo-helper.sh &&                          \
    rm -f /tmp/repo-helper.sh

# Install basic tools
# The unset commands are currently needed for the combination of running
# with a local repository, yet needing a proxy to reach outside repositories.
# This needs to be moved to a shell script like above in the future to
# properly only remove the proxy variables only when they need to be removed
RUN dnf -y install mock make                                        \
                   rpm-build createrepo rpmlint redhat-lsb-core git \
                   python-srpm-macros rpmdevtools &&                \
    dnf -y clean all

# use same UID as host and default value of 1000 if not specified
ARG UID=1000

# Add build user (to keep rpmbuild happy)
ENV USER build
ENV PASSWD build
RUN useradd -u $UID -ms /bin/bash $USER
RUN echo "$USER:$PASSWD" | chpasswd
# add the user to the mock group so it can run mock
RUN usermod -a -G mock $USER
RUN mkdir -p /var/cache/mock && chown $USER:root /var/cache/mock

ARG CB0
RUN dnf -y upgrade && \
    dnf clean all

# Monkey-patch rpmlint until a new release is made with
# https://github.com/rpm-software-management/rpmlint/pull/795 in it
# But make sure to patch after dnf upgrade so that an upgraded rpmlint
# RPM doesn't wipe out our patch
# Ditto for the patch to zero and display ccache stats
# https://github.com/rpm-software-management/mock/pull/1299
ARG PACKAGINGDIR=./utils/rpms/packaging
COPY ${PACKAGINGDIR}/*.patch ./
RUN (cd $(python3 -c 'import site; print(site.getsitepackages()[-1])') &&                      \
     if ! grep -e --ignore-unused-rpmlintrc rpmlint/cli.py; then                               \
         if ! patch -p1 < $OLDPWD/rpmlint--ignore-unused-rpmlintrc.patch; then                 \
             exit 1;                                                                           \
         fi;                                                                                   \
         rm -f rpmlint/__pycache__/{cli,lint}.*.pyc;                                           \
     fi;                                                                                       \
     if ! grep _ccachePostBuildHook mockbuild/plugins/ccache.py; then                          \
         if ! patch -p3 < $OLDPWD/ccache-stats.patch; then                                     \
             exit 1;                                                                           \
         fi;                                                                                   \
         rm -f mockbuild/plugins/__pycache__/ccache.*.pyc;                                     \
     fi);                                                                                      \
     rm -f rpmlint--ignore-unused-rpmlintrc.patch ccache-stats.patch

# show the release that was built
ARG CACHEBUST
RUN cat /etc/os-release
