# Copyright (C) 2018-2021 Intel Corporation
# All rights reserved.
#
# 'recipe' for Docker to build an image of Ubuntu-based
# environment for building the DAOS project.
#

# Pull base image
FROM ubuntu:20.04
LABEL maintainer="daos@daos.groups.io"

# Intermittent cache-bust.  Used to reduce load on the actual CACHEBUST later.
ARG CB0

ENV DEBIAN_FRONTEND=noninteractive

# Install basic tools
RUN apt-get -y update &&						\
    apt-get -y install apt-utils &&					\
    apt-get -y upgrade &&						\
    apt-get -y install							\
	build-essential scons python3-distro python3-distutils valgrind	\
	autoconf libtool-bin locales pkg-config pandoc clang cmake	\
	libcmocka-dev libnuma-dev patchelf libhwloc-dev libboost-dev	\
	uuid-dev libssl-dev fuse3 libfuse3-dev curl libjson-c-dev 	\
	liblz4-dev libibverbs-dev librdmacm-dev libaio-dev yasm		\
	python3-dev golang-go git libyaml-dev python3-tabulate		\
	python3-pyxattr openjdk-8-jdk maven libipmctl-dev		\
	libcunit1-dev libopenmpi-dev numactl doxygen libunwind-dev	\
	python3-junit.xml sudo &&					\
    apt-get clean all

# hack the default shell to bash instead of dash
RUN rm /bin/sh && ln -s bash /bin/sh

RUN locale-gen en_US.UTF-8

# use Java 8 instead of default Java 11
RUN update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java

ARG UID=1000

# Add DAOS users
RUN useradd --uid $UID --user-group --create-home --shell /bin/bash --home /home/daos daos_server
RUN echo "daos_server:daos_server" | chpasswd
RUN useradd --user-group --create-home --shell /bin/bash daos_agent
RUN echo "daos_agent:daos_agent" | chpasswd
RUN echo "daos_server ALL=(root) NOPASSWD: ALL" >> /etc/sudoers.d/daos_sudo_setup

# Create directory for DAOS backend storage
RUN mkdir -p /opt/daos /mnt/daos /var/run/daos_server /var/run/daos_agent &&	\
    chown daos_server.daos_server /opt/daos /mnt/daos /var/run/daos_server &&	\
    chown daos_agent.daos_agent /var/run/daos_agent

# The COPY command has a --chown option but it's not well supported so copy as
# root then run a chown command which is frustrating as the copy can take a few
# seconds.
WORKDIR /home/daos/pre
COPY SConstruct .
COPY utils/sl utils/sl
COPY utils/build.config utils/
RUN chown -R daos_server.daos_server /home/daos
USER daos_server:daos_server
RUN ln -s utils/sl site_scons

# Control what to build.  By default Dockerfiles build everything to allow for
# ease-of-use for users, however in CI everything is turned off and then
# selectively enabled.  Turning off any step disables all future steps.
ARG DAOS_DEPS_BUILD=yes

# Now do an update to ensure software is up to date for the deps build.  If the
# src hasn't changed then this won't do anything, but if it has then we want to
# ensure that latest dependencies are used.
USER root:root
RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || \
    { apt-get update && apt-get -y upgrade && apt-get clean all; }
USER daos_server:daos_server

ARG DEPS_JOBS=1

RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || \
    { scons --build-deps=yes --jobs $DEPS_JOBS PREFIX=/opt/daos --deps-only && \
    /bin/rm -rf build *.gz; }

USER root:root
ARG CACHEBUST
RUN apt-get update && apt-get -y upgrade && apt-get clean all
USER daos_server:daos_server

WORKDIR /home/daos/daos/
COPY VERSION LICENSE ftest.sh SConstruct ./
COPY utils utils
COPY src src
USER root:root
RUN chown -R daos_server.daos_server /home/daos
USER daos_server:daos_server
RUN ln -s utils/sl site_scons

# select compiler to use
ARG COMPILER=gcc
ARG JOBS=$DEPS_JOBS
ARG DAOS_BUILD=$DAOS_DEPS_BUILD

# Build DAOS
RUN [ "$DAOS_BUILD" != "yes" ] || \
    { scons --jobs $JOBS install PREFIX=/opt/daos COMPILER=$COMPILER && \
    /bin/rm -rf build && \
    cp -r utils/config/examples /opt/daos; }

# Set environment variables
ENV LD_LIBRARY_PATH=/opt/daos/lib:/opt/daos/lib64:$LD_LIBRARY_PATH
ENV PATH=/opt/daos/bin:$PATH
ENV FI_SOCKETS_MAX_CONN_RETRY=1

# Build java and hadoop bindings
WORKDIR /home/daos/daos/src/client/java
# Set maven repo mirror
RUN mkdir -p /home/daos/.m2
RUN echo -e "<settings>\n\
        <mirrors>\n\
                <mirror>\n\
                        <id>google-maven-central</id>\n\
                        <name>GCS Maven Central mirror</name>\n\
                        <url>https://maven-central.storage-download.googleapis.com/maven2/</url>\n\
                        <mirrorOf>central</mirrorOf>\n\
                </mirror>\n\
        </mirrors>\n\
</settings>" > /home/daos/.m2/settings.xml

ARG DAOS_JAVA_BUILD=$DAOS_BUILD

RUN [ "$DAOS_JAVA_BUILD" != "yes" ] || \
    mvn clean install -T 1C -DskipITs -Dgpg.skip -Ddaos.install.path=/opt/daos
WORKDIR /home/daos

# Remove local copy
RUN rm -rf /home/daos/*
