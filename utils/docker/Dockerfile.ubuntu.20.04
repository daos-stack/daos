# Copyright 2018-2022 Intel Corporation
# All rights reserved.
#
# 'recipe' for Docker to build an image of Ubuntu-based
# environment for building the DAOS project.
#

# Pull base image
FROM ubuntu:20.04
LABEL maintainer="daos@daos.groups.io"

# Intermittent cache-bust.  Used to reduce load on the actual CACHEBUST later.
ARG CB0

ENV DEBIAN_FRONTEND=noninteractive

# Install basic tools
COPY ./utils/scripts/install-ubuntu20.sh /tmp/install.sh
RUN echo "APT::Get::Assume-Yes \"true\";" > /etc/apt/apt.conf.d/no-prompt
RUN echo "APT::Install-Recommends \"false\";" > /etc/apt/apt.conf.d/no-recommends
RUN apt-get update && apt-get install apt-utils && apt-get upgrade && chmod +x /tmp/install.sh && \
  /tmp/install.sh && apt-get clean all

RUN locale-gen en_US.UTF-8

# use Java 8 instead of default Java 11
RUN update-alternatives --set \
    java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java

ARG UID=1000

# Add DAOS users
RUN useradd --no-log-init --uid $UID --user-group --create-home --shell /bin/bash \
            --home /home/daos daos_server
RUN echo "daos_server:daos_server" | chpasswd
RUN useradd --no-log-init --user-group --create-home --shell /bin/bash daos_agent
RUN echo "daos_agent:daos_agent" | chpasswd

# Create directory for DAOS backend storage
RUN mkdir -p /opt/daos /mnt/daos /var/run/daos_server /var/run/daos_agent /home/daos/pre /home/daos/daos &&   \
    chown -R daos_server.daos_server /opt/daos /mnt/daos /var/run/daos_server /home/daos &&  \
    chown daos_agent.daos_agent /var/run/daos_agent

# The COPY command has a --chown option but it's not well supported so copy as
# root then run a chown command which is frustrating as the copy can take a few
# seconds.
WORKDIR /home/daos/pre
COPY --chown=daos_server:daos_server SConstruct .
COPY --chown=daos_server:daos_server site_scons site_scons
COPY --chown=daos_server:daos_server utils/build.config utils/

# Control what to build.  By default Dockerfiles build everything to allow for
# ease-of-use for users, however in CI everything is turned off and then
# selectively enabled.  Turning off any step disables all future steps.
ARG DAOS_DEPS_BUILD=yes
ARG DAOS_KEEP_BUILD=no
ARG DAOS_TARGET_TYPE=release

# Now do an update to ensure software is up to date for the deps build.  If the
# src hasn't changed then this won't do anything, but if it has then we want to
# ensure that latest dependencies are used.
USER root:root
RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || \
    { apt-get update && apt-get upgrade && apt-get clean all; }
USER daos_server:daos_server

ARG DEPS_JOBS=1

RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || \
    { scons --build-deps=yes --jobs $DEPS_JOBS PREFIX=/opt/daos \
      TARGET_TYPE=$DAOS_TARGET_TYPE --deps-only && \
    ([ "$DAOS_KEEP_BUILD" != "no" ] || /bin/rm -rf build *.gz); }

USER root:root
ARG CACHEBUST
RUN [ -z "$CACHEBUST" ] || { apt-get update && apt-get upgrade && apt-get clean all; }
USER daos_server:daos_server

# Set a label.  This is useful for searching for DAOS images, but is also used
# in github-actions to prune elements of the dockerfile below this point.
LABEL DAOS=true

WORKDIR /home/daos/daos/
COPY --chown=daos_server:daos_server VERSION LICENSE ftest.sh SConstruct .clang-format ./
COPY --chown=daos_server:daos_server site_scons site_scons
COPY --chown=daos_server:daos_server utils utils
COPY --chown=daos_server:daos_server src src

# select compiler to use
ARG COMPILER=gcc
ARG JOBS=$DEPS_JOBS
ARG DAOS_BUILD_TYPE=$DAOS_TARGET_TYPE
ARG DAOS_BUILD=$DAOS_DEPS_BUILD

# Build DAOS
RUN [ "$DAOS_BUILD" != "yes" ] || \
    { scons --jobs $JOBS install PREFIX=/opt/daos COMPILER=$COMPILER \
      BUILD_TYPE=$DAOS_BUILD_TYPE TARGET_TYPE=$DAOS_TARGET_TYPE && \
    ([ "$DAOS_KEEP_BUILD" != "no" ] || /bin/rm -rf build) && \
    go clean -cache && cp -r utils/config/examples /opt/daos; }

# Set environment variables
ENV PATH=/opt/daos/bin:$PATH
ENV FI_SOCKETS_MAX_CONN_RETRY=1

# Build java and hadoop bindings
WORKDIR /home/daos/daos/src/client/java

ARG DAOS_JAVA_BUILD=$DAOS_BUILD

RUN [ "$DAOS_JAVA_BUILD" != "yes" ] || \
    { mkdir /home/daos/.m2 && \
    cp /home/daos/daos/utils/scripts/maven-settings.xml.in /home/daos/.m2/settings.xml && \
    mvn clean install -ntp -T 1C -DskipITs -Dgpg.skip -Ddaos.install.path=/opt/daos; }
WORKDIR /home/daos

ARG DAOS_KEEP_SRC=no
# Remove local copy
RUN [ "$DAOS_KEEP_SRC" != "no" ] || rm -rf /home/daos/*
