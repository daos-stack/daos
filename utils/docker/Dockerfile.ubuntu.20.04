# Copyright (C) 2018-2021 Intel Corporation
# All rights reserved.
#
# 'recipe' for Docker to build an image of Ubuntu-based
# environment for building the DAOS project.
#

# Pull base image
FROM ubuntu:20.04
LABEL maintainer="daos@daos.groups.io"

# Intermittent cache-bust.  Used to reduce load on the actual CACHEBUST later.
ARG CB0

ENV DEBIAN_FRONTEND=noninteractive

# Install basic tools
RUN apt-get -y update && \
    apt-get -y install apt-utils && \
    apt-get -y upgrade && \
    apt-get -y install \
        autoconf \
        build-essential \
        clang \
        cmake \
	curl \
        fuse3 \
        git \
        golang-go \
        kmod \
        libaio-dev \
        libboost-dev \
        libcmocka-dev \
        libcunit1-dev \
        libfuse3-dev \
        libhwloc-dev \
        libibverbs-dev \
        libipmctl-dev \
        libjson-c-dev \
        liblz4-dev \
        libnuma-dev \
        libopenmpi-dev \
        librdmacm-dev \
        libssl-dev \
        libtool-bin \
        libunwind-dev \
        libyaml-dev \
        locales \
        maven \
        meson \
        numactl \
        ninja-build \
        openjdk-8-jdk \
        patchelf \
        pciutils \
        pkg-config \
        python3-defusedxml \
        python3-dev \
        python3-distro \
        python3-junit.xml \
        python3-pyelftools \
        python3-pyxattr \
        python3-tabulate \
        scons \
        sudo \
        uuid-dev \
        valgrind \
        yasm && \
    apt-get clean all

# hack the default shell to bash instead of dash
RUN rm /bin/sh && ln -s bash /bin/sh

RUN locale-gen en_US.UTF-8

# use Java 8 instead of default Java 11
RUN update-alternatives --set \
    java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java

ARG UID=1000

# Add DAOS users
RUN useradd --uid $UID --user-group --create-home --shell /bin/bash \
            --home /home/daos daos_server
RUN echo "daos_server:daos_server" | chpasswd
RUN useradd --user-group --create-home --shell /bin/bash daos_agent
RUN echo "daos_agent:daos_agent" | chpasswd
RUN echo "daos_server ALL=(root) NOPASSWD: ALL" >> /etc/sudoers.d/daos_sudo_setup

# Create directory for DAOS backend storage
RUN mkdir -p /opt/daos /mnt/daos /var/run/daos_server /var/run/daos_agent &&   \
    chown daos_server.daos_server /opt/daos /mnt/daos /var/run/daos_server &&  \
    chown daos_agent.daos_agent /var/run/daos_agent

# The COPY command has a --chown option but it's not well supported so copy as
# root then run a chown command which is frustrating as the copy can take a few
# seconds.
WORKDIR /home/daos/pre
COPY SConstruct .
COPY site_scons site_scons
COPY utils/build.config utils/
RUN chown -R daos_server.daos_server /home/daos
USER daos_server:daos_server

# Control what to build.  By default Dockerfiles build everything to allow for
# ease-of-use for users, however in CI everything is turned off and then
# selectively enabled.  Turning off any step disables all future steps.
ARG DAOS_DEPS_BUILD=yes
ARG DAOS_KEEP_BUILD=no
ARG DAOS_TARGET_TYPE=release

# Now do an update to ensure software is up to date for the deps build.  If the
# src hasn't changed then this won't do anything, but if it has then we want to
# ensure that latest dependencies are used.
USER root:root
RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || \
    { apt-get update && apt-get -y upgrade && apt-get clean all; }
USER daos_server:daos_server

ARG DEPS_JOBS=1

RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || \
    { scons --build-deps=yes --jobs $DEPS_JOBS PREFIX=/opt/daos \
      TARGET_TYPE=$DAOS_TARGET_TYPE --deps-only && \
    ([ "$DAOS_KEEP_BUILD" != "no" ] || /bin/rm -rf build *.gz); }

USER root:root
ARG CACHEBUST
RUN apt-get update && apt-get -y upgrade && apt-get clean all
USER daos_server:daos_server

# Set a label.  This is useful for searching for DAOS images, but is also used
# in github-actions to prune elements of the dockerfile below this point.
LABEL DAOS=stage1

WORKDIR /home/daos/daos/
COPY VERSION LICENSE ftest.sh SConstruct ./
COPY site_scons site_scons
COPY utils utils
COPY src src
USER root:root
RUN chown -R daos_server.daos_server /home/daos/daos
USER daos_server:daos_server

# select compiler to use
ARG COMPILER=gcc
ARG JOBS=$DEPS_JOBS
ARG DAOS_BUILD_TYPE=$DAOS_TARGET_TYPE
ARG DAOS_BUILD=$DAOS_DEPS_BUILD

# Build DAOS
RUN [ "$DAOS_BUILD" != "yes" ] || \
    { scons --jobs $JOBS install PREFIX=/opt/daos COMPILER=$COMPILER \
      BUILD_TYPE=$DAOS_BUILD_TYPE TARGET_TYPE=$DAOS_TARGET_TYPE && \
    /bin/rm -rf build && go clean -cache && \
    cp -r utils/config/examples /opt/daos; }

# Set environment variables
ENV PATH=/opt/daos/bin:$PATH
ENV FI_SOCKETS_MAX_CONN_RETRY=1

USER root:root
LABEL DAOS=true
USER daos_server:daos_server

# Build java and hadoop bindings
WORKDIR /home/daos/daos/src/client/java
# Set maven repo mirror
RUN mkdir -p /home/daos/.m2
RUN echo -e "<settings>\n\
        <mirrors>\n\
                <mirror>\n\
                        <id>google-maven-central</id>\n\
                        <name>GCS Maven Central mirror</name>\n\
                        <url>https://maven-central.storage-download.googleapis.com/maven2/</url>\n\
                        <mirrorOf>central</mirrorOf>\n\
                </mirror>\n\
        </mirrors>\n\
</settings>" > /home/daos/.m2/settings.xml

ARG DAOS_JAVA_BUILD=$DAOS_BUILD

RUN [ "$DAOS_JAVA_BUILD" != "yes" ] || \
    mvn clean install -T 1C -DskipITs -Dgpg.skip -Ddaos.install.path=/opt/daos
WORKDIR /home/daos

ARG DAOS_KEEP_SRC=no
# Remove local copy
RUN [ $"DAOS_KEEP_SRC" != "no" ] || rm -rf /home/daos/*
