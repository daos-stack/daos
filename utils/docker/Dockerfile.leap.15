# Copyright (C) 2018-2021 Intel Corporation
# All rights reserved.
#
# 'recipe' for Docker to build an image of centOS-based
# environment for building the DAOS project.
#

# Pull base image
FROM opensuse/leap:15.2
LABEL maintainer="daos@daos.groups.io"

# Use our own repo cache
ARG REPO_URL=""
ARG REPO_GROUP_LEAP15=""
RUN if [ -n "${REPO_GROUP_LEAP15}" ]; then                             \
        rm -f /etc/zypp/repos.d/*.repo;                                \
        zypper --non-interactive ar                                    \
                ${REPO_URL}${REPO_GROUP_LEAP15} daos-stack-group-repo; \
        zypper --non-interactive mr --gpgcheck-allow-unsigned-repo     \
               daos-stack-group-repo;                                  \
    fi

# Make sure repos are up to date
RUN zypper --non-interactive --no-gpg-checks --gpg-auto-import-keys refresh

# Allow packages to change vendors
RUN echo "solver.allowVendorChange = true" >> /etc/zypp/zypp.conf

# Update distribution
# It's better to put the zypper update in the same "cache layer" as the
# zypper install command so that the database is updated if/when the
# installed packages list below is updated
# TODO: Do not clean as part of this cache layer as Zypper is used later
# on.
RUN zypper --non-interactive update &&					\
    zypper --non-interactive install					\
	boost-devel clang cmake cunit-devel curl doxygen flex		\
	gcc gcc-c++ git graphviz gzip					\
	libaio-devel libcmocka-devel libevent-devel libiscsi-devel	\
	libltdl7 libnuma-devel libopenssl-devel libtool			\
	libuuid-devel libyaml-devel python3-tabulate			\
	make man nasm pandoc patch python2-pip				\
	readline-devel sg3_utils which yasm				\
	python-devel python3-devel valgrind-devel hwloc-devel		\
	openmpi3-devel man fuse3-devel patchelf scons lua-lmod		\
	libjson-c-devel liblz4-devel python3-distro curl		\
	python3-pyxattr							\
	java-1_8_0-openjdk-devel maven python3-PyYAML			\
	libunwind-devel &&						\
    zypper clean all

# Monkey-patch MODULEPATH
RUN if ! grep MODULEPATH=.*/usr/share/modules /etc/profile.d/lmod.sh; then        \
        sed -e '/MODULEPATH=/s/$/:\/usr\/share\/modules/' /etc/profile.d/lmod.sh; \
    fi

RUN update-ca-certificates
RUN zypper --non-interactive install --allow-unsigned-rpm lua-lmod

RUN if [ -z "${REPO_GROUP_LEAP15}" ]; then                                                                                        \
        zypper --non-interactive addrepo                                                                                          \
        https://download.opensuse.org/repositories/devel:languages:go/openSUSE_Leap_15.1/devel:languages:go.repo;                 \
        zypper --non-interactive --gpg-auto-import-keys refresh;                                                                  \
    else                                                                                                                          \
         # Need the GPG key for the GO language repo (part of the group repo above)                                               \
         rpm --import "${REPO_URL}${REPO_GROUP_LEAP15%/*}/opensuse-15.2-devel-languages-go-x86_64-proxy/repodata/repomd.xml.key"; \
    fi
# We actually only need go 1.12 or higher, but SUSE's 1.12 package is actually 1.11
# https://bugzilla.opensuse.org/show_bug.cgi?id=1178985
RUN zypper --non-interactive install -y ipmctl-devel go1.14 go1.14-race

ARG UID=1000

# Add DAOS users
RUN useradd --uid $UID --user-group --create-home --shell /bin/bash --home /home/daos daos_server
RUN echo "daos_server:daos_server" | chpasswd
RUN useradd --user-group --create-home --shell /bin/bash daos_agent
RUN echo "daos_agent:daos_agent" | chpasswd

# Create directory for DAOS backend storage
RUN mkdir -p /opt/daos && chown -R daos_server.daos_server /opt/daos
RUN mkdir /mnt/daos && chown daos_server.daos_server /mnt/daos
RUN mkdir /var/run/daos_server && chown daos_server.daos_server /var/run/daos_server
RUN mkdir /var/run/daos_agent && chown daos_agent.daos_agent /var/run/daos_agent

ARG JENKINS_URL=""
ARG QUICKBUILD=false
ARG QUICKBUILD_DEPS=""
ARG REPOS=""
ARG REPO_LOCAL_LEAP15=""
RUN if $QUICKBUILD; then                                                                                         \
        for REPO_LEAP15 in $REPO_LOCAL_LEAP15; do                                                                \
            MY_REPO="${REPO_URL}${REPO_LEAP15}";                                                                 \
            MY_NAME="${MY_REPO#*//}";                                                                            \
            MY_NAME="${MY_NAME//\//_}";                                                                          \
            zypper --non-interactive addrepo --no-gpgcheck                                                       \
                   ${MY_REPO} ${MY_NAME};                                                                        \
        done;                                                                                                    \
        for repo in $REPOS; do                                                                                   \
            branch="master";                                                                                     \
            build_number="lastSuccessfulBuild";                                                                  \
            if [[ $repo = *@* ]]; then                                                                           \
                branch="${repo#*@}";                                                                             \
                repo="${repo%@*}";                                                                               \
                if [[ $branch = *:* ]]; then                                                                     \
                    build_number="${branch#*:}";                                                                 \
                    branch="${branch%:*}";                                                                       \
                fi;                                                                                              \
            fi;                                                                                                  \
            zypper --non-interactive addrepo --no-gpgcheck                                                       \
                   ${JENKINS_URL}job/daos-stack/job/$repo/job/$branch/$build_number/artifact/artifacts/leap15/   \
                   $repo:$branch:$build_number;                                                                  \
        done;                                                                                                    \
        echo "Installing: $QUICKBUILD_DEPS";                                                                     \
        echo "$QUICKBUILD_DEPS" | tr '\n' '\0' | xargs -0 zypper --non-interactive install;                      \
    fi

# force an upgrade to get any newly built RPMs
RUN zypper addlock fuse fuse-libs fuse-devel libraft0 raft-devel mercury mercury-devel
ARG CACHEBUST=1
RUN zypper --non-interactive update && zypper clean all

# Control what to build.  By default Dockerfiles build everything to allow for
# ease-of-use for users, however in CI everything is turned off and then
# selectively enabled.  Turning off any step disables all future steps.
ARG DAOS_DEPS_BUILD=yes
ARG DAOS_BUILD=$DAOS_DEPS_BUILD
ARG DAOS_JAVA_BUILD=$DAOS_BUILD
# Legacy, NOBUILD should be set to any string to disable all three.
ARG NOBUILD=no

# select compiler to use
ARG COMPILER=gcc

# The COPY command has a --chown option but it's not well supported so copy as
# root then run a chown command which is frustrating as the copy can take a few
# seconds.
WORKDIR /home/daos/pre
COPY SConstruct .
COPY utils/sl utils/sl
COPY utils/build.config utils/
RUN chown -R daos_server.daos_server /home/daos
USER daos_server:daos_server
RUN ln -s utils/sl site_scons

RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || \
    (scons --build-deps=yes install PREFIX=/opt/daos --deps-only && \
    /bin/rm -rf build *.gz)

WORKDIR /home/daos/daos/
COPY VERSION LICENSE ftest.sh SConstruct ./
COPY utils utils
COPY src src
USER root:root
RUN chown -R daos_server.daos_server /home/daos
USER daos_server:daos_server
RUN ln -s utils/sl site_scons

# Build DAOS
RUN [ "$DAOS_BUILD" != "yes" ] || \
    (scons -j 4 install PREFIX=/opt/daos COMPILER=$COMPILER && \
    /bin/rm -rf build && \
    cp -r utils/config/examples /opt/daos)

# Set environment variables
ENV LD_LIBRARY_PATH=/opt/daos/lib:/opt/daos/lib64:$LD_LIBRARY_PATH
ENV PATH=/opt/daos/bin:$PATH
ENV FI_SOCKETS_MAX_CONN_RETRY=1

# Build java and hadoop bindings
WORKDIR /home/daos/daos/src/client/java
# Set maven repo mirror
RUN mkdir -p /home/daos/.m2
RUN echo -e "<settings>\n\
        <mirrors>\n\
                <mirror>\n\
                        <id>google-maven-central</id>\n\
                        <name>GCS Maven Central mirror</name>\n\
                        <url>https://maven-central.storage-download.googleapis.com/maven2/</url>\n\
                        <mirrorOf>central</mirrorOf>\n\
                </mirror>\n\
        </mirrors>\n\
</settings>" > /home/daos/.m2/settings.xml

RUN [ "$DAOS_JAVA_BUILD" != "yes" ] || \
    mvn clean install -T 1C -DskipITs -Dgpg.skip -Ddaos.install.path=/opt/daos
WORKDIR /home/daos

# Remove local copy
RUN rm -rf /home/daos/*
