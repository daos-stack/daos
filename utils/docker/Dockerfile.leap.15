# Copyright (C) 2018-2022 Intel Corporation
# All rights reserved.
#
# 'recipe' for Docker to build an image of Leap based
# environment for building the DAOS project.
#

# Pull base image
FROM opensuse/leap:15.2
LABEL maintainer="daos@daos.groups.io"

# Intermittent cache-bust.  Used to reduce load on the actual CACHEBUST later.
ARG CB0

# If a local distro repository is supplied, then we should use it
# and disable using the distro repositories that can be mirrored.
# The Docker image starts out with the DISTRO provided GPG keys
# on the disk, but not installed.  These must be installed before
# adding any repo that needs GPG keys but does not provide meta
# data for installing those keys.
ARG REPO_URL
ARG REPO_DISTRO
RUN if [ -n "${REPO_DISTRO}" ]; then                                           \
      rm -f /etc/zypp/repos.d/*.repo &&                                        \
      zypper --non-interactive addrepo --gpgcheck-allow-unsigned-repo          \
            ${REPO_URL}${REPO_DISTRO}/ daos-stack-distro-group-repo &&         \
      zypper --non-interactive modifyrepo --gpgcheck-allow-unsigned-repo       \
             daos-stack-distro-group-repo &&                                   \
      zypper clean --all;                                                      \
    fi

# If a local DAOS repository is supplied, then we should use it
# This is mainly for quickbuilds
ARG REPO_DAOS
RUN if [ -n "$REPO_DAOS" ]; then                                \
      zypper --non-interactive addrepo --gpgcheck-allow-unsigned-repo          \
             ${REPO_URL}${REPO_DAOS} daos-stack-daos-group-repo &&             \
      zypper --non-interactive modifyrepo --no-gpgcheck                        \
             daos-stack-daos-group-repo &&                                     \
      zypper addlock --repo daos-stack-daos-group-repo                         \
             'fuse<3' 'libfuse-devel<3' 'fuse-libs<3'                          \
             'fuse-debuginfo<3' 'ompi' &&                                      \
      zypper clean --all;                                                      \
    fi
# Allow packages to change vendors
RUN echo "solver.allowVendorChange = true" >> /etc/zypp/zypp.conf

ARG JENKINS_URL
ARG REPOS
RUN for repo in $REPOS; do                                                                                 \
        branch="master";                                                                                   \
        build_number="lastSuccessfulBuild";                                                                \
        if [[ $repo = *@* ]]; then                                                                         \
            branch="${repo#*@}";                                                                           \
            repo="${repo%@*}";                                                                             \
            if [[ $branch = *:* ]]; then                                                                   \
                build_number="${branch#*:}";                                                               \
                branch="${branch%:*}";                                                                     \
            fi;                                                                                            \
        fi;                                                                                                \
        zypper --non-interactive addrepo --no-gpgcheck                                                     \
               ${JENKINS_URL}job/daos-stack/job/$repo/job/$branch/$build_number/artifact/artifacts/leap15/ \
               $repo:$branch:$build_number;                                                                \
    done

# Install OS updates and package.  Include basic tools and daos dependencies
COPY ./utils/scripts/install-leap15.sh /tmp/install.sh
RUN chmod +x /tmp/install.sh
RUN /tmp/install.sh

RUN if ! grep MODULEPATH=.*/usr/share/modules /etc/profile.d/lmod.sh; then \
        sed -e '/MODULEPATH=/s/$/:\/usr\/share\/modules/'                  \
               /etc/profile.d/lmod.sh;                                     \
    fi

RUN update-ca-certificates

ARG UID=1000

# Add DAOS users
RUN useradd --no-log-init --uid $UID --user-group --create-home --shell /bin/bash \
            --home /home/daos daos_server
RUN echo "daos_server:daos_server" | chpasswd
RUN useradd --no-log-init --user-group --create-home --shell /bin/bash daos_agent
RUN echo "daos_agent:daos_agent" | chpasswd

# Create directory for DAOS backend storage
RUN mkdir -p /opt/daos /mnt/daos /var/run/daos_server /var/run/daos_agent &&   \
    chown daos_server.daos_server /opt/daos /mnt/daos /var/run/daos_server &&  \
    chown daos_agent.daos_agent /var/run/daos_agent

ARG QUICKBUILD=false
ARG QUICKBUILD_DEPS
RUN if $QUICKBUILD; then                                                       \
        zypper --non-interactive --gpg-auto-import-keys --no-gpg-checks ref;   \
        echo "Installing: $QUICKBUILD_DEPS";                                   \
        echo "$QUICKBUILD_DEPS" | sed -e '/^$/d' | tr '\n' '\0' |              \
              xargs -0 zypper --non-interactive install;                       \
        zypper clean --all;                                                    \
    fi

RUN zypper addlock fuse fuse-libs fuse-devel \
           libraft0 raft-devel mercury mercury-devel

# The COPY command has a --chown option but it's not well supported so copy as
# root then run a chown command which is frustrating as the copy can take a few
# seconds.
WORKDIR /home/daos/pre
COPY SConstruct .
COPY site_scons site_scons
COPY utils/build.config utils/
RUN chown -R daos_server.daos_server /home/daos
USER daos_server:daos_server

# Control what to build.  By default Dockerfiles build everything to allow for
# ease-of-use for users, however in CI everything is turned off and then
# selectively enabled.  Turning off any step disables all future steps.
ARG DAOS_DEPS_BUILD=yes
ARG DAOS_KEEP_BUILD=no
ARG DAOS_TARGET_TYPE=release

# Now do an update to ensure software is up to date for the deps build.  If the
# src hasn't changed then this won't do anything, but if it has then we want to
# ensure that latest dependencies are used.
USER root:root
RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || \
    { zypper --non-interactive --gpg-auto-import-keys --no-gpg-checks ref && \
      zypper --non-interactive update && \
      zypper clean --all; }
USER daos_server:daos_server

ARG DEPS_JOBS=1

RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || \
    { scons --build-deps=yes --jobs $DEPS_JOBS PREFIX=/opt/daos \
      TARGET_TYPE=$DAOS_TARGET_TYPE --deps-only && \
    ([ "$DAOS_KEEP_BUILD" != "no" ] || /bin/rm -rf build *.gz); }
USER root:root

# Load the COMPILER arg early, and optionally install the Intel compiler
# Do this before the CACHEBUST to make best use of cache as this is a big
# download, and make it optional on the value of COMPILER for the same
# reason.  Tell zypper to only consider the oneAPI repo here using the
# discouraged --repo flag, however this prevents an update of the entire
# upstream package list which would be immediately discarded, then reloaded
# below in the general update section.  Only install the compilers at
# ~900Mb rather than the entire stack at ~3Gb download.
ARG COMPILER=gcc
RUN [ "$COMPILER" != "icc" ] || \
    { zypper --non-interactive addrepo https://yum.repos.intel.com/oneapi oneAPI && \
      zypper --non-interactive --gpg-auto-import-keys update --repo oneAPI && \
      zypper --non-interactive install --repo oneAPI --name intel-oneapi-compiler-dpcpp-cpp && \
      zypper clean --all; }

# force an upgrade to get any newly built RPMs
ARG CACHEBUST
RUN [ -z "$CACHEBUST" ] || \
    { zypper --non-interactive --gpg-auto-import-keys --no-gpg-checks ref && \
    zypper --non-interactive update && \
    zypper clean --all; }
USER daos_server:daos_server

# Set a label.  This is useful for searching for DAOS images, but is also used
# in github-actions to prune elements of the dockerfile below this point.
LABEL DAOS=true

WORKDIR /home/daos/daos/
COPY VERSION LICENSE ftest.sh SConstruct .clang-format ./
COPY site_scons site_scons
COPY utils utils
COPY src src
USER root:root
RUN chown -R daos_server.daos_server /home/daos/daos/
USER daos_server:daos_server

# select compiler to use
ARG JOBS=$DEPS_JOBS
ARG DAOS_BUILD_TYPE=$DAOS_TARGET_TYPE
ARG DAOS_BUILD=$DAOS_DEPS_BUILD

# Build DAOS
RUN [ "$DAOS_BUILD" != "yes" ] || \
    { scons --jobs $JOBS install PREFIX=/opt/daos COMPILER=$COMPILER \
      BUILD_TYPE=$DAOS_BUILD_TYPE TARGET_TYPE=$DAOS_TARGET_TYPE && \
    /bin/rm -rf build && go clean -cache && \
    cp -r utils/config/examples /opt/daos; }

# Set environment variables
ENV PATH=/opt/daos/bin:$PATH
ENV FI_SOCKETS_MAX_CONN_RETRY=1

# Build java and hadoop bindings
WORKDIR /home/daos/daos/src/client/java

ARG DAOS_JAVA_BUILD=$DAOS_BUILD

RUN [ "$DAOS_JAVA_BUILD" != "yes" ] || \
    { mkdir /home/daos/.m2 && \
    cp /home/daos/daos/utils/scripts/maven-settings.xml.in /home/daos/.m2/settings.xml && \
    mvn clean install -ntp -T 1C -DskipITs -Dgpg.skip -Ddaos.install.path=/opt/daos; }
WORKDIR /home/daos

ARG DAOS_KEEP_SRC=no
# Remove local copy
RUN [ "$DAOS_KEEP_SRC" != "no" ] || rm -rf /home/daos/*
