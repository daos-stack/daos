# Copyright (C) 2018-2020 Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted for any purpose (including commercial purposes)
# provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions, and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions, and the following disclaimer in the
#    documentation and/or materials provided with the distribution.
#
# 3. In addition, redistributions of modified forms of the source or binary
#    code must carry prominent notices stating that the original code was
#    changed and the date of the change.
#
#  4. All publications or advertising materials mentioning features or use of
#     this software are asked, but not required, to acknowledge that it was
#     developed by Intel Corporation and credit the contributors.
#
# 5. Neither the name of Intel Corporation, nor the name of any Contributor
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# 'recipe' for Docker to build an image of centOS-based
# environment for building the DAOS project.
#

# Pull base image
FROM opensuse/leap:15.2
LABEL maintainer="daos@daos.groups.io"

# Build arguments can be set via --build-arg
# use same UID as host and default value of 1000 if not specified
ARG UID=1000

# Use our own repo cache
ARG REPO_URL=""
ARG REPO_GROUP_LEAP15=""
RUN if [ -n "${REPO_GROUP_LEAP15}" ]; then                             \
        rm -f /etc/zypp/repos.d/*.repo;                                \
        zypper --non-interactive ar                                    \
                ${REPO_URL}${REPO_GROUP_LEAP15} daos-stack-group-repo; \
        zypper --non-interactive mr --gpgcheck-allow-unsigned-repo     \
               daos-stack-group-repo;                                  \
    fi

# Make sure repos are up to date
RUN zypper --non-interactive --no-gpg-checks --gpg-auto-import-keys refresh

# Allow packages to change vendors
RUN echo "solver.allowVendorChange = true" >> /etc/zypp/zypp.conf

# Update distribution
# It's better to put the zypper update in the same "cache layer" as the
# zypper install command so that the database is updated if/when the
# installed packages list below is updated
RUN zypper --non-interactive update;                                         \
    zypper --non-interactive install                                         \
           boost-devel clang cmake cunit-devel curl doxygen flex             \
           gcc gcc-c++ git graphviz gzip                                     \
           libaio-devel libcmocka-devel libevent-devel libiscsi-devel        \
           libltdl7 libnuma-devel libopenssl-devel libtool                   \
           libuuid-devel libyaml-devel                                       \
           make man meson nasm ninja pandoc patch python2-pip                \
           readline-devel sg3_utils which yasm                               \
           python-devel python3-devel valgrind-devel hwloc-devel             \
           openmpi3-devel man fuse3-devel patchelf scons lua-lmod            \
           libjson-c-devel liblz4-devel python3-distro curl maven
# Monkey-patch MODULEPATH
RUN if ! grep MODULEPATH=.*/usr/share/modules /etc/profile.d/lmod.sh; then        \
        sed -e '/MODULEPATH=/s/$/:\/usr\/share\/modules/' /etc/profile.d/lmod.sh; \
    fi
RUN update-ca-certificates
RUN zypper --non-interactive install --allow-unsigned-rpm lua-lmod

RUN if [ -z "${REPO_GROUP_LEAP15}" ]; then                                                                                        \
        zypper --non-interactive addrepo                                                                                          \
        https://download.opensuse.org/repositories/devel:languages:go/openSUSE_Leap_15.1/devel:languages:go.repo;                 \
        zypper --non-interactive --gpg-auto-import-keys refresh;                                                                  \
    else                                                                                                                          \
         # Need the GPG key for the GO language repo (part of the group repo above)                                               \
         rpm --import "${REPO_URL}${REPO_GROUP_LEAP15%/*}/opensuse-15.2-devel-languages-go-x86_64-proxy/repodata/repomd.xml.key"; \
    fi
# We actually only need go 1.12 or higher, but SUSE's 1.12 package is actually 1.11
# https://bugzilla.opensuse.org/show_bug.cgi?id=1178985
RUN zypper --non-interactive install -y ipmctl-devel go1.14 go1.14-race

# Add DAOS user
ENV USER daos
ENV PASSWD daos
RUN useradd -u $UID -ms /bin/bash $USER
RUN echo "$USER:$PASSWD" | chpasswd

# set maven mirror
RUN mkdir -p /home/$USER/.m2

RUN echo -e "<settings>\n\
	<mirrors>\n\
		<mirror>\n\
			<id>google-maven-central</id>\n\
			<name>GCS Maven Central mirror</name>\n\
			<url>https://maven-central.storage-download.googleapis.com/maven2/</url>\n\
			<mirrorOf>central</mirrorOf>\n\
		</mirror>\n\
	</mirrors>\n\
</settings>" > /home/$USER/.m2/settings.xml

# Create directory for DAOS backend storage
RUN mkdir -p /opt/daos
RUN chown -R daos.daos /opt/daos || { cat /etc/passwd; cat /etc/group; cat /etc/shadow; chown -R daos /opt/daos; chgrp -R daos /opt/daos; ls -ld /opt/daos; }
RUN mkdir /mnt/daos
RUN chown daos.daos /mnt/daos || { cat /etc/passwd; cat /etc/group; cat /etc/shadow; chown daos /mnt/daos; chgrp daos /mnt/daos; ls -ld /mnt/daos; }
RUN mkdir /var/run/daos_server
RUN chown daos.daos /var/run/daos_server || { cat /etc/passwd; cat /etc/group; cat /etc/shadow; chown daos /var/run/daos_server; chgrp daos /var/run/daos_server; ls -ld /var/run/daos_server; }
RUN mkdir /var/run/daos_agent
RUN chown daos.daos /var/run/daos_agent || { cat /etc/passwd; cat /etc/group; cat /etc/shadow; chown daos /var/run/daos_agent; chgrp daos /var/run/daos_agent; ls -ld /var/run/daos_agent; }

ARG JENKINS_URL=""
ARG QUICKBUILD=false
ARG QUICKBUILD_DEPS=""
ARG REPOS=""
ARG REPO_LOCAL_LEAP15=""
RUN if $QUICKBUILD; then                                                                                         \
        for REPO_LEAP15 in $REPO_LOCAL_LEAP15; do                                                                \
            MY_REPO="${REPO_URL}${REPO_LEAP15}";                                                                 \
            MY_NAME="${MY_REPO#*//}";                                                                            \
            MY_NAME="${MY_NAME//\//_}";                                                                          \
            zypper --non-interactive addrepo --no-gpgcheck                                                       \
                   ${MY_REPO} ${MY_NAME};                                                                        \
        done;                                                                                                    \
        for repo in $REPOS; do                                                                                   \
            branch="master";                                                                                     \
            build_number="lastSuccessfulBuild";                                                                  \
            if [[ $repo = *@* ]]; then                                                                           \
                branch="${repo#*@}";                                                                             \
                repo="${repo%@*}";                                                                               \
                if [[ $branch = *:* ]]; then                                                                     \
                    build_number="${branch#*:}";                                                                 \
                    branch="${branch%:*}";                                                                       \
                fi;                                                                                              \
            fi;                                                                                                  \
            zypper --non-interactive addrepo --no-gpgcheck                                                       \
                   ${JENKINS_URL}job/daos-stack/job/$repo/job/$branch/$build_number/artifact/artifacts/leap15/   \
                   $repo:$branch:$build_number;                                                                  \
        done;                                                                                                    \
        echo "Installing: $QUICKBUILD_DEPS";                                                                     \
        echo "$QUICKBUILD_DEPS" | tr '\n' '\0' | xargs -0 zypper --non-interactive install;                      \
    fi

# force an upgrade to get any newly built RPMs
RUN zypper addlock fuse fuse-libs fuse-devel libraft0 raft-devel mercury mercury-devel
ARG CACHEBUST=1
RUN zypper --non-interactive update

# set NOBUILD to disable build
ARG NOBUILD

# copy DAOS tree
WORKDIR /home/daos
COPY ./ .

# Build DAOS & dependencies
RUN if [ "x$NOBUILD" = "x" ] ; then \
    scons --build-deps=yes -j 4 install PREFIX=/opt/daos; fi

# Set environment variables
ENV LD_LIBRARY_PATH=/opt/daos/lib:/opt/daos/lib64:$LD_LIBRARY_PATH
ENV PATH=/opt/daos/bin:$PATH
ENV FI_SOCKETS_MAX_CONN_RETRY=1

# Copy example config files to /opt/daos
RUN if [ "x$NOBUILD" = "x" ] ; then \
    cp -r utils/config/examples /opt/daos; fi

# Build java HDFS bindings
# Currently disabled since it is failing
RUN if [ "x$NOBUILD" = "x" ] ; then \
    pushd src/client/java && \
#    mvn clean install -T 1C -DskipITs -Ddaos.install.path=/opt/daos && \
    popd; fi

# Remove local copy
RUN rm -rf /home/daos/*
