# Copyright 2018-2022 Intel Corporation
# All rights reserved.
#
# 'recipe' for Docker to build an image of Leap based
# environment for building the DAOS project.
#

# Pull base image
FROM opensuse/leap:15.4
LABEL maintainer="daos@daos.groups.io"

# Intermittent cache-bust.  Used to reduce load on the actual CACHEBUST later.
ARG CB0

# Use local repo server if present
ARG REPO_FILE_URL
RUN set -e;                                                      \
    if [ -n "$REPO_FILE_URL" ]; then                             \
        zypper --non-interactive install curl;                   \
        mkdir -p /etc/dnf/repos.d &&                             \
        cd /etc/dnf/repos.d/ &&                                  \
        curl -k -f -o daos_ci-leap15-artifactory.repo.tmp        \
             "$REPO_FILE_URL"daos_ci-leap15-artifactory.repo &&  \
        for file in *.repo; do                                   \
            true > $file;                                        \
        done;                                                    \
        mv daos_ci-leap15-artifactory.repo{.tmp,};               \
    fi;                                                          \
    zypper --non-interactive install dnf dnf-plugins-core &&     \
    cd /etc/zypp/repos.d/ &&                                     \
    for file in *.repo; do                                       \
        sed -e '/type=NONE/d' < $file > /etc/dnf/repos.d/$file;  \
    done;                                                        \
    zypper --non-interactive clean --all
ARG JENKINS_URL
ARG REPOS
RUN for repo in $REPOS; do                                                                                 \
        branch="master";                                                                                   \
        build_number="lastSuccessfulBuild";                                                                \
        if [[ $repo = *@* ]]; then                                                                         \
            branch="${repo#*@}";                                                                           \
            repo="${repo%@*}";                                                                             \
            if [[ $branch = *:* ]]; then                                                                   \
                build_number="${branch#*:}";                                                               \
                branch="${branch%:*}";                                                                     \
            fi;                                                                                            \
        fi;                                                                                                \
        echo -e "[$repo:$branch:$build_number]\n\
name=$repo:$branch:$build_number\n\
baseurl=${JENKINS_URL}job/daos-stack/job/$repo/job/$branch/$build_number/artifact/artifacts/leap15/\n\
enabled=1\n\
gpgcheck=False\n" >> /etc/dnf/repos.d/$repo:$branch:$build_number.repo;   \
        cat /etc/dnf/repos.d/$repo:$branch:$build_number.repo; \
        dnf -y repolist; \
        dnf --disablerepo=\* --enablerepo=$repo:$branch:$build_number makecache; \
    done

# Install OS updates and package.  Include basic tools and daos dependencies
COPY ./utils/scripts/install-leap15.sh /tmp/install.sh
RUN chmod +x /tmp/install.sh && dnf -y upgrade && /tmp/install.sh && dnf -y clean all && \
    rm -f /tmp/install.sh
RUN if ! grep MODULEPATH=.*/usr/share/modules /etc/profile.d/lmod.sh; then \
        sed -e '/MODULEPATH=/s/$/:\/usr\/share\/modules/'                  \
               /etc/profile.d/lmod.sh;                                     \
    fi

RUN update-ca-certificates

ARG UID=1000

# Add DAOS users
RUN useradd --no-log-init --uid $UID --user-group --create-home --shell /bin/bash \
            --home /home/daos daos_server
RUN echo "daos_server:daos_server" | chpasswd
RUN useradd --no-log-init --user-group --create-home --shell /bin/bash daos_agent
RUN echo "daos_agent:daos_agent" | chpasswd
RUN echo "daos_server ALL=(root) NOPASSWD: ALL" >> /etc/sudoers.d/daos_sudo_setup

# Create directory for DAOS backend storage
RUN mkdir -p /opt/daos /mnt/daos /var/run/daos_server /var/run/daos_agent /home/daos/pre /home/daos/daos &&   \
    chown -R daos_server.daos_server /opt/daos /mnt/daos /var/run/daos_server /home/daos &&  \
    chown daos_agent.daos_agent /var/run/daos_agent

ENV PATH=/home/daos/.local/bin:$PATH

ARG QUICKBUILD=false
ARG QUICKBUILD_DEPS

RUN if $QUICKBUILD; then                                          \
        echo "Installing: $QUICKBUILD_DEPS";                      \
        echo "$QUICKBUILD_DEPS" | sed -e '/^$/d' | tr '\n' '\0' | \
          xargs -0 dnf -y install;                                \
        dnf -y clean all;                                         \
    fi

USER daos_server:daos_server
WORKDIR /home/daos/pre
COPY --chown=daos_server:daos_server SConstruct .
COPY --chown=daos_server:daos_server site_scons site_scons
COPY --chown=daos_server:daos_server utils/build.config utils/

# Control what to build.  By default Dockerfiles build everything to allow for
# ease-of-use for users, however in CI everything is turned off and then
# selectively enabled.  Turning off any step disables all future steps.
ARG DAOS_DEPS_BUILD=yes
ARG DAOS_KEEP_BUILD=no
ARG DAOS_TARGET_TYPE=release

# Now do an update to ensure software is up to date for the deps build.  If the
# src hasn't changed then this won't do anything, but if it has then we want to
# ensure that latest dependencies are used.
USER root:root
RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || {                                                  \
        dnf -y upgrade                                                                    \
            --exclude=fuse,fuse-libs,fuse-devel,libraft0,raft-devel,mercury,mercury-devel \
        dnf -y clean all;                                                                 \
    }
USER daos_server:daos_server

ARG DEPS_JOBS=1

RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || {                            \
        scons --build-deps=yes --jobs $DEPS_JOBS PREFIX=/opt/daos   \
              TARGET_TYPE=$DAOS_TARGET_TYPE --deps-only &&          \
        ([ "$DAOS_KEEP_BUILD" != "no" ] || /bin/rm -rf build *.gz); \
    }
USER root:root

# select compiler to use
# Load the COMPILER arg early, and optionally install the Intel compiler
# Do this before the CACHEBUST to make best use of cache as this is a big
# download, and make it optional on the value of COMPILER for the same
# reason.  Tell zypper to only consider the oneAPI repo here using the
# discouraged --repo flag, however this prevents an update of the entire
# upstream package list which would be immediately discarded, then reloaded
# below in the general update section.  Only install the compilers at
# ~900Mb rather than the entire stack at ~3Gb download.
ARG COMPILER=gcc
RUN if [ "$COMPILER" = "icc" ]; then                                                                     \
        if [ -z "$REPO_FILE_URL" ] || true; then                                                         \
            rpm --import https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
            dnf -y config-manager --add-repo https://yum.repos.intel.com/oneapi oneAPI;                  \
        fi;                                                                                              \
        dnf -y install intel-oneapi-compiler-dpcpp-cpp &&                                                \
        dnf -y clean all;                                                                                \
    fi

# force an upgrade to get any newly built RPMs, but only if CACHEBUST is set.
ARG CACHEBUST
RUN [ -z "$CACHEBUST" ] || {                                                                            \
        dnf -y upgrade --exclude=fuse,fuse-libs,fuse-devel,libraft0,raft-devel,mercury,mercury-devel && \
        dnf -y clean all;                                                                               \
    }
USER daos_server:daos_server

# Set a label.  This is useful for searching for DAOS images, but is also used
# in github-actions to prune elements of the dockerfile below this point.
LABEL DAOS=true

WORKDIR /home/daos/daos/
COPY --chown=daos_server:daos_server VERSION LICENSE ftest.sh SConstruct .clang-format ./
COPY --chown=daos_server:daos_server site_scons site_scons
COPY --chown=daos_server:daos_server utils utils
COPY --chown=daos_server:daos_server src src

ARG JOBS=$DEPS_JOBS
ARG DAOS_BUILD_TYPE=$DAOS_TARGET_TYPE
ARG DAOS_BUILD=$DAOS_DEPS_BUILD

# Build DAOS
RUN [ "$DAOS_BUILD" != "yes" ] || {                                        \
        scons --jobs $JOBS install PREFIX=/opt/daos COMPILER=$COMPILER     \
              BUILD_TYPE=$DAOS_BUILD_TYPE TARGET_TYPE=$DAOS_TARGET_TYPE && \
        ([ "$DAOS_KEEP_BUILD" != "no" ] || /bin/rm -rf build) &&           \
        go clean -cache &&                                                 \
        cp -r utils/config/examples /opt/daos;                             \
    }

# Set environment variables
ENV PATH=/opt/daos/bin:$PATH
ENV FI_SOCKETS_MAX_CONN_RETRY=1

# Build java and hadoop bindings
WORKDIR /home/daos/daos/src/client/java

ARG DAOS_JAVA_BUILD=$DAOS_BUILD

RUN [ "$DAOS_JAVA_BUILD" != "yes" ] || {                                                      \
        mkdir /home/daos/.m2 &&                                                               \
        cp /home/daos/daos/utils/scripts/maven-settings.xml.in /home/daos/.m2/settings.xml && \
        mvn clean install -ntp -T 1C                                                          \
            -DskipITs -Dgpg.skip -Ddaos.install.path=/opt/daos;                               \
    }
WORKDIR /home/daos

ARG DAOS_KEEP_SRC=no
# Remove local copy
RUN [ "$DAOS_KEEP_SRC" != "no" ] || rm -rf /home/daos/*
