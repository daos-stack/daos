# Copyright (C) 2018-2020 Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted for any purpose (including commercial purposes)
# provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions, and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions, and the following disclaimer in the
#    documentation and/or materials provided with the distribution.
#
# 3. In addition, redistributions of modified forms of the source or binary
#    code must carry prominent notices stating that the original code was
#    changed and the date of the change.
#
#  4. All publications or advertising materials mentioning features or use of
#     this software are asked, but not required, to acknowledge that it was
#     developed by Intel Corporation and credit the contributors.
#
# 5. Neither the name of Intel Corporation, nor the name of any Contributor
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# 'recipe' for Docker to build an image of centOS-based
# environment for building the DAOS project.
#

# Pull base image
FROM centos:7.8.2003
MAINTAINER <daos@daos.groups.io>

# Build arguments can be set via --build-arg
# use same UID as host and default value of 1000 if not specified
ARG UID=1000

# for good measure, clean the metadata
RUN yum clean metadata

# Install basic tools
RUN yum -y install epel-release; \
    yum -y install \
        boost-devel clang-analyzer cmake CUnit-devel doxygen file flex \
        gcc gcc-c++ git golang graphviz lcov                           \
        libaio-devel libcmocka-devel libevent-devel libiscsi-devel     \
        libtool libtool-ltdl-devel libuuid-devel libyaml-devel         \
        make meson nasm ninja-build numactl-devel openssl-devel        \
        pandoc patch python python-devel python36-devel python-magic   \
        python-pep8 python-pygit2 python2-pygithub python-requests     \
        readline-devel scons sg3_utils ShellCheck yasm pciutils        \
        valgrind-devel python36-pylint man java-1.8.0-openjdk maven    \
        json-c-devel python36-requests lz4-devel

# DAOS specific
RUN yum -y install \
           python2-avocado python2-avocado-plugins-output-html \
           python2-avocado-plugins-varianter-yaml-to-mux       \
           python-pathlib                                      \
           ndctl ipmctl e2fsprogs                              \
           python2-clustershell python2-Cython                 \
           python36-clustershell python36-paramiko             \
           python36-numpy python36-jira python3-pip Lmod       \
           fuse3-devel libipmctl-devel                         \
           hwloc-devel patchelf python36-tabulate              \
           java-1.8.0-openjdk python-distro python36-distro
RUN yum -y install openmpi3-devel

# DAOS python 3 packages required for pylint
#  - excluding mpi4py as it depends on CORCI-635
RUN pip3 install avocado-framework; \
    pip3 install avocado-framework-plugin-result-html; \
    pip3 install avocado-framework-plugin-varianter-yaml-to-mux

RUN pip3 install codespell
RUN pip3 install pygithub

# Add DAOS user
ENV USER daos
ENV PASSWD daos
RUN useradd -u $UID -ms /bin/bash $USER
RUN echo "$USER:$PASSWD" | chpasswd

# Create directory for DAOS backend storage
RUN mkdir /mnt/daos
RUN chown daos.daos /mnt/daos

# Set maven repo mirror
RUN mkdir -p /root/.m2
RUN echo -e "<settings>\n\
        <mirrors>\n\
                <mirror>\n\
                        <id>google-maven-central</id>\n\
                        <name>GCS Maven Central mirror</name>\n\
                        <url>https://maven-central.storage-download.googleapis.com/maven2/</url>\n\
                        <mirrorOf>central</mirrorOf>\n\
                </mirror>\n\
        </mirrors>\n\
</settings>" > /root/.m2/settings.xml

# Dependencies
# Packages for NVML exist in CentOS, but are
# unfortunately outdated. The DAOS build system will rebuild those packages.
ARG JENKINS_URL=""
ARG QUICKBUILD=false
ARG QUICKBUILD_DEPS=""
ARG REPOS=""
ARG REPO_URL=""
ARG REPO_EL7=""
# Need to clean this up later
RUN if [ -n "$REPO_URL" ]; then                                               \
      cversion=$(cut -d ' ' -f4 /etc/centos-release);                         \
      version=${cversion%.*} ;                                                \
      MY_REPO="${REPO_URL}repository/centos-${version}-x86_64-group/";        \
      MY_NAME="${MY_REPO#*//}";                                               \
      MY_NAME="${MY_NAME//\//_}";                                             \
      echo -e "[${MY_NAME}]\n\
name=created from ${MY_REPO}\n\
baseurl=${MY_REPO}\n\
enabled=1\n\
gpgcheck=False\n" >> /etc/yum.repos.d/local-centos-group.repo;                \
      yum --assumeyes install yum-utils;                                      \
      yum-config-manager --assumeyes --quiet                                  \
                         --disable base epel extra updates;                   \
    fi
RUN if $QUICKBUILD; then                                                      \
        MY_REPO="${REPO_URL}${REPO_EL7}";                                     \
        MY_NAME="${MY_REPO#*//}";                                             \
        MY_NAME="${MY_NAME//\//_}";                                           \
        echo -e "[${MY_NAME}]\n\
name=created from ${MY_REPO}\n\
baseurl=${MY_REPO}\n\
enabled=1\n\
gpgcheck=False\n" >> /etc/yum.repos.d/$repo:$branch:$build_number.repo;       \
        for repo in $REPOS; do                                                \
            branch="master";                                                  \
            build_number="lastSuccessfulBuild";                               \
            if [[ $repo = *@* ]]; then                                        \
                branch="${repo#*@}";                                          \
                repo="${repo%@*}";                                            \
                if [[ $branch = *:* ]]; then                                  \
                    build_number="${branch#*:}";                              \
                    branch="${branch%:*}";                                    \
                fi;                                                           \
            fi;                                                               \
            echo -e "[$repo:$branch:$build_number]\n\
name=$repo:$branch:$build_number\n\
baseurl=${JENKINS_URL}job/daos-stack/job/$repo/job/$branch/$build_number/artifact/artifacts/centos7/\n\
enabled=1\n\
gpgcheck=False\n" >> /etc/yum.repos.d/$repo:$branch:$build_number.repo;       \
        done;                                                                 \
        echo "Installing: $QUICKBUILD_DEPS";                                  \
        echo "$QUICKBUILD_DEPS" | tr '\n' '\0' | xargs -0 yum -y install;     \
    fi

ARG BULLSEYE=""
RUN if [ "x$BULLSEYE" != "x" ]; then \
      curl ${JENKINS_URL}job/daos-stack/job/tools/job/master/lastSuccessfulBuild/artifact/bullseyecoverage-linux.tar \
        --retry 10 --retry-max-time 60 --silent --show-error -o bullseye.tar; \
      mkdir -p bullseye; \
      tar -C bullseye --strip-components=1 -xf bullseye.tar; \
      pushd bullseye; \
        ./install --quiet --key "${BULLSEYE}" --prefix /opt/BullseyeCoverage; \
      popd; \
      rm -f bullseye.tar; \
      rm -rf bullseye; \
    fi


# force an upgrade to get any newly built RPMs
ARG CACHEBUST=1
RUN yum -y upgrade --exclude=spdk,spdk-devel,dpdk-devel,dpdk,mercury-devel,mercury

# Switch to new user
#USER $USER
WORKDIR /home/$USER

# set NOBUILD to disable git clone & build
ARG NOBUILD

# Fetch DAOS code
RUN if [ "x$NOBUILD" = "x" ] ; then git clone https://github.com/daos-stack/daos.git; fi
WORKDIR /home/$USER/daos

# Build DAOS & dependencies
RUN if [ "x$NOBUILD" = "x" ] ; then git submodule init && git submodule update; fi
RUN if [ "x$NOBUILD" = "x" ] ; then scons --build-deps=yes install PREFIX=/usr; fi

# Set environment variables
ENV LD_LIBRARY_PATH=/usr/lib:$LD_LIBRARY_PATH
ENV CRT_PHY_ADDR_STR="ofi+sockets"
ENV OFI_INTERFACE=eth0
ENV FI_SOCKETS_MAX_CONN_RETRY=1
