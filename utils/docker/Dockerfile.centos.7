# Copyright (C) 2018-2021 Intel Corporation
# All rights reserved.
#
# 'recipe' for Docker to build an image of centOS-based
# environment for building the DAOS project.
#

# Pull base image
FROM centos:centos7
LABEL maintainer="daos@daos.groups.io"

# Intermittent cache-bust.  Used to reduce load on the actual CACHEBUST later.
ARG CB0

# Need to be able to use a local repository for packages
ARG REPO_URL=""
ARG REPO_DISTRO=""
ARG REPO_DAOS=""

# Install EPEL and switch to dnf as it seems a bit faster.
# Make sure that all the repo keys are installed.
# A dnf update is needed here to pick up the current EPEL key
RUN yum clean all &&                                               \
    yum -y install dnf dnf-plugins-core epel-release yum-utils &&  \
    dnf -y makecache &&                                            \
    dnf -y update &&                                               \
    dnf clean all

# If a local DAOS repository is supplied, then we should use it
# This is mainly for quickbuilds
RUN if [ -n "$REPO_DAOS" ]; then                                \
      MY_REPO="${REPO_URL}${REPO_DAOS}/";                       \
      MY_NAME="${MY_REPO#*//}";                                 \
      MY_NAME="${MY_NAME//\//_}";                               \
      echo -e "[${MY_NAME}]\n\
name=created from ${MY_REPO}\n\
baseurl=${MY_REPO}\n\
enabled=1\n\
repo_gpgcheck=0\n\
exclude=fuse-3* fuse-devel-3* fuse-libs-3* fuse-debuginfo-3* ompi*\n\
gpgcheck=0\n" >> /etc/yum.repos.d/local-daos-group.repo;        \
      dnf clean all;                                            \
      dnf config-manager --assumeyes --quiet                    \
                         --disable base epel extra updates;     \
    fi

# If a local distro repository is supplied, then we should use it
# and disable using the distro repositories.
RUN if [ -n "$REPO_DISTRO" ]; then                              \
      MY_REPO="${REPO_URL}${REPO_DISTRO}/";                     \
      MY_NAME="${MY_REPO#*//}";                                 \
      MY_NAME="${MY_NAME//\//_}";                               \
      echo -e "[${MY_NAME}]\n\
name=created from ${MY_REPO}\n\
baseurl=${MY_REPO}\n\
enabled=1\n\
repo_gpgcheck=0\n\
gpgcheck=1\n" >> /etc/yum.repos.d/local-centos-group.repo;      \
      dnf clean all;                                            \
      dnf config-manager --assumeyes --quiet                    \
                         --disable base epel extra updates;     \
      sed "s/^mirrorlist_expire=0*/mirrorlist_expire=99999999/" \
          -i /etc/yum.conf;                                     \
    fi

# Install OS updates and package.  Include basic tools and daos dependencies
# that come from the core repo.
# Clean up any repos afterwards to save space.
# Switch to dnf as it seems a bit faster.
# libatomic should be in this list, but can not for now due to CI
# post provisioning issue.
# *** Keep these in as much alphbetical order as possible ***
RUN dnf clean all && dnf -y upgrade && \
    dnf -y install \
        boost-python36-devel \
        clang-analyzer \
        cmake \
        CUnit-devel \
        doxygen \
        e2fsprogs \
        file \
        flex \
        fuse3-devel \
        gcc \
        gcc-c++ \
        git \
        golang \
        graphviz \
        hwloc-devel \
        ipmctl \
        java-1.8.0-openjdk \
        json-c-devel \
        lcov \
        libaio-devel \
        libcmocka-devel \
        libevent-devel \
        libipmctl-devel \
        libiscsi-devel \
        libtool \
        libtool-ltdl-devel \
        libunwind-devel \
        libuuid-devel \
        libyaml-devel \
        Lmod \
        lz4-devel \
        make \
        man \
        maven \
        nasm \
        ndctl \
        numactl-devel \
        openssl-devel \
        pandoc \
        patch \
        patchelf \
        pciutils \
        python3-pip \
        python36-Cython \
        python36-devel \
        python36-distro \
        python36-numpy \
        python36-paramiko \
        python36-pylint \
        python36-requests \
        python36-requests \
        python36-tabulate \
        python36-pyxattr \
        python36-scons \
        sg3_utils \
        valgrind-devel \
        yasm && \
    dnf clean all

# Install this individually because of potential conflicts
RUN dnf clean all && dnf -y install openmpi3-devel && dnf clean all

ARG UID=1000

# Add DAOS users
RUN useradd --uid $UID --user-group --create-home --shell /bin/bash \
            --home /home/daos daos_server
RUN echo "daos_server:daos_server" | chpasswd
RUN useradd --user-group --create-home --shell /bin/bash daos_agent
RUN echo "daos_agent:daos_agent" | chpasswd

# Removing PyYAML 3.10 to allow pip install to upgrade
RUN dnf -y remove python36-PyYAML

RUN python3 -m pip install --upgrade pip

RUN python3 -m pip --no-cache-dir install \
    "avocado-framework<70.0" \
    "avocado-framework-plugin-result-html<70.0" \
    "avocado-framework-plugin-varianter-yaml-to-mux<70.0" \
    clustershell \
    pep8 \
    pygit2 \
    python-magic

# Add codespell to path.
ENV PATH=$PATH:/home/daos/.local/bin


# Create directory for DAOS backend storage
RUN mkdir -p /opt/daos /mnt/daos /var/run/daos_server /var/run/daos_agent &&   \
    chown daos_server.daos_server /opt/daos /mnt/daos /var/run/daos_server &&  \
    chown daos_agent.daos_agent /var/run/daos_agent

# Dependencies
# Packages for NVML exist in CentOS, but are
# unfortunately outdated. The DAOS build system will rebuild those packages.
# Currently this still must use yum as the QUICKBUILD_DEPS may have a
# trailing newline that causes DNF to fail.
ARG JENKINS_URL=""
ARG QUICKBUILD=false
ARG QUICKBUILD_DEPS=""
ARG REPOS=""
RUN if $QUICKBUILD; then                                                      \
        for repo in $REPOS; do                                                \
            branch="master";                                                  \
            build_number="lastSuccessfulBuild";                               \
            if [[ $repo = *@* ]]; then                                        \
                branch="${repo#*@}";                                          \
                repo="${repo%@*}";                                            \
                if [[ $branch = *:* ]]; then                                  \
                    build_number="${branch#*:}";                              \
                    branch="${branch%:*}";                                    \
                fi;                                                           \
            fi;                                                               \
            echo -e "[$repo:$branch:$build_number]\n\
name=$repo:$branch:$build_number\n\
baseurl=${JENKINS_URL}job/daos-stack/job/$repo/job/$branch/$build_number/artifact/artifacts/centos7/\n\
enabled=1\n\
gpgcheck=False\n" >> /etc/yum.repos.d/$repo:$branch:$build_number.repo;       \
        done;                                                                 \
        echo "Installing: $QUICKBUILD_DEPS";                                  \
        dnf clean all;                                                        \
        echo "$QUICKBUILD_DEPS" | sed -e '/^$/d' | tr '\n' '\0' |             \
          xargs -0 dnf -y install;                                            \
        dnf clean all;                                                        \
    fi

ARG BULLSEYE=""
RUN if [ "x$BULLSEYE" != "x" ]; then \
      curl ${JENKINS_URL}job/daos-stack/job/tools/job/master/lastSuccessfulBuild/artifact/bullseyecoverage-linux.tar \
        --retry 10 --retry-max-time 60 --silent --show-error -o bullseye.tar; \
      mkdir -p bullseye; \
      tar -C bullseye --strip-components=1 -xf bullseye.tar; \
      pushd bullseye; \
        ./install --quiet --key "${BULLSEYE}" --prefix /opt/BullseyeCoverage; \
      popd; \
      rm -f bullseye.tar; \
      rm -rf bullseye; \
    fi

# The COPY command has a --chown option but it's not well supported so copy as
# root then run a chown command which is frustrating as the copy can take a few
# seconds.
WORKDIR /home/daos/pre
COPY SConstruct .
COPY utils/sl utils/sl
COPY utils/build.config utils/
RUN chown -R daos_server.daos_server /home/daos
USER daos_server:daos_server
RUN ln -s utils/sl site_scons

# Control what to build.  By default Dockerfiles build everything to allow for
# ease-of-use for users, however in CI everything is turned off and then
# selectively enabled.  Turning off any step disables all future steps.
ARG DAOS_DEPS_BUILD=yes

# Now do an update to ensure software is up to date for the deps build.  If the
# src hasn't changed then this won't do anything, but if it has then we want to
# ensure that latest dependencies are used.
USER root:root
RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || \
    { dnf clean all && \
      dnf -y --nogpgcheck upgrade \
          --exclude=spdk,spdk-devel,dpdk-devel,dpdk,mercury-devel,mercury && \
      dnf clean all; }
USER daos_server:daos_server

ARG DEPS_JOBS=1

RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || \
    { scons-3 --build-deps=yes --jobs $DEPS_JOBS PREFIX=/opt/daos --deps-only && \
    /bin/rm -rf build *.gz; }

USER root:root
# force an upgrade to get any newly built RPMs
ARG CACHEBUST
RUN dnf clean all && \
    dnf -y --nogpgcheck upgrade \
        --exclude=spdk,spdk-devel,dpdk-devel,dpdk,mercury-devel,mercury && \
    dnf clean all
USER daos_server:daos_server

WORKDIR /home/daos/daos/
COPY VERSION LICENSE ftest.sh SConstruct ./
COPY utils utils
COPY src src
USER root:root
RUN chown -R daos_server.daos_server /home/daos
USER daos_server:daos_server
RUN ln -s utils/sl site_scons

# select compiler to use
ARG COMPILER=gcc
ARG JOBS=$DEPS_JOBS
ARG DAOS_BUILD=$DAOS_DEPS_BUILD

# Build DAOS
RUN [ "$DAOS_BUILD" != "yes" ] || \
    { scons-3 --jobs $JOBS install PREFIX=/opt/daos COMPILER=$COMPILER && \
    /bin/rm -rf build && \
    cp -r utils/config/examples /opt/daos; }

# Set environment variables
ENV LD_LIBRARY_PATH=/opt/daos/lib:/opt/daos/lib64:$LD_LIBRARY_PATH
ENV PATH=/opt/daos/bin:$PATH
ENV FI_SOCKETS_MAX_CONN_RETRY=1

# Build java and hadoop bindings
WORKDIR /home/daos/daos/src/client/java
# Set maven repo mirror
RUN mkdir -p /home/daos/.m2
RUN echo -e "<settings>\n\
        <mirrors>\n\
                <mirror>\n\
                        <id>google-maven-central</id>\n\
                        <name>GCS Maven Central mirror</name>\n\
                        <url>https://maven-central.storage-download.googleapis.com/maven2/</url>\n\
                        <mirrorOf>central</mirrorOf>\n\
                </mirror>\n\
        </mirrors>\n\
</settings>" > /home/daos/.m2/settings.xml

ARG DAOS_JAVA_BUILD=$DAOS_BUILD

RUN [ "$DAOS_JAVA_BUILD" != "yes" ] || \
    mvn clean install -T 1C -DskipITs -Dgpg.skip -Ddaos.install.path=/opt/daos
WORKDIR /home/daos

# Remove local copy
RUN rm -rf /home/daos/*
