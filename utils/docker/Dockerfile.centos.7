# Copyright (C) 2018-2021 Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted for any purpose (including commercial purposes)
# provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions, and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions, and the following disclaimer in the
#    documentation and/or materials provided with the distribution.
#
# 3. In addition, redistributions of modified forms of the source or binary
#    code must carry prominent notices stating that the original code was
#    changed and the date of the change.
#
#  4. All publications or advertising materials mentioning features or use of
#     this software are asked, but not required, to acknowledge that it was
#     developed by Intel Corporation and credit the contributors.
#
# 5. Neither the name of Intel Corporation, nor the name of any Contributor
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# 'recipe' for Docker to build an image of centOS-based
# environment for building the DAOS project.
#

# Pull base image
FROM centos:7.8.2003
LABEL maintainer="daos@daos.groups.io"

# Build arguments can be set via --build-arg
# use same UID as host and default value of 1000 if not specified
ARG UID=1000

# Install OS updates and package.  Include basic tools and daos dependencies
# that come from the core repo.
# Clean up any repos afterwards to save space.
RUN yum clean all &&							\
    yum -y install epel-release &&					\
    yum -y upgrade &&							\
    yum -y install							\
	boost-devel clang-analyzer cmake CUnit-devel doxygen file flex	\
	gcc gcc-c++ git golang graphviz lcov				\
	libaio-devel libcmocka-devel libevent-devel libiscsi-devel	\
	libtool libtool-ltdl-devel libuuid-devel libyaml-devel		\
	make meson nasm ninja-build numactl-devel openssl-devel		\
	pandoc patch python-devel python36-devel python-magic		\
	python-pep8 python-pygit2 python2-pygithub python-requests	\
	readline-devel scons sg3_utils ShellCheck yasm pciutils		\
	valgrind-devel python36-pylint man java-1.8.0-openjdk maven	\
	json-c-devel python36-requests lz4-devel			\
	python2-avocado python2-avocado-plugins-output-html		\
	python2-avocado-plugins-varianter-yaml-to-mux			\
	python-pathlib							\
	ndctl ipmctl e2fsprogs						\
	python2-clustershell python2-Cython				\
	python36-clustershell python36-paramiko				\
	python36-numpy python3-pip Lmod					\
	fuse3-devel libipmctl-devel python36-pyxattr			\
	hwloc-devel patchelf python36-tabulate				\
	java-1.8.0-openjdk python-distro python36-distro &&		\
    yum clean all

# Install this individually because of potential conflicts
RUN yum -y install openmpi3-devel && yum clean all

# DAOS python 3 packages required for pylint
#  - excluding mpi4py as it depends on CORCI-635
RUN pip3 install avocado-framework &&					\
    pip3 install avocado-framework-plugin-result-html &&		\
    pip3 install avocado-framework-plugin-varianter-yaml-to-mux &&	\
    pip3 install codespell &&						\
    pip3 install pygithub

# Add DAOS users
ENV USER daos
ENV PASSWD daos
RUN useradd --uid $UID --user-group --create-home --shell /bin/bash $USER
RUN echo "$USER:$PASSWD" | chpasswd

ENV USER daos_server
ENV PASSWD daos_server
RUN useradd --user-group --create-home --shell /bin/bash $USER
RUN echo "$USER:$PASSWD" | chpasswd

ENV USER daos_agent
ENV PASSWD daos_agent
RUN useradd --user-group --create-home --shell /bin/bash $USER
RUN echo "$USER:$PASSWD" | chpasswd

# Create directory for DAOS backend storage
RUN mkdir -p /opt/daos && chown -R daos_server.daos_server /opt/daos
RUN mkdir /mnt/daos && chown daos_server.daos_server /mnt/daos
RUN mkdir /var/run/daos_server && chown daos_server.daos_server /var/run/daos_server
RUN mkdir /var/run/daos_agent && chown daos_agent.daos_agent /var/run/daos_agent

# Set maven repo mirror
RUN mkdir -p /root/.m2
RUN echo -e "<settings>\n\
        <mirrors>\n\
                <mirror>\n\
                        <id>google-maven-central</id>\n\
                        <name>GCS Maven Central mirror</name>\n\
                        <url>https://maven-central.storage-download.googleapis.com/maven2/</url>\n\
                        <mirrorOf>central</mirrorOf>\n\
                </mirror>\n\
        </mirrors>\n\
</settings>" > /root/.m2/settings.xml

# Dependencies
# Packages for NVML exist in CentOS, but are
# unfortunately outdated. The DAOS build system will rebuild those packages.
ARG JENKINS_URL=""
ARG QUICKBUILD=false
ARG QUICKBUILD_DEPS=""
ARG REPOS=""
ARG REPO_URL=""
ARG REPO_EL7=""
# Need to clean this up later
RUN if [ -n "$REPO_URL" ]; then                                               \
      cversion=$(cut -d ' ' -f4 /etc/centos-release);                         \
      version=${cversion%.*} ;                                                \
      MY_REPO="${REPO_URL}repository/centos-${version}-x86_64-group/";        \
      MY_NAME="${MY_REPO#*//}";                                               \
      MY_NAME="${MY_NAME//\//_}";                                             \
      echo -e "[${MY_NAME}]\n\
name=created from ${MY_REPO}\n\
baseurl=${MY_REPO}\n\
enabled=1\n\
gpgcheck=False\n" >> /etc/yum.repos.d/local-centos-group.repo;                \
      yum --assumeyes install yum-utils;                                      \
      yum-config-manager --assumeyes --quiet                                  \
                         --disable base epel extra updates;                   \
    fi
RUN if $QUICKBUILD; then                                                      \
        MY_REPO="${REPO_URL}${REPO_EL7}";                                     \
        MY_NAME="${MY_REPO#*//}";                                             \
        MY_NAME="${MY_NAME//\//_}";                                           \
        echo -e "[${MY_NAME}]\n\
name=created from ${MY_REPO}\n\
baseurl=${MY_REPO}\n\
enabled=1\n\
gpgcheck=False\n" >> /etc/yum.repos.d/$repo:$branch:$build_number.repo;       \
        for repo in $REPOS; do                                                \
            branch="master";                                                  \
            build_number="lastSuccessfulBuild";                               \
            if [[ $repo = *@* ]]; then                                        \
                branch="${repo#*@}";                                          \
                repo="${repo%@*}";                                            \
                if [[ $branch = *:* ]]; then                                  \
                    build_number="${branch#*:}";                              \
                    branch="${branch%:*}";                                    \
                fi;                                                           \
            fi;                                                               \
            echo -e "[$repo:$branch:$build_number]\n\
name=$repo:$branch:$build_number\n\
baseurl=${JENKINS_URL}job/daos-stack/job/$repo/job/$branch/$build_number/artifact/artifacts/centos7/\n\
enabled=1\n\
gpgcheck=False\n" >> /etc/yum.repos.d/$repo:$branch:$build_number.repo;       \
        done;                                                                 \
        echo "Installing: $QUICKBUILD_DEPS";                                  \
        echo "$QUICKBUILD_DEPS" | tr '\n' '\0' | xargs -0 yum -y install;     \
    fi

ARG BULLSEYE=""
RUN if [ "x$BULLSEYE" != "x" ]; then \
      curl ${JENKINS_URL}job/daos-stack/job/tools/job/master/lastSuccessfulBuild/artifact/bullseyecoverage-linux.tar \
        --retry 10 --retry-max-time 60 --silent --show-error -o bullseye.tar; \
      mkdir -p bullseye; \
      tar -C bullseye --strip-components=1 -xf bullseye.tar; \
      pushd bullseye; \
        ./install --quiet --key "${BULLSEYE}" --prefix /opt/BullseyeCoverage; \
      popd; \
      rm -f bullseye.tar; \
      rm -rf bullseye; \
    fi

# force an upgrade to get any newly built RPMs
RUN yum -y upgrade --exclude=spdk,spdk-devel,dpdk-devel,dpdk,mercury-devel,mercury && \
	yum clean all

# Control what to build.  By default Dockerfiles build everything to allow for
# ease-of-use for users, however in CI everything is turned off and then
# selectively enabled.  Turning off any step disables all future steps.
ARG DAOS_DEPS_BUILD=yes
ARG DAOS_BUILD=$DAOS_DEPS_BUILD
ARG DAOS_JAVA_BUILD=$DAOS_BUILD
# Legacy, NOBUILD should be set to any string to disable all three.
ARG NOBUILD=no

# select compiler to use
ARG COMPILER=gcc

WORKDIR /home/daos/pre
COPY SConstruct .
COPY utils/sl utils/sl
COPY utils/build.config utils/
RUN ln -s utils/sl site_scons

RUN [ "$DAOS_DEPS_BUILD" != "yes" ] || \
    (scons --build-deps=yes install PREFIX=/opt/daos --deps-only && \
    /bin/rm -rf build *.gz)

# copy DAOS tree
WORKDIR /home/daos
COPY VERSION LICENSE ftest.sh SConstruct ./
COPY utils utils
COPY src src
RUN ln -s utils/sl site_scons

# Build DAOS
RUN [ "$DAOS_BUILD" != "yes" ] || \
    (scons -j 4 install PREFIX=/opt/daos COMPILER=$COMPILER && \
    /bin/rm -rf build && \
    cp -r utils/config/examples /opt/daos)

# Set environment variables
ENV LD_LIBRARY_PATH=/opt/daos/lib:/opt/daos/lib64:$LD_LIBRARY_PATH
ENV PATH=/opt/daos/bin:$PATH
ENV FI_SOCKETS_MAX_CONN_RETRY=1

# Build java and hadoop bindings
WORKDIR /home/daos/src/client/java
RUN [ "$DAOS_JAVA_BUILD" != "yes" ] || \
    mvn clean install -T 1C -DskipITs -Dgpg.skip -Ddaos.install.path=/opt/daos
WORKDIR /home/daos

# Remove local copy
RUN rm -rf /home/daos/*
