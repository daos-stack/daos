# Copyright (c) 2016-2019 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""Tests that we can build from prebuilt components"""

import sys
import os
sys.path.insert(0, "..")
from prereq_tools import PreReqComponent
from prereq_tools import GitRepoRetriever
from prereq_tools import WebRetriever
from prereq_tools import ProgramBinary

ENV = DefaultEnvironment()

OPTS = Variables('sl.conf')
PREREQS = PreReqComponent(ENV, OPTS)
PREREQS.load_definitions()

# Test ompi package
NEW_ENV = ENV.Clone()
PREREQS.require(NEW_ENV, "ompi")

# Not needed but to add test to this capability
MAKE_PROG = ProgramBinary('make', ['badprogame', 'anotherbadprogname', 'make'])

PREREQS.define("sl_project1",
               retriever="fake",
               commands=['$make install PREFIX=$SL_PROJECT1_PREFIX'],
               defines=["SL_PROJECT1_REQUIRED_DEFINE"],
               headers=['sl_project1.h'],
               required_progs=[MAKE_PROG])

PREREQS.define("sl_project2",
               retriever="fake",
               commands=['make clean',
                         'make install PREFIX=$SL_PROJECT2_PREFIX',
                         'make clean'],
               headers=['sl_project2.h'],
               libs=['sl_project2'])

PREREQS.define("sl_project3",
               retriever="fake",
               commands=['make clean',
                         'make install PREFIX=$SL_PROJECT3_PREFIX'
                         ' SL_PROJECT2=$SL_PROJECT2_PREFIX',
                         'make clean'],
               headers=['sl_project3.h'],
               libs=['sl_project3'],
               requires=['sl_project2'])

PREREQS.define("sl_project4",
               retriever="fake",
               commands=['make clean',
                         'make install PREFIX=$SL_PROJECT4_PREFIX'
                         ' SL_PROJECT2=$SL_PROJECT2_PREFIX'
                         ' SL_PROJECT1=$SL_PROJECT1_PREFIX',
                         'make clean'],
               headers=['sl_project4.h'],
               libs=['sl_project4'],
               requires=['sl_project2', 'sl_project1'])

PREREQS.define('openpa2',
               retriever=GitRepoRetriever( \
               'https://github.com/pmodels/openpa.git'),
               commands=['$LIBTOOLIZE', './autogen.sh',
                         './configure --prefix=$OPENPA2_PREFIX', 'make',
                         'make install'], libs=['opa'])
PREREQS.define("nonexist", libs=["nonexist"], headers=["nonexist.h"],
               package="nonexist-devel")
PREREQS.define("nonexist2", libs=["nonexist2"], headers=["stdio.h"],
               package="nonexist2-devel")
if PREREQS.check_component("nonexist") and not GetOption('clean'):
    raise Exception("check_component shouldn't pass for nonexist")
if not GetOption('clean') and PREREQS.check_component("nonexist2"):
    raise Exception("check_component shouldn't pass for nonexist")

VariantDir('build', '.', duplicate=0)
SConscript('build/sl_test/SConscript', exports=['ENV', 'PREREQS'])

Default('sl_test')

PREREQS.get_build_info().save("sl_test.info")

TEST_ENV = ENV.Clone()
TEST_ENV.Replace(CFLAGS=[], CCFLAGS=[], CXXFLAGS=[])
TEST_ENV.AppendIfSupported(CFLAGS=['-Wbad-flag', '-Wall'])
TEST_ENV.AppendIfSupported(CXXFLAGS=['-Wbad-flag-test2', '-Wall'])
TEST_ENV.AppendIfSupported(CCFLAGS=['-Wpedantic', '-Wbad-flag-test3',
                                    '-Wall'])
TEST_ENV.AppendIfSupported(LIBS=['foobar', 'fub'])

if '-Wbad-flag' in TEST_ENV.get('CFLAGS'):
    raise Exception("Bad flag added to CFLAGS")
if '-Wbad-flag-test2' in TEST_ENV.get('CXXFLAGS'):
    raise Exception("Bad flag added to CFLAGS")
if '-Wbad-flag-test3' in TEST_ENV.get('CCFLAGS'):
    raise Exception("Bad flag added to CCFLAGS")
if '-Wall' not in TEST_ENV.get('CFLAGS'):
    raise Exception("Expected -Wall in CFLAGS")
if '-Wall' not in TEST_ENV.get('CCFLAGS'):
    raise Exception("Expected -Wall in CCFLAGS")
if '-Wall' not in TEST_ENV.get('CXXFLAGS'):
    raise Exception("Expected -Wall in CXXFLAGS")
if '-Wpedantic' not in TEST_ENV.get('CCFLAGS'):
    raise Exception("Expected -Wpedantic in CCFLAGS")
# items passed to other construction variables just get appended
if 'foobar' not in TEST_ENV.get('LIBS'):
    raise Exception("Expected foobar in LIBS")
if 'fub' not in TEST_ENV.get('LIBS'):
    raise Exception("Expected fub in LIBS")


Help(OPTS.GenerateHelpText(ENV))
