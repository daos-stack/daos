# Copyright (c) 2017-2019 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""SConstruct to get components information"""

# pylint: disable=invalid-name
# pylint: disable=import-error
# pylint: disable=wrong-import-position

import sys
import os
sys.path.insert(0, os.path.realpath("."))
from SCons.Script import AddOption, GetOption
from prereq_tools import PreReqComponent

def get_req_comps(components, key):
    """Get all required components recursively"""

    req_comps = set(components[key].requires)
    for name in components[key].requires:
        if name in components and components[name].requires:
            req_comps |= get_req_comps(components, name)
    return req_comps


def scons():
    """Get requested prerequisite component info"""

    # pylint: disable=undefined-variable
    env = DefaultEnvironment()

    AddOption('--output-script',
              dest='output_script',
              default=os.path.join(Dir('#').abspath, 'component_info.sh'),
              help='Script file to contain build info. default: %default]')
    output_script = GetOption('output_script')

    opts = Variables()
    # pylint: enable=undefined-variable
    reqs = PreReqComponent(env, opts)
    reqs.load_definitions()

    components = reqs.get_defined()

    with open(output_script, 'w') as f:

        f.write("# Components Dependencies generated by SConstruct_info\n\n")

        for name, component in components.items():
            if component.requires:
                f.write('%s_requires="%s"\n' %
                        (component.name, ' '.join(component.requires)))
                req_comps = get_req_comps(components, name)
                if req_comps:
                    f.write('%s_requires_full="%s"\n' %
                            (component.name, ' '.join(req_comps)))
                f.write("#\n")

    # pylint: disable=undefined-variable
    try:
        Help(opts.GenerateHelpText(env), append=True)
    except TypeError:
        Help(opts.GenerateHelpText(env))
    # pylint: enable=undefined-variable

if __name__ == 'SCons.Script':
    scons()
