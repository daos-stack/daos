.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "fi_provider" "7" "2024\-03\-18" "Libfabric Programmer\[cq]s Manual" "#VERSION#"
.hy
.SH NAME
.PP
fi_provider - Fabric Interface Providers
.SH OVERVIEW
.PP
See \f[C]fi_arch\f[R](7) for a brief description of how providers fit
into the libfabric architecture.
.PP
Conceptually, a fabric provider implements and maps the libfabric API
over lower-level network software and/or hardware.
Most application calls into the libfabric API go directly into a
provider\[cq]s implementation of that API.
.PP
Libfabric providers are grouped into different type: core, utility,
hooking, and offload.
These are describe in more detail below.
The following diagram illustrates the architecture between the provider
types.
.IP
.nf
\f[C]
---------------------------- libfabric API ---------------------------- 
  [core]   provider|<- [hooking provider]
[services]   API   |  --- libfabric API --- 
                   |<- [utility provider]
                   |  ---------------- libfabric API ------------------ 
                   |<-  [core provider] <-peer API-> [offload provider]
\f[R]
.fi
.PP
All providers plug into libfabric using an exported provider API.
libfabric supports both internal providers, which ship with the library
for user convenience, as well as external providers.
External provider libraries must be in the library search path, end with
the suffix \[lq]-fi\[rq], and export the function fi_prov_ini().
.PP
Once registered with the libfabric core, a provider will be reported to
applications as part of the discovery process.
Hooking and utility providers will intercept libfabric calls from the
application to perform some task before calling through to the next
provider.
If there\[cq]s no need to intercept a specific API call, the application
will call directly to the core provider.
Where possible provider to provider communication is done using the
libfabric APIs itself, including the use of provider specific extensions
to reduce call overhead.
.PP
libfabric defines a set of APIs that specifically target providers that
may be used as peers.
These APIs are oddly enough called peer APIs.
Peer APIs are technically part of the external libfabric API, but are
not designed for direct use by applications and are not considered
stable for API backwards compatibility.
.SH Core Providers
.PP
Core providers are stand-alone providers that usually target a specific
class of networking devices.
That is, a specific NIC, class of network hardware, or lower-level
software interface.
The core providers are usually what most application developers are
concerned with.
Core providers may only support libfabric features and interfaces that
map efficiently to the underlying hardware or network protocols.
.PP
The following core providers are built into libfabric by default,
assuming all build pre-requisites are met.
That is, necessary libraries are installed, operating system support is
available, etc.
This list is not exhaustive.
.TP
\f[I]CXI\f[R]
Provider for Cray\[cq]s Slingshot network.
See \f[C]fi_cxi\f[R](7) for more information.
.TP
\f[I]EFA\f[R]
A provider for the Amazon EC2 Elastic Fabric Adapter
(EFA) (https://aws.amazon.com/hpc/efa/), a custom-built OS bypass
hardware interface for inter-instance communication on EC2.
See \f[C]fi_efa\f[R](7) for more information.
.TP
\f[I]OPX\f[R]
Supports Omni-Path networking from Cornelis Networks.
See \f[C]fi_opx\f[R](7) for more information.
.TP
\f[I]PSM2\f[R]
Older provider for Omni-Path networks.
See \f[C]fi_psm2\f[R](7) for more information.
.TP
\f[I]PSM3\f[R]
Provider for Ethernet networking from Intel.
See \f[C]fi_psm3\f[R](7) for more information.
.TP
\f[I]SHM\f[R]
A provider for intra-node communication using shared memory.
See \f[C]fi_shm\f[R](7) for more information.
.TP
\f[I]TCP\f[R]
A provider which runs over the TCP/IP protocol and is available on
multiple operating systems.
This provider enables develop of libfabric applications on most
platforms.
See \f[C]fi_tcp\f[R](7) for more information.
.TP
\f[I]UCX\f[R]
A provider which runs over the UCX library which is currently supported
by Infiniband fabrics from NVIDIA.
See \f[C]fi_ucx\f[R](7) for more information.
.TP
\f[I]UDP\f[R]
A provider which runs over the UDP/IP protocol and is available on
multiple operating systems.
This provider enables develop of libfabric applications on most
platforms.
See \f[C]fi_udp\f[R](7) for more information.
.TP
\f[I]Verbs\f[R]
This provider targets RDMA NICs for both Linux and Windows platforms.
See \f[C]fi_verbs\f[R](7) for more information.
.SH Utility Providers
.PP
Utility providers are named with a starting prefix of \[lq]ofi_\[rq].
Utility providers are distinct from core providers in that they are not
associated with specific classes of devices.
They instead work with core providers to expand their features and
interact with core providers through libfabric interfaces internally.
Utility providers are used to support a specific endpoint type over a
simpler endpoint type.
.PP
Utility providers show up as part of the return\[cq]s provider\[cq]s
name.
See \f[C]fi_fabric\f[R](3).
Utility providers are enabled automatically for core providers that do
not support the feature set requested by an application.
.TP
\f[I]RxM\f[R]
Implements RDM endpoint semantics over MSG endpoints.
See \f[C]fi_rxm\f[R](7) for more information.
.TP
\f[I]RxD\f[R]
Implements RDM endpoint semantis over DGRAM endpoints.
See \f[C]fi_rxd\f[R](7) for more information.
.SH Hooking Providers
.PP
Hooking providers are mostly used for debugging purposes.
Since hooking providers are built and included in release versions of
libfabric, they are always available and have no impact on performance
unless enabled.
Hooking providers can layer over all other providers and intercept, or
hook, their calls in order to perform some dedicated task, such as
gathering performance data on call paths or providing debug output.
.PP
See \f[C]fi_hook\f[R](7) for more information.
.SH Offload Providers
.PP
Offload providers start with the naming prefix \[lq]off_\[rq].
An offload provider is meant to be paired with other core and/or utility
providers.
An offload provider is intended to accelerate specific types of
communication, generally by taking advantage of network services that
have been offloaded into hardware, though actual hardware offload
support is not a requirement.
.SH SEE ALSO
.PP
\f[C]fabric\f[R](7) \f[C]fi_provider\f[R](3)
.SH AUTHORS
OpenFabrics.
