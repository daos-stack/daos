==$(*)== Memcheck$(*)
==$(*)== Copyright$(*)
==$(*)== Using Valgrind-$(*)
==$(*)== Command: $(*)/obj_tx_add_range$(*)
==$(*)== Parent PID: $(*)
==$(*)== 
**$(*)** Snapshotting uninitialized data in range <0x$(*),0x$(*)> (<offset:0x$(*),size:0x3f8>)
==$(*)== Uninitialised byte(s) found during client check request
==$(*)==    at $(*): vg_verify_initialized ($(*))
==$(*)==    by $(*): pmemobj_tx_add_snapshot ($(*))
==$(*)==    by $(*): pmemobj_tx_add_common ($(*))
==$(*)==    by $(*): pmemobj_tx_add_range ($(*))
==$(*)==    by $(*): do_tx_add_range_no_uninit_check_commit_no_flag ($(*)obj_tx_add_range$(*))
==$(*)==    by $(*): main ($(*)obj_tx_add_range$(*))
==$(*)==  Address $(*) is 8 bytes inside a block of size $(*) client-defined
==$(*)==    at $(*): alloc_prep_block ($(*))
==$(*)==    by $(*): palloc_reservation_create ($(*))
==$(*)==    by $(*): palloc_reserve ($(*))
==$(*)==    by $(*): tx_alloc_common ($(*))
==$(*)==    by $(*): pmemobj_tx_alloc ($(*))
==$(*)==    by $(*): do_tx_alloc ($(*))
==$(*)==    by $(*): do_tx_add_range_no_uninit_check_commit_no_flag ($(*)obj_tx_add_range$(*))
==$(*)==    by $(*): main ($(*)obj_tx_add_range$(*))
==$(*)== 
==$(*)== 
==$(*)== HEAP SUMMARY:
==$(*)==     in use at exit: $(*) bytes in $(*) blocks
==$(*)==   total heap usage: $(*) allocs, $(*) frees, $(*) bytes allocated
==$(*)== 
$(OPT)==$(*)== All heap blocks were freed -- no leaks are possible
$(OPX)==$(*)== LEAK SUMMARY:
$(OPT)==$(*)==    definitely lost: 0 bytes in 0 blocks
$(OPT)==$(*)==    indirectly lost: 0 bytes in 0 blocks
$(OPT)==$(*)==      possibly lost: 0 bytes in 0 blocks
$(OPT)==$(*)==    still reachable: 0 bytes in 0 blocks
$(OPT)==$(*)==         suppressed: $(*) bytes in $(*) blocks
==$(*)== 
$(OPT)==$(*)== For counts of detected and suppressed errors, rerun with: -v
==$(*)== Use --track-origins=yes to see where uninitialised values come from
$(OPT)==$(*)== For lists of detected and suppressed errors, rerun with: -s
==$(*)== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: $(*) from $(*))
