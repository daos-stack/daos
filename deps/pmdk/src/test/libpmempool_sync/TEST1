#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2016-2018, Intel Corporation
#
#
# libpmempool_sync/TEST1 -- test for checking replica sync
#

. ../unittest/unittest.sh

require_test_type medium

require_fs_type any

setup

LOG=out${UNITTEST_NUM}.log
LOG_TEMP=out${UNITTEST_NUM}_part.log
rm -f $LOG && touch $LOG
rm -f $LOG_TEMP && touch $LOG_TEMP

LAYOUT=OBJ_LAYOUT$SUFFIX
POOLSET=$DIR/pool0.set
POOL_HEADER_OFFSET=4096
ADDR_MASK=0xFFFFF000

# Create poolset file
create_poolset $POOLSET \
	20M:$DIR/testfile1:x \
	20M:$DIR/testfile2:x \
	21M:$DIR/testfile3:x \
	R \
	40M:$DIR/testfile4:x \
	20M:$DIR/testfile5:x

# CLI script for writing some data hitting all the parts
WRITE_SCRIPT=$DIR/write_data
cat << EOF > $WRITE_SCRIPT
pr 55M
srcp 0 TestOK111
srcp 20M TestOK222
srcp 40M TestOK333
EOF

# CLI script for reading 9 characters from all the parts
READ_SCRIPT=$DIR/read_data
cat << EOF > $READ_SCRIPT
srpr 0 9
srpr 20M 9
srpr 40M 9
EOF

# Create a pool
expect_normal_exit $PMEMPOOL$EXESUFFIX create --layout=$LAYOUT\
	obj $POOLSET
cat $LOG >> $LOG_TEMP

# Write some data into the pool, hitting three part files
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $WRITE_SCRIPT $POOLSET >> $LOG_TEMP

# Check if correctly written
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET >> $LOG_TEMP

# Delete the second part in the primary replica
rm -f $DIR/testfile2

# Synchronize replicas
FLAGS=0
expect_normal_exit ./libpmempool_sync$EXESUFFIX $POOLSET $FLAGS
cat $LOG >> $LOG_TEMP

# Check if correctly synchronized
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET >> $LOG_TEMP

mv $LOG_TEMP $LOG
check

pass
