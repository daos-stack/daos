#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2016-2018, Intel Corporation
#
#
# pmempool_sync/TEST0 -- test for checking pmempool sync;
#                        a case with damaged header checksum
#

. ../unittest/unittest.sh

require_test_type medium

require_fs_type any

setup

LOG=out${UNITTEST_NUM}.log
LOG_TEMP=out${UNITTEST_NUM}_part.log
rm -f $LOG && touch $LOG
rm -f $LOG_TEMP && touch $LOG_TEMP

LAYOUT=OBJ_LAYOUT$SUFFIX
POOLSET=$DIR/pool0.set
M=$(( 1024 * 1024 ))
M20=$(( 20 * $M ))
M40=$(( 40 * $M ))
POOL_HEADER_OFFSET=$PAGE_SIZE
ADDR_MASK=0xFFFFF000

# Create poolset file
create_poolset $POOLSET \
	20M:$DIR/testfile1:x \
	20M:$DIR/testfile2:x \
	21M:$DIR/testfile3:x \
	R \
	40M:$DIR/testfile4:x \
	20M:$DIR/testfile5:x

# CLI script for writing some data hitting all the parts
WRITE_SCRIPT=$DIR/write_data
cat << EOF > $WRITE_SCRIPT
pr 55M
srcp 0 TestOK111
srcp 20M TestOK222
srcp 40M TestOK333
EOF

# CLI script for reading 9 characters from all the parts
READ_SCRIPT=$DIR/read_data
cat << EOF > $READ_SCRIPT
srpr 0 9
srpr 20M 9
srpr 40M 9
EOF

# Create poolset
expect_normal_exit $PMEMPOOL$EXESUFFIX create --layout=$LAYOUT\
	obj $POOLSET
cat $LOG >> $LOG_TEMP

# Write some data into the pool, hitting three part files
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $WRITE_SCRIPT $POOLSET >> $LOG_TEMP

# Check if correctly written
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET >> $LOG_TEMP

# Find root offset
TMP_FILE=$DIR/obj_info
expect_normal_exit $PMEMPOOL$EXESUFFIX info -f obj -o $DIR/testfile1 \
	> $TMP_FILE
ROOT_ADDR="$(cat $TMP_FILE | $GREP "Root offset" | \
	sed 's/^Root offset[ \t]*: 0x\([0-9][0-9]*\)/\1/')"
ROOT_ADDR=$((16#$ROOT_ADDR))

# Calculate offsets from the root object start to hit each part file
PART1_FILE_SIZE=$(stat $STAT_SIZE "$DIR/testfile1")
PART1_SIZE=$(( ($PART1_FILE_SIZE & $ADDR_MASK) - $ROOT_ADDR ))
PART2_OFFSET=$(( $M20 - $PART1_SIZE + $POOL_HEADER_OFFSET ))

PART2_FILE_SIZE=$(stat $STAT_SIZE "$DIR/testfile2")
PART2_SIZE=$(( ($PART2_FILE_SIZE & $ADDR_MASK) - $POOL_HEADER_OFFSET ))
PART3_OFFSET=$(( $M40 - ($PART1_SIZE + $PART2_SIZE)\
	+ $POOL_HEADER_OFFSET ))

# Corrupt data in primary replica
expect_normal_exit $DDMAP$EXESUFFIX -o "$DIR/testfile1" -s $ROOT_ADDR -d "Wrong1234"
expect_normal_exit $DDMAP$EXESUFFIX -o "$DIR/testfile2" -s $PART2_OFFSET -d "Wrong5678"
expect_normal_exit $DDMAP$EXESUFFIX -o "$DIR/testfile3" -s $PART3_OFFSET -d "Wrong9ABC"

# Check if corrupted
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET >> $LOG_TEMP

# Corrupt metadata in primary replica, leave incorrect checksum
expect_normal_exit $PMEMSPOIL $DIR/testfile1 pool_hdr.uuid=0000000000000000\
	>> $LOG_TEMP

# Synchronize replicas
expect_normal_exit $PMEMPOOL$EXESUFFIX sync $POOLSET >> $LOG_TEMP

# Check if correctly copied - only the first part should be fixed
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET >> $LOG_TEMP

mv $LOG_TEMP $LOG
check

pass
