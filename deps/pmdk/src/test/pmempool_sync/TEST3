#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2016-2018, Intel Corporation
#
#
# pmempool_sync/TEST3 -- test for checking pmempool sync;
#                        pmem/issues#257
#

. ../unittest/unittest.sh

require_test_type medium

require_fs_type any

setup

LOG=out${UNITTEST_NUM}.log
LOG_TEMP=out${UNITTEST_NUM}_part.log
rm -f $LOG && touch $LOG
rm -f $LOG_TEMP && touch $LOG_TEMP

LAYOUT=OBJ_LAYOUT$SUFFIX
POOLSET=$DIR/pool0.set

# Create poolset file
create_poolset $POOLSET \
	20M:$DIR/testfile00:x \
	30M:$DIR/testfile01:x \
	R \
	30M:$DIR/testfile10:x \
	20M:$DIR/testfile11:x

# CLI script for writing some data hitting all the parts
WRITE_SCRIPT=$DIR/write_data
cat << EOF > $WRITE_SCRIPT
pr 45M
srcp 0 TestOK111
srcp 35M TestOK222
EOF

# CLI script for reading 9 characters from all the parts
READ_SCRIPT=$DIR/read_data
cat << EOF > $READ_SCRIPT
srpr 0 9
srpr 35M 9
EOF

# Create a poolset
expect_normal_exit $PMEMPOOL$EXESUFFIX create --layout=$LAYOUT obj $POOLSET
cat $LOG >> $LOG_TEMP

# Write some data into the pool, hitting all part files
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $WRITE_SCRIPT $POOLSET >> $LOG_TEMP

# Check if correctly written
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET >> $LOG_TEMP

# Delete the second part in the primary replica
rm -f $DIR/testfile01

# Synchronize replicas
expect_normal_exit $PMEMPOOL$EXESUFFIX sync -d $POOLSET >> $LOG_TEMP

# Check metadata by pmempool info
dump_pool_info $DIR/testfile00 >> $LOG_TEMP
dump_pool_info $DIR/testfile10 >> $LOG_TEMP
dump_pool_info $DIR/testfile11 >> $LOG_TEMP
check_no_file $DIR/testfile01 >> $LOG_TEMP

mv $LOG_TEMP $LOG
check

pass
