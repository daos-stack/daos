#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2016-2019, Intel Corporation
#
#
# pmempool_sync/TEST7 -- test for checking pmempool sync;
#                        with device dax
#

. ../unittest/unittest.sh

require_test_type medium
require_dax_devices 1
require_fs_type any

require_ppc64

# the test takes too long under pmemcheck
configure_valgrind pmemcheck force-disable

setup

LOG=out${UNITTEST_NUM}.log
LOG_TEMP=out${UNITTEST_NUM}_part.log
rm -f $LOG && touch $LOG
rm -f $LOG_TEMP && touch $LOG_TEMP

LAYOUT=OBJ_LAYOUT$SUFFIX
POOLSET=$DIR/pool.set
HDR_LEN=65536

# Create poolset files
create_poolset $POOLSET \
	AUTO:$DEVICE_DAX_PATH:x \
	r \
	20M:$DIR/part10:x \
	20M:$DIR/part11:x

# CLI script for writing some data hitting all the parts
WRITE_SCRIPT=$DIR/write_data
cat << EOF > $WRITE_SCRIPT
pr 25M
srcp 0 TestOK111
srcp 21M TestOK222
EOF

# CLI script for reading 9 characters from all the parts
READ_SCRIPT=$DIR/read_data
cat << EOF > $READ_SCRIPT
srpr 0 9
srpr 21M 9
EOF

# Clean the dax devices
expect_normal_exit $DDMAP$EXESUFFIX -o ${DEVICE_DAX_PATH[0]} -n $HDR_LEN -b 1

# Create poolset1
expect_normal_exit $PMEMPOOL$EXESUFFIX create --layout=$LAYOUT obj $POOLSET \
>> $LOG_TEMP

# Write some data into the pool, hitting all part files
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $WRITE_SCRIPT $POOLSET >> $LOG_TEMP

# Check if correctly written
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET >> $LOG_TEMP

# Delete one part of the second replica
rm -f $DIR/part10

# Synchronize replicas
expect_normal_exit $PMEMPOOL$EXESUFFIX sync $POOLSET >> $LOG_TEMP

# Check if correctly written
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET >> $LOG_TEMP

# Check metadata by pmempool info
dump_pool_info $POOLSET >> $LOG_TEMP
dump_pool_info $DIR/part10 >> $LOG_TEMP
dump_pool_info $DIR/part11 >> $LOG_TEMP
dump_pool_info $DEVICE_DAX_PATH >> $LOG_TEMP

mv $LOG_TEMP $LOG
check

pass
