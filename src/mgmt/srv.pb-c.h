/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: srv.proto */

#ifndef PROTOBUF_C_srv_2eproto__INCLUDED
#define PROTOBUF_C_srv_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Proto__EmptyParams Proto__EmptyParams;
typedef struct _Proto__FeatureName Proto__FeatureName;
typedef struct _Proto__Category Proto__Category;
typedef struct _Proto__Feature Proto__Feature;
typedef struct _Proto__NvmeNamespace Proto__NvmeNamespace;
typedef struct _Proto__NvmeController Proto__NvmeController;
typedef struct _Proto__UpdateNvmeParams Proto__UpdateNvmeParams;
typedef struct _Proto__FioConfigPath Proto__FioConfigPath;
typedef struct _Proto__BurnInNvmeParams Proto__BurnInNvmeParams;
typedef struct _Proto__BurnInNvmeReport Proto__BurnInNvmeReport;
typedef struct _Proto__ScmModule Proto__ScmModule;
typedef struct _Proto__DaosRank Proto__DaosRank;
typedef struct _Proto__DaosResponse Proto__DaosResponse;


/* --- enums --- */

typedef enum _Proto__DaosRequestStatus {
  PROTO__DAOS_REQUEST_STATUS__SUCCESS = 0,
  /*
   * Unknown error
   */
  PROTO__DAOS_REQUEST_STATUS__ERR_UNKNOWN = -1,
  /*
   * Rank requested is invalid
   */
  PROTO__DAOS_REQUEST_STATUS__ERR_INVALID_RANK = -2,
  /*
   * Pool UUID requested is invalid
   */
  PROTO__DAOS_REQUEST_STATUS__ERR_INVALID_UUID = -3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__DAOS_REQUEST_STATUS)
} Proto__DaosRequestStatus;

/* --- messages --- */

struct  _Proto__EmptyParams
{
  ProtobufCMessage base;
};
#define PROTO__EMPTY_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__empty_params__descriptor) \
     }


struct  _Proto__FeatureName
{
  ProtobufCMessage base;
  char *name;
};
#define PROTO__FEATURE_NAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__feature_name__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _Proto__Category
{
  ProtobufCMessage base;
  char *category;
};
#define PROTO__CATEGORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__category__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * Feature represents a management task that can be performed by server.
 */
struct  _Proto__Feature
{
  ProtobufCMessage base;
  /*
   * The category of capabilities this feature belongs to.
   */
  Proto__Category *category;
  /*
   * The name of the feature.
   */
  Proto__FeatureName *fname;
  /*
   * The description of the feature.
   */
  char *description;
};
#define PROTO__FEATURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__feature__descriptor) \
    , NULL, NULL, (char *)protobuf_c_empty_string }


/*
 * NvmeNamespace represent NVMe namespaces available on controller.
 */
struct  _Proto__NvmeNamespace
{
  ProtobufCMessage base;
  /*
   * namespace id
   */
  int32_t id;
  /*
   * device capacity in GBytes
   */
  int32_t capacity;
};
#define PROTO__NVME_NAMESPACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__nvme_namespace__descriptor) \
    , 0, 0 }


/*
 * NvmeController represents an NVMe Controller.
 */
struct  _Proto__NvmeController
{
  ProtobufCMessage base;
  /*
   * The id of the controller.
   */
  int32_t id;
  /*
   * The model name of the controller.
   */
  char *model;
  /*
   * The serial number of the controller.
   */
  char *serial;
  /*
   * The pci address of the controller.
   */
  char *pciaddr;
  /*
   * The firmware revision of the controller.
   */
  char *fwrev;
  /*
   * NvmeNamespaces created on this controller.
   */
  size_t n_namespace_;
  Proto__NvmeNamespace **namespace_;
};
#define PROTO__NVME_CONTROLLER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__nvme_controller__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


struct  _Proto__UpdateNvmeParams
{
  ProtobufCMessage base;
  /*
   * The pci address of the controller to update firmware on.
   */
  char *pciaddr;
  /*
   * Filesystem path containing firmware image
   */
  char *path;
  /*
   * Firmware slot (register) to update
   */
  int32_t slot;
};
#define PROTO__UPDATE_NVME_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__update_nvme_params__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  _Proto__FioConfigPath
{
  ProtobufCMessage base;
  /*
   * Filesystem path containing fio job configuration
   */
  char *path;
};
#define PROTO__FIO_CONFIG_PATH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__fio_config_path__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _Proto__BurnInNvmeParams
{
  ProtobufCMessage base;
  /*
   * The pci address of the controller to perform burn-in on.
   */
  char *pciaddr;
  /*
   * FIO workload configuration file path
   */
  Proto__FioConfigPath *path;
};
#define PROTO__BURN_IN_NVME_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__burn_in_nvme_params__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _Proto__BurnInNvmeReport
{
  ProtobufCMessage base;
  /*
   * Report from running burn-in reported by fio
   */
  char *report;
};
#define PROTO__BURN_IN_NVME_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__burn_in_nvme_report__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * ScmModule represent Storage Class Memory modules installed.
 */
struct  _Proto__ScmModule
{
  ProtobufCMessage base;
  /*
   * The uid of the module.
   *string uid = 1;
   * The physical id of the module.
   */
  uint32_t physicalid;
  /*
   * The device handle of the module.
   *string handle = 3;
   * The channel id where module is installed.
   */
  uint32_t channel;
  /*
   * The channel position where module is installed.
   */
  uint32_t channelpos;
  /*
   * The memory controller id attached to module.
   */
  uint32_t memctrlr;
  /*
   * The socket id attached to module.
   */
  uint32_t socket;
  /*
   * The serial number of the module.
   *string serial = 8;
   * The capacity of the module.
   */
  /*
   * The firmware revision of the module.
   *string fwrev = 10;
   */
  uint64_t capacity;
};
#define PROTO__SCM_MODULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__scm_module__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


/*
 * Identifier for server rank within DAOS pool
 */
struct  _Proto__DaosRank
{
  ProtobufCMessage base;
  /*
   * UUID of the pool
   */
  char *pool_uuid;
  /*
   * Server rank
   */
  uint32_t rank;
};
#define PROTO__DAOS_RANK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__daos_rank__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _Proto__DaosResponse
{
  ProtobufCMessage base;
  Proto__DaosRequestStatus status;
};
#define PROTO__DAOS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__daos_response__descriptor) \
    , PROTO__DAOS_REQUEST_STATUS__SUCCESS }


/* Proto__EmptyParams methods */
void   proto__empty_params__init
                     (Proto__EmptyParams         *message);
size_t proto__empty_params__get_packed_size
                     (const Proto__EmptyParams   *message);
size_t proto__empty_params__pack
                     (const Proto__EmptyParams   *message,
                      uint8_t             *out);
size_t proto__empty_params__pack_to_buffer
                     (const Proto__EmptyParams   *message,
                      ProtobufCBuffer     *buffer);
Proto__EmptyParams *
       proto__empty_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__empty_params__free_unpacked
                     (Proto__EmptyParams *message,
                      ProtobufCAllocator *allocator);
/* Proto__FeatureName methods */
void   proto__feature_name__init
                     (Proto__FeatureName         *message);
size_t proto__feature_name__get_packed_size
                     (const Proto__FeatureName   *message);
size_t proto__feature_name__pack
                     (const Proto__FeatureName   *message,
                      uint8_t             *out);
size_t proto__feature_name__pack_to_buffer
                     (const Proto__FeatureName   *message,
                      ProtobufCBuffer     *buffer);
Proto__FeatureName *
       proto__feature_name__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__feature_name__free_unpacked
                     (Proto__FeatureName *message,
                      ProtobufCAllocator *allocator);
/* Proto__Category methods */
void   proto__category__init
                     (Proto__Category         *message);
size_t proto__category__get_packed_size
                     (const Proto__Category   *message);
size_t proto__category__pack
                     (const Proto__Category   *message,
                      uint8_t             *out);
size_t proto__category__pack_to_buffer
                     (const Proto__Category   *message,
                      ProtobufCBuffer     *buffer);
Proto__Category *
       proto__category__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__category__free_unpacked
                     (Proto__Category *message,
                      ProtobufCAllocator *allocator);
/* Proto__Feature methods */
void   proto__feature__init
                     (Proto__Feature         *message);
size_t proto__feature__get_packed_size
                     (const Proto__Feature   *message);
size_t proto__feature__pack
                     (const Proto__Feature   *message,
                      uint8_t             *out);
size_t proto__feature__pack_to_buffer
                     (const Proto__Feature   *message,
                      ProtobufCBuffer     *buffer);
Proto__Feature *
       proto__feature__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__feature__free_unpacked
                     (Proto__Feature *message,
                      ProtobufCAllocator *allocator);
/* Proto__NvmeNamespace methods */
void   proto__nvme_namespace__init
                     (Proto__NvmeNamespace         *message);
size_t proto__nvme_namespace__get_packed_size
                     (const Proto__NvmeNamespace   *message);
size_t proto__nvme_namespace__pack
                     (const Proto__NvmeNamespace   *message,
                      uint8_t             *out);
size_t proto__nvme_namespace__pack_to_buffer
                     (const Proto__NvmeNamespace   *message,
                      ProtobufCBuffer     *buffer);
Proto__NvmeNamespace *
       proto__nvme_namespace__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__nvme_namespace__free_unpacked
                     (Proto__NvmeNamespace *message,
                      ProtobufCAllocator *allocator);
/* Proto__NvmeController methods */
void   proto__nvme_controller__init
                     (Proto__NvmeController         *message);
size_t proto__nvme_controller__get_packed_size
                     (const Proto__NvmeController   *message);
size_t proto__nvme_controller__pack
                     (const Proto__NvmeController   *message,
                      uint8_t             *out);
size_t proto__nvme_controller__pack_to_buffer
                     (const Proto__NvmeController   *message,
                      ProtobufCBuffer     *buffer);
Proto__NvmeController *
       proto__nvme_controller__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__nvme_controller__free_unpacked
                     (Proto__NvmeController *message,
                      ProtobufCAllocator *allocator);
/* Proto__UpdateNvmeParams methods */
void   proto__update_nvme_params__init
                     (Proto__UpdateNvmeParams         *message);
size_t proto__update_nvme_params__get_packed_size
                     (const Proto__UpdateNvmeParams   *message);
size_t proto__update_nvme_params__pack
                     (const Proto__UpdateNvmeParams   *message,
                      uint8_t             *out);
size_t proto__update_nvme_params__pack_to_buffer
                     (const Proto__UpdateNvmeParams   *message,
                      ProtobufCBuffer     *buffer);
Proto__UpdateNvmeParams *
       proto__update_nvme_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__update_nvme_params__free_unpacked
                     (Proto__UpdateNvmeParams *message,
                      ProtobufCAllocator *allocator);
/* Proto__FioConfigPath methods */
void   proto__fio_config_path__init
                     (Proto__FioConfigPath         *message);
size_t proto__fio_config_path__get_packed_size
                     (const Proto__FioConfigPath   *message);
size_t proto__fio_config_path__pack
                     (const Proto__FioConfigPath   *message,
                      uint8_t             *out);
size_t proto__fio_config_path__pack_to_buffer
                     (const Proto__FioConfigPath   *message,
                      ProtobufCBuffer     *buffer);
Proto__FioConfigPath *
       proto__fio_config_path__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__fio_config_path__free_unpacked
                     (Proto__FioConfigPath *message,
                      ProtobufCAllocator *allocator);
/* Proto__BurnInNvmeParams methods */
void   proto__burn_in_nvme_params__init
                     (Proto__BurnInNvmeParams         *message);
size_t proto__burn_in_nvme_params__get_packed_size
                     (const Proto__BurnInNvmeParams   *message);
size_t proto__burn_in_nvme_params__pack
                     (const Proto__BurnInNvmeParams   *message,
                      uint8_t             *out);
size_t proto__burn_in_nvme_params__pack_to_buffer
                     (const Proto__BurnInNvmeParams   *message,
                      ProtobufCBuffer     *buffer);
Proto__BurnInNvmeParams *
       proto__burn_in_nvme_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__burn_in_nvme_params__free_unpacked
                     (Proto__BurnInNvmeParams *message,
                      ProtobufCAllocator *allocator);
/* Proto__BurnInNvmeReport methods */
void   proto__burn_in_nvme_report__init
                     (Proto__BurnInNvmeReport         *message);
size_t proto__burn_in_nvme_report__get_packed_size
                     (const Proto__BurnInNvmeReport   *message);
size_t proto__burn_in_nvme_report__pack
                     (const Proto__BurnInNvmeReport   *message,
                      uint8_t             *out);
size_t proto__burn_in_nvme_report__pack_to_buffer
                     (const Proto__BurnInNvmeReport   *message,
                      ProtobufCBuffer     *buffer);
Proto__BurnInNvmeReport *
       proto__burn_in_nvme_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__burn_in_nvme_report__free_unpacked
                     (Proto__BurnInNvmeReport *message,
                      ProtobufCAllocator *allocator);
/* Proto__ScmModule methods */
void   proto__scm_module__init
                     (Proto__ScmModule         *message);
size_t proto__scm_module__get_packed_size
                     (const Proto__ScmModule   *message);
size_t proto__scm_module__pack
                     (const Proto__ScmModule   *message,
                      uint8_t             *out);
size_t proto__scm_module__pack_to_buffer
                     (const Proto__ScmModule   *message,
                      ProtobufCBuffer     *buffer);
Proto__ScmModule *
       proto__scm_module__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__scm_module__free_unpacked
                     (Proto__ScmModule *message,
                      ProtobufCAllocator *allocator);
/* Proto__DaosRank methods */
void   proto__daos_rank__init
                     (Proto__DaosRank         *message);
size_t proto__daos_rank__get_packed_size
                     (const Proto__DaosRank   *message);
size_t proto__daos_rank__pack
                     (const Proto__DaosRank   *message,
                      uint8_t             *out);
size_t proto__daos_rank__pack_to_buffer
                     (const Proto__DaosRank   *message,
                      ProtobufCBuffer     *buffer);
Proto__DaosRank *
       proto__daos_rank__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__daos_rank__free_unpacked
                     (Proto__DaosRank *message,
                      ProtobufCAllocator *allocator);
/* Proto__DaosResponse methods */
void   proto__daos_response__init
                     (Proto__DaosResponse         *message);
size_t proto__daos_response__get_packed_size
                     (const Proto__DaosResponse   *message);
size_t proto__daos_response__pack
                     (const Proto__DaosResponse   *message,
                      uint8_t             *out);
size_t proto__daos_response__pack_to_buffer
                     (const Proto__DaosResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__DaosResponse *
       proto__daos_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__daos_response__free_unpacked
                     (Proto__DaosResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__EmptyParams_Closure)
                 (const Proto__EmptyParams *message,
                  void *closure_data);
typedef void (*Proto__FeatureName_Closure)
                 (const Proto__FeatureName *message,
                  void *closure_data);
typedef void (*Proto__Category_Closure)
                 (const Proto__Category *message,
                  void *closure_data);
typedef void (*Proto__Feature_Closure)
                 (const Proto__Feature *message,
                  void *closure_data);
typedef void (*Proto__NvmeNamespace_Closure)
                 (const Proto__NvmeNamespace *message,
                  void *closure_data);
typedef void (*Proto__NvmeController_Closure)
                 (const Proto__NvmeController *message,
                  void *closure_data);
typedef void (*Proto__UpdateNvmeParams_Closure)
                 (const Proto__UpdateNvmeParams *message,
                  void *closure_data);
typedef void (*Proto__FioConfigPath_Closure)
                 (const Proto__FioConfigPath *message,
                  void *closure_data);
typedef void (*Proto__BurnInNvmeParams_Closure)
                 (const Proto__BurnInNvmeParams *message,
                  void *closure_data);
typedef void (*Proto__BurnInNvmeReport_Closure)
                 (const Proto__BurnInNvmeReport *message,
                  void *closure_data);
typedef void (*Proto__ScmModule_Closure)
                 (const Proto__ScmModule *message,
                  void *closure_data);
typedef void (*Proto__DaosRank_Closure)
                 (const Proto__DaosRank *message,
                  void *closure_data);
typedef void (*Proto__DaosResponse_Closure)
                 (const Proto__DaosResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Proto__MgmtControl_Service Proto__MgmtControl_Service;
struct _Proto__MgmtControl_Service
{
  ProtobufCService base;
  void (*get_feature)(Proto__MgmtControl_Service *service,
                      const Proto__FeatureName *input,
                      Proto__Feature_Closure closure,
                      void *closure_data);
  void (*list_all_features)(Proto__MgmtControl_Service *service,
                            const Proto__EmptyParams *input,
                            Proto__Feature_Closure closure,
                            void *closure_data);
  void (*list_features)(Proto__MgmtControl_Service *service,
                        const Proto__Category *input,
                        Proto__Feature_Closure closure,
                        void *closure_data);
  void (*list_nvme_ctrlrs)(Proto__MgmtControl_Service *service,
                           const Proto__EmptyParams *input,
                           Proto__NvmeController_Closure closure,
                           void *closure_data);
  void (*update_nvme_ctrlr)(Proto__MgmtControl_Service *service,
                            const Proto__UpdateNvmeParams *input,
                            Proto__NvmeController_Closure closure,
                            void *closure_data);
  void (*fetch_fio_config_paths)(Proto__MgmtControl_Service *service,
                                 const Proto__EmptyParams *input,
                                 Proto__FioConfigPath_Closure closure,
                                 void *closure_data);
  void (*burn_in_nvme)(Proto__MgmtControl_Service *service,
                       const Proto__BurnInNvmeParams *input,
                       Proto__BurnInNvmeReport_Closure closure,
                       void *closure_data);
  void (*list_scm_modules)(Proto__MgmtControl_Service *service,
                           const Proto__EmptyParams *input,
                           Proto__ScmModule_Closure closure,
                           void *closure_data);
  void (*kill_rank)(Proto__MgmtControl_Service *service,
                    const Proto__DaosRank *input,
                    Proto__DaosResponse_Closure closure,
                    void *closure_data);
};
typedef void (*Proto__MgmtControl_ServiceDestroy)(Proto__MgmtControl_Service *);
void proto__mgmt_control__init (Proto__MgmtControl_Service *service,
                                Proto__MgmtControl_ServiceDestroy destroy);
#define PROTO__MGMT_CONTROL__BASE_INIT \
    { &proto__mgmt_control__descriptor, protobuf_c_service_invoke_internal, NULL }
#define PROTO__MGMT_CONTROL__INIT(function_prefix__) \
    { PROTO__MGMT_CONTROL__BASE_INIT,\
      function_prefix__ ## get_feature,\
      function_prefix__ ## list_all_features,\
      function_prefix__ ## list_features,\
      function_prefix__ ## list_nvme_ctrlrs,\
      function_prefix__ ## update_nvme_ctrlr,\
      function_prefix__ ## fetch_fio_config_paths,\
      function_prefix__ ## burn_in_nvme,\
      function_prefix__ ## list_scm_modules,\
      function_prefix__ ## kill_rank  }
void proto__mgmt_control__get_feature(ProtobufCService *service,
                                      const Proto__FeatureName *input,
                                      Proto__Feature_Closure closure,
                                      void *closure_data);
void proto__mgmt_control__list_all_features(ProtobufCService *service,
                                            const Proto__EmptyParams *input,
                                            Proto__Feature_Closure closure,
                                            void *closure_data);
void proto__mgmt_control__list_features(ProtobufCService *service,
                                        const Proto__Category *input,
                                        Proto__Feature_Closure closure,
                                        void *closure_data);
void proto__mgmt_control__list_nvme_ctrlrs(ProtobufCService *service,
                                           const Proto__EmptyParams *input,
                                           Proto__NvmeController_Closure closure,
                                           void *closure_data);
void proto__mgmt_control__update_nvme_ctrlr(ProtobufCService *service,
                                            const Proto__UpdateNvmeParams *input,
                                            Proto__NvmeController_Closure closure,
                                            void *closure_data);
void proto__mgmt_control__fetch_fio_config_paths(ProtobufCService *service,
                                                 const Proto__EmptyParams *input,
                                                 Proto__FioConfigPath_Closure closure,
                                                 void *closure_data);
void proto__mgmt_control__burn_in_nvme(ProtobufCService *service,
                                       const Proto__BurnInNvmeParams *input,
                                       Proto__BurnInNvmeReport_Closure closure,
                                       void *closure_data);
void proto__mgmt_control__list_scm_modules(ProtobufCService *service,
                                           const Proto__EmptyParams *input,
                                           Proto__ScmModule_Closure closure,
                                           void *closure_data);
void proto__mgmt_control__kill_rank(ProtobufCService *service,
                                    const Proto__DaosRank *input,
                                    Proto__DaosResponse_Closure closure,
                                    void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    proto__daos_request_status__descriptor;
extern const ProtobufCMessageDescriptor proto__empty_params__descriptor;
extern const ProtobufCMessageDescriptor proto__feature_name__descriptor;
extern const ProtobufCMessageDescriptor proto__category__descriptor;
extern const ProtobufCMessageDescriptor proto__feature__descriptor;
extern const ProtobufCMessageDescriptor proto__nvme_namespace__descriptor;
extern const ProtobufCMessageDescriptor proto__nvme_controller__descriptor;
extern const ProtobufCMessageDescriptor proto__update_nvme_params__descriptor;
extern const ProtobufCMessageDescriptor proto__fio_config_path__descriptor;
extern const ProtobufCMessageDescriptor proto__burn_in_nvme_params__descriptor;
extern const ProtobufCMessageDescriptor proto__burn_in_nvme_report__descriptor;
extern const ProtobufCMessageDescriptor proto__scm_module__descriptor;
extern const ProtobufCMessageDescriptor proto__daos_rank__descriptor;
extern const ProtobufCMessageDescriptor proto__daos_response__descriptor;
extern const ProtobufCServiceDescriptor proto__mgmt_control__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_srv_2eproto__INCLUDED */
