"""Build daos iosrv tests"""
import daos_build

def scons():
    """Execute build"""
    Import('denv', 'common_test_utils')

    unit_env = denv.Clone()
    unit_env.AppendUnique(OBJPREFIX='utest_')
    # Some syscalls are aliased when fortification is enabled, which makes
    # mocking in unit tests into a headache.
    # The compiler decides this on its own, but let's force the issue.
    unit_env.Append(CCFLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0")

    daos_build.test(unit_env, 'drpc_progress_tests',
                    ['drpc_progress_tests.c', common_test_utils,
                     '../drpc_progress.c'],
                    LIBS=['daos_common', 'protobuf-c', 'gurt', 'cmocka'])

    daos_build.test(unit_env, 'drpc_handler_tests',
                    ['drpc_handler_tests.c', common_test_utils,
                     '../drpc_handler.c'],
                    LIBS=['daos_common', 'protobuf-c', 'gurt', 'cmocka'])

    daos_build.test(unit_env, 'drpc_listener_tests',
                    ['drpc_listener_tests.c', common_test_utils,
                     '../drpc_listener.c'],
                    LIBS=['daos_common', 'protobuf-c', 'gurt', 'cmocka'])

    daos_build.test(unit_env, 'drpc_client_tests',
                    ['drpc_client_tests.c', common_test_utils,
                     '../drpc_client.c', '../srv.pb-c.c'],
                    LIBS=['daos_common', 'protobuf-c', 'gurt', 'cmocka',
                          'uuid'])

if __name__ == "SCons.Script":
    scons()
