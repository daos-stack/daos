"""Build security library"""
import daos_build

SRC_CLI_FILES = ['cli_security.c', 'auth.pb-c.c']
SRC_SRV_FILES = ['srv.c', 'srv_acl.c']

def get_objects(cache, *args):
    """Retrieve built objects from the object cache"""
    built = []
    for arg in args:
        built.append(cache[arg])
    return built

def scons():
    """Execute build"""
    Import('env', 'prereqs')

    env.AppendUnique(LIBPATH=[Dir('.')])
    denv = env.Clone()

    prereqs.require(denv, 'protobufc', 'hwloc')

    # Populate the object cache
    cache = {}
    for src_file in SRC_CLI_FILES:
        cache[src_file] = denv.SharedObject(src_file)

    # dc_security: Security Client
    dc_security_tgts = get_objects(cache, 'cli_security.c', 'auth.pb-c.c')
    Export('dc_security_tgts')

    if prereqs.test_requested():
        dc_sectest_tgts = get_objects(cache, 'cli_security.c', 'auth.pb-c.c')
        Export('dc_sectest_tgts')

    if not prereqs.server_requested():
        return

    # generate server module
    senv = denv.Clone()
    prereqs.require(senv, 'argobots')

    for src_file in SRC_SRV_FILES:
        cache[src_file] = senv.SharedObject(src_file)

    senv.AppendUnique(LIBS=['gurt'])
    ds_sec = daos_build.library(senv, 'security',
                                get_objects(cache, 'srv.c', 'srv_acl.c'),
                                install_off="../..")
    senv.Install('$PREFIX/lib64/daos_srv', ds_sec)

    if prereqs.test_requested():
        dc_sectest_tgts += get_objects(cache, 'srv_acl.c')
        Export('dc_sectest_tgts')

        denv = senv
        SConscript('tests/SConscript', exports='denv')

if __name__ == "SCons.Script":
    scons()
