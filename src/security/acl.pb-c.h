/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: acl.proto */

#ifndef PROTOBUF_C_acl_2eproto__INCLUDED
#define PROTOBUF_C_acl_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Acl__Response Acl__Response;
typedef struct _Acl__Entry Acl__Entry;
typedef struct _Acl__EntryPermissions Acl__EntryPermissions;


/* --- enums --- */

typedef enum _Acl__RequestStatus {
  ACL__REQUEST_STATUS__SUCCESS = 0,
  /*
   * Unknown error
   */
  ACL__REQUEST_STATUS__ERR_UNKNOWN = -1,
  /*
   * Not authorized to make these changes
   */
  ACL__REQUEST_STATUS__ERR_PERM_DENIED = -2,
  /*
   * Permissions requested are invalid
   */
  ACL__REQUEST_STATUS__ERR_INVALID_PERMS = -3,
  /*
   * Principal requested is invalid
   */
  ACL__REQUEST_STATUS__ERR_INVALID_PRINCIPAL = -4,
  /*
   * UUID requested is invalid
   */
  ACL__REQUEST_STATUS__ERR_INVALID_UUID = -5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ACL__REQUEST_STATUS)
} Acl__RequestStatus;
/*
 * Bits representing access permissions
 */
typedef enum _Acl__Permissions {
  ACL__PERMISSIONS__NO_ACCESS = 0,
  ACL__PERMISSIONS__READ = 1,
  ACL__PERMISSIONS__WRITE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ACL__PERMISSIONS)
} Acl__Permissions;
/*
 * A given user/group may have multiple different types of entries
 */
typedef enum _Acl__EntryType {
  ACL__ENTRY_TYPE__ALLOW = 0,
  ACL__ENTRY_TYPE__AUDIT = 1,
  ACL__ENTRY_TYPE__ALARM = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ACL__ENTRY_TYPE)
} Acl__EntryType;
/*
 * Bits representing flags on a given ACL entry
 */
typedef enum _Acl__Flags {
  ACL__FLAGS__NO_FLAGS = 0,
  /*
   * This entry is for a group not a user
   */
  ACL__FLAGS__GROUP = 1,
  /*
   * audit/alarm on successful access
   */
  ACL__FLAGS__ACCESS_SUCCESS = 2,
  /*
   * audit/alarm on failed access
   */
  ACL__FLAGS__ACCESS_FAILURE = 4,
  /*
   * entry should be inherited by pool's containers
   */
  ACL__FLAGS__POOL_INHERIT = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ACL__FLAGS)
} Acl__Flags;

/* --- messages --- */

struct  _Acl__Response
{
  ProtobufCMessage base;
  Acl__RequestStatus status;
  Acl__EntryPermissions *permissions;
};
#define ACL__RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&acl__response__descriptor) \
    , ACL__REQUEST_STATUS__SUCCESS, NULL }


/*
 * Identifier for a specific Access Control Entry
 */
struct  _Acl__Entry
{
  ProtobufCMessage base;
  Acl__EntryType type;
  /*
   * bitmask of AclFlags
   */
  uint32_t flags;
  /*
   * UUID of the entity (such as a pool)
   */
  char *entity;
  /*
   * User/group who accesses the entity
   */
  char *identity;
};
#define ACL__ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&acl__entry__descriptor) \
    , ACL__ENTRY_TYPE__ALLOW, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Permissions for the given entry
 */
struct  _Acl__EntryPermissions
{
  ProtobufCMessage base;
  Acl__Entry *entry;
  /*
   * Bitmask of AclPermissions
   */
  uint64_t permission_bits;
};
#define ACL__ENTRY_PERMISSIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&acl__entry_permissions__descriptor) \
    , NULL, 0 }


/* Acl__Response methods */
void   acl__response__init
                     (Acl__Response         *message);
size_t acl__response__get_packed_size
                     (const Acl__Response   *message);
size_t acl__response__pack
                     (const Acl__Response   *message,
                      uint8_t             *out);
size_t acl__response__pack_to_buffer
                     (const Acl__Response   *message,
                      ProtobufCBuffer     *buffer);
Acl__Response *
       acl__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   acl__response__free_unpacked
                     (Acl__Response *message,
                      ProtobufCAllocator *allocator);
/* Acl__Entry methods */
void   acl__entry__init
                     (Acl__Entry         *message);
size_t acl__entry__get_packed_size
                     (const Acl__Entry   *message);
size_t acl__entry__pack
                     (const Acl__Entry   *message,
                      uint8_t             *out);
size_t acl__entry__pack_to_buffer
                     (const Acl__Entry   *message,
                      ProtobufCBuffer     *buffer);
Acl__Entry *
       acl__entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   acl__entry__free_unpacked
                     (Acl__Entry *message,
                      ProtobufCAllocator *allocator);
/* Acl__EntryPermissions methods */
void   acl__entry_permissions__init
                     (Acl__EntryPermissions         *message);
size_t acl__entry_permissions__get_packed_size
                     (const Acl__EntryPermissions   *message);
size_t acl__entry_permissions__pack
                     (const Acl__EntryPermissions   *message,
                      uint8_t             *out);
size_t acl__entry_permissions__pack_to_buffer
                     (const Acl__EntryPermissions   *message,
                      ProtobufCBuffer     *buffer);
Acl__EntryPermissions *
       acl__entry_permissions__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   acl__entry_permissions__free_unpacked
                     (Acl__EntryPermissions *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Acl__Response_Closure)
                 (const Acl__Response *message,
                  void *closure_data);
typedef void (*Acl__Entry_Closure)
                 (const Acl__Entry *message,
                  void *closure_data);
typedef void (*Acl__EntryPermissions_Closure)
                 (const Acl__EntryPermissions *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Acl__AccessControl_Service Acl__AccessControl_Service;
struct _Acl__AccessControl_Service
{
  ProtobufCService base;
  void (*set_permissions)(Acl__AccessControl_Service *service,
                          const Acl__EntryPermissions *input,
                          Acl__Response_Closure closure,
                          void *closure_data);
  void (*get_permissions)(Acl__AccessControl_Service *service,
                          const Acl__Entry *input,
                          Acl__Response_Closure closure,
                          void *closure_data);
  void (*destroy_acl_entry)(Acl__AccessControl_Service *service,
                            const Acl__Entry *input,
                            Acl__Response_Closure closure,
                            void *closure_data);
};
typedef void (*Acl__AccessControl_ServiceDestroy)(Acl__AccessControl_Service *);
void acl__access_control__init (Acl__AccessControl_Service *service,
                                Acl__AccessControl_ServiceDestroy destroy);
#define ACL__ACCESS_CONTROL__BASE_INIT \
    { &acl__access_control__descriptor, protobuf_c_service_invoke_internal, NULL }
#define ACL__ACCESS_CONTROL__INIT(function_prefix__) \
    { ACL__ACCESS_CONTROL__BASE_INIT,\
      function_prefix__ ## set_permissions,\
      function_prefix__ ## get_permissions,\
      function_prefix__ ## destroy_acl_entry  }
void acl__access_control__set_permissions(ProtobufCService *service,
                                          const Acl__EntryPermissions *input,
                                          Acl__Response_Closure closure,
                                          void *closure_data);
void acl__access_control__get_permissions(ProtobufCService *service,
                                          const Acl__Entry *input,
                                          Acl__Response_Closure closure,
                                          void *closure_data);
void acl__access_control__destroy_acl_entry(ProtobufCService *service,
                                            const Acl__Entry *input,
                                            Acl__Response_Closure closure,
                                            void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    acl__request_status__descriptor;
extern const ProtobufCEnumDescriptor    acl__permissions__descriptor;
extern const ProtobufCEnumDescriptor    acl__entry_type__descriptor;
extern const ProtobufCEnumDescriptor    acl__flags__descriptor;
extern const ProtobufCMessageDescriptor acl__response__descriptor;
extern const ProtobufCMessageDescriptor acl__entry__descriptor;
extern const ProtobufCMessageDescriptor acl__entry_permissions__descriptor;
extern const ProtobufCServiceDescriptor acl__access_control__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_acl_2eproto__INCLUDED */
