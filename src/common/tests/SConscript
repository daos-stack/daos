"""Build doas common tests"""
import daos_build
from prereq_tools import GitRepoRetriever

def define_checksum_timing(build, env, prereqs):
    """Define the Checksum Timing build"""
    checksum_timing_libs = ['daos_common']
    AddOption('--mchecksum',
              dest='mchecksum',
              action='store_true',
              default=False,
              help='Include mchecksum library')
    if GetOption("mchecksum"):
        prereqs.define('mchecksum',
                       retriever=GitRepoRetriever("https://github.com/"
                                                  "mercury-hpc/"
                                                  "mchecksum.git"),
                       commands=['cmake -DBUILD_SHARED_LIBS=ON $MCHECKSUM_SRC '
                                 '-DBUILD_TESTING=ON '
                                 '-DCMAKE_INSTALL_PREFIX=$MCHECKSUM_PREFIX '
                                 '-DMCHECKSUM_ENABLE_COVERAGE=OFF '
                                 '-DMCHECKSUM_ENABLE_VERBOSE_ERROR=ON '
                                 '-DMCHECKSUM_USE_ZLIB=OFF '
                                 '-DCMAKE_INSTALL_RPATH=$MCHECKSUM_PREFIX/lib '
                                 '-DCMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE ',
                                 'make $JOBS_OPT', 'make install'],
                       libs=['mchecksum'],
                       out_of_src_build=True)
        prereqs.require(env, 'mchecksum')
        env.Append(CCFLAGS=['-DMCHECKSUM_SUPPORT=1'])
        checksum_timing_libs += ['mchecksum']

    build.test(env, 'checksum_timing', 'checksum_timing.c',
               LIBS=checksum_timing_libs)


def scons():
    """Execute build"""
    Import('tenv', 'prereqs')

    common_test_utils = tenv.SharedObject(['test_mocks.c', 'test_utils.c'])
    Export('common_test_utils')

    utest_utils = tenv.SharedObject('utest_common.c')
    Export('utest_utils')

    daos_build.test(tenv, 'btree', ['btree.c', utest_utils],
                    LIBS=['daos_common', 'gurt', 'pmemobj', 'cmocka'])
    daos_build.test(tenv, 'umem_test', ['umem_test.c', utest_utils],
                    LIBS=['daos_common', 'gurt', 'pmemobj', 'cmocka'])
    daos_build.test(tenv, 'btree_direct', ['btree_direct.c', utest_utils],
                    LIBS=['daos_common', 'gurt', 'pmemobj', 'cmocka'])
    daos_build.test(tenv, 'other', 'other.c',
                    LIBS=['daos_common', 'gurt', 'cart'])
    daos_build.test(tenv, 'common_test_runner',
                    ['common_test_runner.c', 'daos_checksum_tests.c',
                     'misc_tests.c'],
                    LIBS=['daos_common', 'gurt', 'cart', 'cmocka'])
    daos_build.test(tenv, 'lru', 'lru.c',
                    LIBS=['daos_common', 'gurt', 'cart'])
    daos_build.test(tenv, 'sched', 'sched.c',
                    LIBS=['daos_common', 'gurt', 'cart', 'cmocka'])
    daos_build.test(tenv, 'abt_perf', 'abt_perf.c',
                    LIBS=['daos_common', 'gurt', 'abt'])
    daos_build.test(tenv, 'acl_util_real', 'acl_util_real_tests.c',
                    LIBS=['daos_common', 'gurt', 'cmocka'])
    define_checksum_timing(daos_build, tenv, prereqs)

    unit_env = tenv.Clone()
    # Some syscalls are aliased when fortification is enabled, which makes
    # mocking in unit tests into a headache.
    # The compiler decides this on its own, but let's force the issue.
    unit_env.Append(CCFLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0")

    daos_build.test(unit_env, 'drpc_tests',
                    ['drpc_tests.c', '../drpc.c', '../drpc.pb-c.c',
                     common_test_utils],
                    LIBS=['protobuf-c', 'daos_common', 'gurt', 'cmocka'])
    daos_build.test(unit_env, 'acl_api_tests',
                    source=['acl_api_tests.c', '../acl_api.c'],
                    LIBS=['protobuf-c', 'daos_common', 'gurt', 'cmocka'])
    daos_build.test(unit_env, 'acl_util_tests',
                    source=['acl_util_tests.c', '../acl_util.c'],
                    LIBS=['protobuf-c', 'daos_common', 'gurt', 'cmocka'])

if __name__ == "SCons.Script":
    scons()
