"""Build common libraries"""
import daos_build


def build_dts_library(env):
    """Build libdts library"""
    Import('prereqs')

    denv = env.Clone()

    prereqs.require(denv, 'argobots', 'protobufc')

    if not GetOption('help') and not GetOption('clean'):
        mpi = daos_build.configure_mpi(denv, [])
        if mpi is None:
            print("\nSkipping compilation for tests that need MPI")
            print("Install and load mpich or openmpi\n")
            return

    libraries = ['cmocka', 'daos_tests', 'vos', 'bio', 'abt']

    # Add runtime paths for daos libraries
    denv.AppendUnique(LINKFLAGS=[r'-Wl,-rpath=\$$ORIGIN/daos_srv'])

    denv.AppendUnique(LIBPATH=["../vos"])
    denv.AppendUnique(LIBPATH=["../bio"])

    denv.AppendUnique(CPPPATH=["../tests/suite"])

    dts_lib = daos_build.library(denv, 'libdts', ['dts.c'], LIBS=libraries)
    denv.Install('$PREFIX/lib64/', dts_lib)

def scons():
    """Execute build"""
    Import('env', 'prereqs', 'platform_arm')

    env.AppendUnique(LIBPATH=[Dir('.')])

    control_tgts = [File('control.c')]
    Export('control_tgts')

    # Hack alert, the argobots headers are required but the shared
    # library isn't so add the dependency so the include path
    # is correct, but set _libs to [] so that the library isn't
    # linked in.

    prereqs.require(env, 'pmdk')

    if not platform_arm:
        prereqs.require(env, 'isal')
        prereqs.require(env, 'isal_crypto')

    denv = env.Clone()

    prereqs.require(denv, 'protobufc')
    denv.AppendUnique(LIBS=['cart', 'gurt', 'lz4'])
    common_src = ['debug.c', 'mem.c', 'fail_loc.c', 'lru.c',
                  'misc.c', 'pool_map.c', 'sort.c', 'btree.c', 'prop.c',
                  'btree_class.c', 'tse.c', 'rsvc.c', 'checksum.c',
                  'drpc.c', 'drpc.pb-c.c', 'proc.c',
                  'acl_api.c', 'acl_util.c', 'acl_principal.c', 'cont_props.c',
                  'dedup.c', 'profile.c', 'compression.c', 'compression_isal.c',
                  'compression_qat.c', 'multihash.c', 'multihash_isal.c',
                  'cipher.c', 'cipher_isal.c', 'qat.c']

    common = daos_build.library(denv, 'libdaos_common', common_src)
    denv.Install('$PREFIX/lib64/', common)

    tenv = denv.Clone()
    tenv.AppendUnique(LIBS=['json-c'])

    prereqs.require(tenv, 'argobots')

    tests_lib_src = ['tests_lib.c', 'tests_dmg_helpers.c']
    tests_lib = daos_build.library(tenv, 'libdaos_tests', tests_lib_src)
    tenv.Install('$PREFIX/lib64/', tests_lib)

    SConscript('tests/SConscript', exports='tenv')

    build_dts_library(env)

if __name__ == "SCons.Script":
    scons()
