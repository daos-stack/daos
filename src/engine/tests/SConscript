"""Build daos engine tests"""
import daos_build
import compiler_setup

def scons():
    """Execute build"""
    Import('denv', 'drpc_test_utils')

    unit_env = denv.Clone()
    unit_env.AppendUnique(OBJPREFIX='utest_')

    unit_env.AppendUnique(LINKFLAGS=["-Wl,--wrap=socket", "-Wl,--wrap=connect", "-Wl,--wrap=bind",
                                     "-Wl,--wrap=fcntl", "-Wl,--wrap=listen", "-Wl,--wrap=accept",
                                     "-Wl,--wrap=close", "-Wl,--wrap=sendmsg", "-Wl,--wrap=recvmsg",
                                     "-Wl,--wrap=poll", "-Wl,--wrap=unlink"])

    daos_build.test(unit_env, 'drpc_progress_tests',
                    ['drpc_progress_tests.c', drpc_test_utils,
                     '../drpc_progress.c'],
                    LIBS=['daos_common', 'protobuf-c', 'gurt', 'cmocka'])

    daos_build.test(unit_env, 'drpc_handler_tests',
                    ['drpc_handler_tests.c', drpc_test_utils,
                     '../drpc_handler.c'],
                    LIBS=['daos_common', 'protobuf-c', 'gurt', 'cmocka'])

    daos_build.test(unit_env, 'drpc_listener_tests',
                    ['drpc_listener_tests.c', drpc_test_utils,
                     '../drpc_listener.c'],
                    LIBS=['daos_common', 'protobuf-c', 'gurt', 'cmocka'])

    daos_build.test(unit_env, 'drpc_client_tests',
                    ['drpc_client_tests.c', drpc_test_utils,
                     '../drpc_client.c', '../drpc_ras.c', '../srv.pb-c.c',
                     '../event.pb-c.c'],
                    LIBS=['daos_common', 'protobuf-c', 'gurt', 'cmocka',
                          'uuid', 'pthread', 'abt', 'cart'])

if __name__ == "SCons.Script":
    scons()
