"""Build pydaos client"""
import daos_build

def build_shim_module(env, lib_prefix, version):
    """Build PyDAOS shim module for the specified python version"""

    if GetOption('help'):
        return

    new_env = env.Clone()
    extra_flags = ""

    if version == "2.7":
        tgt_name = 'pydaos_shim_27'

        if not GetOption('clean'):
            new_env.ParseConfig("pkg-config --cflags --libs python2")

    elif version == "3":
        tgt_name = 'pydaos_shim_3'
        extra_flags = " -D__USE_PYTHON3__==1"
        new_env.ParseConfig("pkg-config --cflags --libs python3")
    else:
        raise Exception("Unsupported python version %s" % version)

    new_env.Replace(LIBS=['daos', 'duns'])
    new_env.AppendUnique(LIBPATH=["../dfs"])

    daos_build.clear_icc_env(new_env)

    obj = new_env.SharedObject(tgt_name, 'pydaos_shim.c',
                               CC='gcc -pthread',
                               SHLINKFLAGS=[],
                               SHLIBPREFIX="",
                               CPPFLAGS=extra_flags)
    base = daos_build.library(new_env, target=tgt_name, source=[obj],
                              install_off="../../../..",
                              SHLINK='gcc -pthread -shared',
                              SHLINKFLAGS=[],
                              SHLIBPREFIX="",
                              SHLIBSUFFIX='.so')
    install_path = lib_prefix + "/python" + version + "/site-packages/pydaos"
    new_env.Install(install_path, base)
    # install new wrappers too
    new_env.Install(install_path, "__init__.py")
    new_env.Install(install_path, "pydaos_core.py")
    # install raw wrappers
    install_path += "/raw"
    new_env.Install(install_path, "raw/__init__.py")
    new_env.Install(install_path, "raw/daos_api.py")
    new_env.Install(install_path, "raw/daos_io.py")
    new_env.Install(install_path, "raw/conversion.py")
    new_env.Install(install_path, "raw/daos_cref.py")

def scons():
    """Execute build"""
    Import('env', 'prereqs')

    build_shim_module(env, '$PREFIX/lib64/', "3")

    # Python 2.7 is optional. If python 2.7 is not found. We skip the targets
    # that rely on python 2.7
    if prereqs.check_component('python27_devel'):
        build_shim_module(env, '$PREFIX/lib64/', "2.7")


if __name__ == "SCons.Script":
    scons()
