"""Build tests"""
import daos_build
import os
from os.path import join, isdir

def check_dir_exists(path):
    """
    Check if path points to an existing directory. If it is a file but not a
    directory, delete it.
    """
    if not isdir(path):
        # Not a directory - clear out any file
        if os.path.exists(path):
            os.unlink(path)
        return False
    return True

def scons():
    """Execute build"""
    Import('env', 'prereqs')

    libs = ['daos', 'daos_common', 'gurt', 'cart',
            'mpi', 'uuid', 'cmocka']

    denv = env.Clone()

    # Add runtime paths for daos libraries
    denv.AppendUnique(RPATH=[Literal(r'\$$ORIGIN/../lib64/daos_srv')])

    denv.Append(CPPPATH=[Dir('suite').srcnode()])
    prereqs.require(denv, 'ompi', 'argobots')

    daos_build.program(denv, 'simple_array', 'simple_array.c', LIBS=libs)
    daosbench = daos_build.program(denv, 'daosbench', 'daosbench.c', LIBS=libs)
    denv.Install('$PREFIX/bin/', daosbench)

    libs += ['vos', 'bio', 'pthread', 'abt', 'daos_tests']

    dts_common = denv.Object('dts_common.c')
    daos_perf = daos_build.program(denv, 'daos_perf',
                                   ['daos_perf.c', dts_common], LIBS=libs)
    denv.Install('$PREFIX/bin/', daos_perf)

    obj_ctl = daos_build.program(denv, 'obj_ctl', ['obj_ctl.c', dts_common],
                                 LIBS=libs)
    denv.Install('$PREFIX/bin/', obj_ctl)

    # link $PREFIX/install/lib/daos/TESTING to src/tests/ftest
    tpath = join(denv.subst("$PREFIX"), "lib/daos/TESTING/ftest")
    # copy ftest to $PREFIX/install/lib/daos/TESTING
    spath = join(denv.subst("$PREFIX"), "../src/tests/ftest/")
    # denv.InstallAs('$PREFIX/lib/daos/TESTING/ftest/', spath)
    if not check_dir_exists(tpath):
        os.symlink(spath, tpath)

    # tests
    SConscript('suite/SConscript', exports=['denv'])

    # Build daosctl
    SConscript('daosctl/SConscript')

    # Build drpc_test
    SConscript('drpc/SConscript')

    # Build security_test
    SConscript('security/SConscript')

if __name__ == "SCons.Script":
    scons()
