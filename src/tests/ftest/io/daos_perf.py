#!/usr/bin/python
'''
  (C) Copyright 2019 Intel Corporation.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
  The Government's rights to use, modify, reproduce, release, perform, display,
  or disclose this software are subject to the terms of the Apache License as
  provided in Contract No. B609815.
  Any reproduction of computer software, computer software documentation, or
  portions thereof marked with this legend must also reproduce the markings.
'''
from __future__ import print_function

import os
import json

from apricot import TestWithServers

import agent_utils
import server_utils
import write_host_file
import daos_perf_utils
from daos_api import DaosContext, DaosPool, DaosApiError

class DaosPerf(TestWithServers):
    """
    Tests daos_perf with different config.
    :avocado: recursive
    """
    def setUp(self):
        super(DaosPerf, self).setUp()

        #set client variables
        self.hostfile_clients = (
            write_host_file.write_host_file(self.hostlist_clients,
                                            self.workdir, None))
        # get paths from the build_vars generated by build
#        with open('../../../.build_vars.json') as build_file:
#            build_paths = json.load(build_file)
#        self.basepath = os.path.normpath(build_paths['PREFIX'] + "/../")
#
#        self.server_group = self.params.get("name", '/server_config/',
#                                            'daos_server')
#        self.daosctl = self.basepath + '/install/bin/daosctl'
#
#        # setup the DAOS python API
#        self.context = DaosContext(build_paths['PREFIX'] + '/lib/')
#        self.pool = None
#
#        self.hostlist_servers = self.params.get("test_servers",
#                                                '/run/hosts/test_machines/*')
#        self.hostfile_servers = (
#            write_host_file.write_host_file(self.hostlist_servers,
#                                            self.workdir))
#        print("Host file servers is: {}".format(self.hostfile_servers))
#
#        self.hostlist_clients = self.params.get("test_clients",
#                                                '/run/hosts/test_machines/*')
#        self.hostfile_clients = (
#            write_host_file.write_host_file(self.hostlist_clients,
#                                            self.workdir, None))
#        print("Host file clientsis: {}".format(self.hostfile_clients))
#
#        self.agent_sessions = agent_utils.run_agent(self.basepath,
#                                                    self.hostlist_servers,
#                                                    self.hostlist_clients)
#        server_utils.run_server(self.hostfile_servers, self.server_group,
#                                self.basepath)
#
    def tearDown(self):
        try:
#            if self.hostfile_clients is not None:
#                os.remove(self.hostfile_clients)
#            if self.hostfile_servers is not None:
#                os.remove(self.hostfile_servers)
            if self.pool is not None and self.pool.attached:
                self.pool.destroy(1)
        finally:
             super(DaosPerf, self).tearDown()
#            if self.agent_sessions:
#                agent_utils.stop_agent(self.agent_sessions,
#                                       self.hostlist_clients)
#            server_utils.stop_server(hosts=self.hostlist_servers)
#
    def test_daos_perf(self):
        """
        Test daosPerf with different config.

        :avocado: tags=daosperf
        """

        # parameters used in pool create
        #createmode = self.params.get("mode", '/run/createtests/createmode/*/')
        #createuid = os.geteuid()
        #creategid = os.getegid()
        #createsetid = self.params.get("setname", '/run/createtests/createset/')
        #createsize = self.params.get("size", '/run/createtests/createsize/')
        #createsvc = self.params.get("svcn", '/run/createtests/createsvc/')

        # daos_perf parameters
        client_processes = self.params.get("np", '/run/daos_perf/client_processes/*/')
        pool_size_scm = self.params.get("size", '/run/daos_perf/pool_size_scm/')
        daos_perf_flags = self.params.get("flags", '/run/daos_perf/value_type/*/')
        single_value_size = self.params.get("value_size",
                                        '/run/daos_perf/single_value_size/')
        num_of_obj = self.params.get("obj", '/run/daos_perf/number_of_objects/')
        num_of_dkeys = self.params.get("dkeys", '/run/daos_perf/value_type/*/')
        num_of_akeys = self.params.get("akeys", '/run/daos_perf/value_type/*/')
        num_of_recs = self.params.get("records", '/run/daos_perf/value_type/*/')
        object_class = self.params.get("o", '/run/daos_perf/objectclass/')

        try:
            # initialize a python pool object then create the underlying
            # daos storage
            #self.pool = DaosPool(self.context)
            #self.pool.create(createmode, createuid, creategid,
            #                 createsize, createsetid, None, None, createsvc)
            #pool_uuid = self.pool.get_uuid_str()
            #print ("pool_uuid: {}".format(pool_uuid))
            #tmp_rank_list = []
            #svc_list = ""
            #for item in range(createsvc):
            #    tmp_rank_list.append(int(self.pool.svc.rl_ranks[item]))
            #    svc_list += str(tmp_rank_list[item]) + ":"
            #svc_list = svc_list[:-1]

            #daos_perf_utils.run_ior_daos(self.hostfile_clients, ior_flags, iteration,
            #                       block_size, transfer_size, pool_uuid,
            #                       svc_list, object_class, self.basepath,
            #                       client_processes)

            daos_perf_cmd = daos_perf_utils.DaosPerfCommand()
            #daos_perf_cmd.num_tasks.value = client_processes
            daos_perf_cmd.pool_size_scm.value = pool_size_scm
            daos_perf_cmd.flags.value = daos_perf_flags
            daos_perf_cmd.single_value_size.value = single_value_size
            daos_perf_cmd.num_of_objects.value = num_of_obj
            daos_perf_cmd.dkeys.value = num_of_dkeys
            daos_perf_cmd.akeys.value = num_of_akeys
            daos_perf_cmd.records.value = num_of_recs
            daos_perf_cmd.oclass.value = object_class

            daos_perf_cmd.run(self.basepath, client_processes, self.hostfile_clients)

            # Parsing output to look for failures
            # stderr directed to stdout
            stdout = self.logdir + "/stdout"
            searchfile = open(stdout, "r")
            error_message = ["non-zero exit code", "errors",
                             "Failed", "failed"]

            for line in searchfile:
                for i in xrange(len(error_message)):
                    if error_message[i] in line:
                        self.fail("DaosPerf Test Failed with error_message: "
                                  "{}".format(line))
        except (daos_perf_utils.DaosPerfFailed) as excep:
            self.fail("<DaosPerf Test FAILED>\n {}".format(excep))
