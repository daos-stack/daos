hosts:
  test_servers: server-[1-2]
  test_clients: 2
# If we define the server under test_servers, launch.py will convert it to the
# actual server name passed into --test_servers. If above test_servers is hosts,
# it'll be used as one of the servers at test startup time, so use something
# other than hosts.
extra_servers:
  test_servers: server-[3-5]
timeout: 1000
setup:
  start_servers_once: false
server_config:
  name: daos_server
  engines_per_host: 2
  engines:
    0:
      pinned_numa_node: 0
      nr_xs_helpers: 1
      fabric_iface: ib0
      fabric_iface_port: 31416
      log_file: daos_server0.log
      storage: auto
    1:
      pinned_numa_node: 1
      nr_xs_helpers: 1
      fabric_iface: ib1
      fabric_iface_port: 31516
      log_file: daos_server1.log
      storage: auto
pool:
  svcn: 4
  control_method: dmg
  rebuild_timeout: 120
  pool_query_timeout: 30
pool_qty_1:
  size: "50%"
pool_qty_2:
  size: "25%"
pool_qty_3:
  size: "16%"
container:
  type: POSIX
  control_method: daos
  properties: cksum:crc16,cksum_size:16384,srv_cksum:on,rd_fac:1
ior_flags_common: &ior_flags_common
  write_flags: "-w -F -k -G 1"
  read_flags: "-F -r -R -k -G 1"
  api: DFS
  ior_test_sequence:
    #   - [scm_size, nvme_size, transfersize, blocksize]
    #    The values are set to be in the multiples of 10.
    #    Values are appx GB.
    - ["NA", "NA", 4000, 5000000]          # [4K, 5.1M]
    - ["NA", "NA", 1000000, 500000000]      # [1M, 512M]
    - ["NA", "NA", 1000000000, 8000000000]  # [1G, 8G]
ior:
  client_processes:
    np: 48
  test_file: /testFile
  repetitions: 5
  dfs_destroy: false
  iorflags: !mux
    rp_2g4:
      <<: *ior_flags_common
      dfs_oclass: RP_2G4
      dfs_dir_oclass: RP_2G4
    ec_2p1gx:
      <<: *ior_flags_common
      dfs_oclass: EC_2P1GX
      dfs_dir_oclass: EC_2P1GX
loop_test:
  iterations: 3
aggregation:
  test_with_aggregation: true
rebuild:
  test_with_rebuild: true
checksum:
  test_with_checksum: false
