#!/usr/bin/python
"""
  (C) Copyright 2018-2019 Intel Corporation.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
  The Government's rights to use, modify, reproduce, release, perform, display,
  or disclose this software are subject to the terms of the Apache License as
  provided in Contract No. B609815.
  Any reproduction of computer software, computer software documentation, or
  portions thereof marked with this legend must also reproduce the markings.
"""

import sys
import os
import json
import subprocess
from avocado import Test

sys.path.append('../util')
sys.path.append('../../../utils/py')
sys.path.append('./util')
sys.path.append('./../../utils/py')

import AgentUtils
import server_utils
import write_host_file
from daos_api import DaosContext, DaosLog

class CartSelfTest(Test):
    """
    Runs a few variations of CaRT self-test to ensure network is in a
    stable state prior to testing.
    """

    # start servers, establish file locations, etc.
    def setUp(self):
        self.agent_sessions = None
        # get paths from the build_vars generated by build
        with open(os.path.join(os.path.dirname(os.path.realpath(__file__)),
                               "../../../../.build_vars.json")) as build_file:
            build_paths = json.load(build_file)
        self.basepath = os.path.normpath(build_paths['PREFIX'] + "/../")

        self.hostlist = self.params.get("test_machines", '/run/hosts/')
        self.hostfile = write_host_file.write_host_file(self.hostlist,
                                                        self.workdir)

        context = DaosContext(build_paths['PREFIX'] + '/lib/')
        self.d_log = DaosLog(context)

        # self_test params
        self.self_test_bin = os.path.join(build_paths["CART_PREFIX"],
                                          "bin/self_test")
        self.orterun = os.path.join(build_paths["OMPI_PREFIX"], "bin/orterun")
        self.endpoint = self.params.get("endpoint", "/run/testparams/")
        self.max_rpcs = self.params.get("max_inflight_rpcs", "/run/testparams/")
        self.repetitions = self.params.get("repetitions", "/run/testparams/")
        self.message_size = (
            self.params.get("size", "/run/muxtestparams/message_size/*")[0])
        self.share_addr = self.params.get("val",
                                          "/run/muxtestparams/share_addr/*")[0]
        self.env_dict = {
            "CRT_PHY_ADDR_STR":     "ofi+sockets",
            "CRT_CTX_NUM":          "8",
            "OFI_INTERFACE":        "eth0",
            "CRT_CTX_SHARE_ADDR":   str(self.share_addr)
        }
        self.env_list = []
        for key, val in self.env_dict.items():
            self.env_list.append("-x")
            self.env_list.append("{0}={1}".format(key, val))

        # daos server params
        self.server_group = self.params.get("name", 'server_config',
                                            'daos_server')
        self.uri_file = os.path.join(self.basepath, "install", "tmp", "uri.txt")
        self.agent_sessions = AgentUtils.run_agent(self.basepath, self.hostlist)
        server_utils.run_server(self.hostfile, self.server_group, self.basepath,
                                uri_path=self.uri_file, env_dict=self.env_dict)

    def tearDown(self):
        try:
            os.remove(self.hostfile)
            os.remove(self.uri_file)
        finally:
            if self.agent_sessions:
                AgentUtils.stop_agent(self.hostlist, self.agent_sessions)
            server_utils.stop_server(hosts=self.hostlist)

    def test_self_test(self):
        """
        Run a few CaRT self-test scenarios

        :avocado: tags=network,small,quick,cartselftest
        """
        base_cmd = [self.orterun,
                    "-np", "1",
                    "-ompi-server", "file:{0}".format(self.uri_file)]
        selftest = [self.self_test_bin,
                    "--group-name", "{0}".format(self.server_group),
                    "--endpoint", "{0}".format(self.endpoint),
                    "--message-sizes", "{0}".format(self.message_size),
                    "--max-inflight-rpcs", "{0}".format(self.max_rpcs),
                    "--repetitions", "{0}".format(self.repetitions)]

        cmd = base_cmd + self.env_list + selftest

        cmd_log_str = ""
        for elem in cmd:
            cmd_log_str += elem + " "
        try:
            self.d_log.info("Running cmd {0}".format(cmd_log_str))
            subprocess.check_output(cmd, stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as exc:
            self.d_log.error("CaRT self_test returned non-zero. "
                             "rc {0}:".format(exc.returncode))
            for line in exc.output.split('\n'):
                self.d_log.error("{0}".format(line))
            self.fail("CaRT self_test returned non-zero")
