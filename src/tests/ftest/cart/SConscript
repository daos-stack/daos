# /*
#  * (C) Copyright 2016-2023 Intel Corporation.
#  *
#  * SPDX-License-Identifier: BSD-2-Clause-Patent
# */
"""Build crt tests"""

import os

SIMPLE_TEST_SRC = ['threaded_client.c', 'dual_iface_server.c',
                   'no_pmix_multi_ctx.c', 'threaded_server.c',
                   'test_corpc_prefwd.c',
                   'test_corpc_exclusive.c',
                   'test_proto_server.c', 'test_proto_client.c',
                   'test_multisend_server.c', 'test_multisend_client.c',
                   'test_no_timeout.c', 'test_ep_cred_server.c',
                   'test_ep_cred_client.c', 'no_pmix_launcher_server.c',
                   'no_pmix_launcher_client.c', 'no_pmix_group_test.c',
                   'test_rpc_to_ghost_rank.c', 'no_pmix_corpc_errors.c']
BASIC_SRC = 'crt_basic.c'
IV_TESTS = ['iv_client.c', 'iv_server.c']
# TEST_RPC_ERR_SRC = 'test_rpc_error.c'
# CRT_RPC_TESTS = ['rpc_test_cli.c', 'rpc_test_srv.c', 'rpc_test_srv2.c']
SWIM_TESTS = ['test_swim.c', 'test_swim_net.c', 'test_swim_emu.c']
HLC_TESTS = ['test_hlc_net.c']
TEST_GROUP_NP_TESTS = ['test_group_np_srv.c', 'test_group_np_cli.c', 'no_pmix_group_version.c']
FAULT_STATUS_TEST = 'fault_status.c'


def scons():
    """scons function"""

    Import('env', 'cart_utils_objs')

    ##############################
    # Create test programs
    ##############################
    tenv = env.Clone()

    tenv.AppendUnique(LIBS=['cart', 'gurt', 'pthread', 'm'])
    tenv.AppendUnique(LIBS=['daos', 'daos_common'])
    tenv.AppendUnique(CPPPATH=[Dir('../../../cart/utils').srcnode()])
    tenv.require('crypto', 'mercury', 'protobufc')

    tests_dir = os.path.join("$PREFIX", 'lib', 'daos', 'TESTING', 'tests')
    # Compile all of the tests
    for test in SIMPLE_TEST_SRC:
        target = tenv.d_test_program([test, cart_utils_objs], install_off='../../../../')
        tenv.Install(tests_dir, target)

    for test in IV_TESTS:
        target = tenv.d_test_program([test, cart_utils_objs], install_off='../../../../')
        tenv.Install(tests_dir, target)

    for test in SWIM_TESTS:
        target = tenv.d_test_program([test, cart_utils_objs], install_off='../../../../')
        tenv.Install(tests_dir, target)

    for test in HLC_TESTS:
        target = tenv.d_test_program([test, cart_utils_objs], install_off='../../../../')
        tenv.Install(tests_dir, target)

    for test in TEST_GROUP_NP_TESTS:
        target = tenv.d_test_program([test, cart_utils_objs], install_off='../../../../')
        tenv.Install(tests_dir, target)

    # Build FAULT_STATUS_TEST separately and install it into bin/
    target = tenv.d_test_program(FAULT_STATUS_TEST)
    tenv.Install(os.path.join("$PREFIX", 'bin'), target)

    benv = tenv.Clone()

    benv.AppendUnique(CFLAGS=['-std=gnu99', '-pedantic'])
    basic_target = tenv.d_test_program(BASIC_SRC)
    Depends(basic_target, [cart_utils_objs])

    # Call scons on unit test directory
    SConscript('utest/SConscript')


if __name__ == "SCons.Script":
    scons()
