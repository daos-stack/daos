#!python
# (C) Copyright 2016-2020 Intel Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
# The Government's rights to use, modify, reproduce, release, perform, display,
# or disclose this software are subject to the terms of the Apache License as
# provided in Contract No. 8F-30005.
# Any reproduction of computer software, computer software documentation, or
# portions thereof marked with this legend must also reproduce the markings.
#
"""Unit tests"""

import os
import daos_build

TEST_SRC = ['test_linkage.cpp', 'utest_hlc.c', 'utest_swim.c']
LIBPATH = [Dir('../../'), Dir('../../../gurt')]

def scons():
    """Scons function"""
    if GetOption('help'):
        return

    # pylint: disable=too-many-locals
    Import('env', 'prereqs', 'cart_targets', 'swim_targets', 'gurt_targets')
    Import('cart_lib')
    # pylint: enable=too-many-locals

    #Use full path to wrap_cmocka.h for configure test.  Since standalone
    #cmocka header can't be included without including other headers,
    #this test can't be generalized
    env.AppendUnique(CPPPATH=[Dir('.')])
    wrap_cmocka = os.path.join(Dir('.').srcnode().abspath, 'wrap_cmocka.h')
    prereqs.define('cmockawrap', headers=[wrap_cmocka], libs=['cmocka'],
                   package='libcmocka-devel')
    if not prereqs.check_component('cmocka'):
        print("\n***************************************************")
        print("libcmocka-devel package needed to enable unit tests")
        print("***************************************************\n")
        # Just returning is the desired behavior here.  The utest target
        # has yet to be defined so the build will just fail.
        return

    test_env = env.Clone()
    prereqs.require(test_env, "mercury", "uuid", "cmocka")
    test_env.AppendUnique(LIBS=['pthread'])
    test_env.AppendUnique(CPPPATH=['../../../include'])
    test_env.AppendUnique(CXXFLAGS=['-std=c++0x'])
    test_env.AppendUnique(LIBPATH=LIBPATH)
    test_env.AppendUnique(RPATH_FULL=LIBPATH)
    tests = []

    for test in TEST_SRC:
        flags = []
        testobj = test_env.Object(test)
        testname = os.path.splitext(test)[0]
        testprog = daos_build.test(test_env, target=testname,
                                   source=testobj + cart_targets +
                                   swim_targets + gurt_targets,
                                   LIBS=test_env["LIBS"] + ['yaml'],
                                   LINKFLAGS=flags)
        tests.append(testprog)

    test_env.Requires(tests, cart_lib)
    Default(tests)

if __name__ == "SCons.Script":
    scons()
