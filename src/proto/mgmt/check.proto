//
// (C) Copyright 2022-2023 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

syntax = "proto3";
package mgmt;

option go_package = "github.com/daos-stack/daos/src/control/common/proto/mgmt";

import "chk/chk.proto";

// Check Protobuf Definitions related to interactions between
// DAOS control server and DAOS check via dRPC.

// The pairs for kinds of inconsistency and related repair action. The control plane need to
// generate such policy array from some configuration file either via command line option or
// some default location, such as /etc/daos/daos_check.yml. Such policy arrge will be passed
// to DAOS engine when start check and cannot changed during check scanning, but can be list
// via 'dmg check prop' - see CheckPropResp.
message CheckInconsistPolicy {
	chk.CheckInconsistClass inconsist_cas = 1; // See CheckInconsistClass.
	chk.CheckInconsistAction inconsist_act = 2; // See CheckInconsistAction.
}

message CheckEnableReq {
	string sys = 1;
}

message CheckDisableReq {
	string sys = 1;
}

// For 'dmg check start'.
message CheckStartReq {
	string sys = 1; // DAOS system identifier.
	uint32 flags = 2; // See CheckFlag.
	// The list of ranks to start DAOS check. Cannot be empty.
	//
	// The control plane will generate the ranks list and guarantee that any rank in the system
	// is either will participate in check or has been excluded. Otherwise, partial ranks check
	// may cause some unexpected and unrecoverable result unless the specified pool(s) does not
	// exist on those missed rank(s).
	repeated uint32 ranks = 3;
	// UUID for the pools for which to start DAOS check.
	// If empty, then start DAOS check for all pools in the system.
	repeated string uuids = 4;
	repeated CheckInconsistPolicy policies = 5; // Policy array for handling inconsistency.
}

// CheckStartResp returns the result of check start.
message CheckStartResp {
	int32 status = 1; // DAOS error code.
}

// For 'dmg check stop'.
message CheckStopReq {
	string sys = 1; // DAOS system identifier.
	// UUID for the pools for which to stop DAOS check.
	// If empty, then stop check for all pools in the system.
	repeated string uuids = 2;
}

// CheckStopResp returns the result of check stop.
message CheckStopResp {
	int32 status = 1; // DAOS error code.
}


// For 'dmg check query'.
message CheckQueryReq {
	string sys = 1; // DAOS system identifier.
	// UUID for the pools for which to query DAOS check.
	// If empty, then query DAOS check for all pools in the system.
	repeated string uuids = 2;
	bool shallow = 3; // shallow query (findings only)
	repeated uint64 seqs = 4; // return findings with these sequences (implies shallow)
}

// Time information on related component: system, pool or target.
message CheckQueryTime {
	uint64 start_time = 1; // The time of check instance being started on the component.
	// If the check instance is still running on the component, then it is the estimated
	// remaining time to complete the check on the component. Otherwise, it is the time
	// of the check instance completed, failed or stopped on the component.
	uint64 misc_time = 2;
}

// Inconsistency statistics on related component: system, pool or target.
message CheckQueryInconsist {
	uint32 total = 1; // The count of total found inconsistency on the component.
	uint32 repaired = 2; // The count of repaired inconsistency on the component.
	uint32 ignored = 3; // The count of ignored inconsistency on the component.
	uint32 failed = 4; // The count of fail to repaired inconsistency on the component.
}

// Check query result for the pool shard on the target.
message CheckQueryTarget {
	uint32 rank = 1; // Rank ID.
	uint32 target = 2; // Target index in the rank.
	chk.CheckInstStatus status = 3; // Check instance status on this target - see CheckInstStatus.
	// Inconsistency statistics during the phases range
	// [CSP_DTX_RESYNC, CSP_AGGREGATION] for the pool shard on the target.
	CheckQueryInconsist inconsistency = 4;
	// Time information for the pool shard on the target if applicable.
	CheckQueryTime time = 5;
}

// Check query result for the pool.
message CheckQueryPool {
	string uuid = 1; // Pool UUID.
	chk.CheckPoolStatus status = 2; // Pool status - see CheckPoolStatus.
	chk.CheckScanPhase phase = 3; // Scan phase - see CheckScanPhase.
	// Inconsistency statistics during the phases range
	// [CSP_POOL_MBS, CSP_CONT_CLEANUP] for the pool.
	CheckQueryInconsist inconsistency = 4;
	// Time information for the pool if applicable.
	CheckQueryTime time = 5;
	// Per target based query result for the phases since CSP_DTX_RESYNC.
	repeated CheckQueryTarget targets = 6;
}

// CheckQueryResp returns DAOS check status for required pool(s) or the whole system.
// Depend on the dmg command line option, the control plane needs to reorganize the query
// results with summary (of pool shards from targets) and different detailed information.
message CheckQueryResp {
	int32 req_status = 1; // DAOS error code.
	// The whole check instance status depends on the each engine status:
	// As long as one target is in CIS_RUNNING, then the instance is CIS_RUNNING.
	// Otherwise, in turn with the status of CIS_FAILED, CIS_STOPPED, CIS_IMPLICATED,
	// CIS_COMPLETED, CIS_PAUSED, CIS_INIT.
	chk.CheckInstStatus ins_status = 2;
	// Scan phase - see CheckScanPhase. Before moving to CSP_POOL_MBS, the check
	// instance status is maintained on the check leader. And then multiple pools
	// can be processed in parallel, so the instance phase for different pools may
	// be different, see CheckQueryPool::phase.
	chk.CheckScanPhase ins_phase = 3;
	// Inconsistency statistics during the phases range
	// [CSP_PREPARE, CSP_POOL_LIST] for the whole system.
	CheckQueryInconsist inconsistency = 4;
	// Time information for the whole system if applicable.
	CheckQueryTime time = 5;
	// Per pool based query result for the phases since CSP_POOL_MBS.
	repeated CheckQueryPool pools = 6;
	// Inconsistency reports to be displayed
	repeated chk.CheckReport reports = 7;
}

// For 'dmg check set-policy'
message CheckSetPolicyReq {
	string sys = 1; // DAOS system identifier.
	uint32 flags = 2; // The flags when start check - see CheckFlag.
	repeated CheckInconsistPolicy policies = 3; // Inconsistency policy array.
}

// To allow daos_server to query check leader properties
message CheckPropReq {
	string sys = 1; // DAOS system identifier.
}

// CheckPropResp returns the result of check prop and the properties when start check.
message CheckPropResp {
	int32 status = 1; // DAOS error code.
	uint32 flags = 2; // The flags when start check - see CheckFlag.
	repeated CheckInconsistPolicy policies = 3; // Inconsistency policy array.
}

// For 'dmg check get-policy'
message CheckGetPolicyReq {
	string sys = 1; // DAOS system identifier.
	repeated chk.CheckInconsistClass classes = 2;
	bool last_used = 3;
}

// CheckGetPolicyResp returns the result of check prop and the properties when start check.
// NB: Dupe of CheckPropResp currently; may consolidate if they don't diverge.
message CheckGetPolicyResp {
	int32 status = 1; // DAOS error code.
	uint32 flags = 2; // The flags when start check - see CheckFlag.
	repeated CheckInconsistPolicy policies = 3; // Inconsistency policy array.
}

// For the admin's decision from DAOS check interaction.
message CheckActReq {
	string sys = 1; // DAOS system identifier.
	// DAOS RAS event sequence - see RASEvent::extended_info::check_info::chk_inconsist_seq.
	uint64 seq = 2;
	// The decision from RASEvent::extended_info::check_info::chk_opts.
	chk.CheckInconsistAction act = 3;
	bool for_all = 4; // The same action is applicable to the same type of inconsistency.
}

// CheckActResp returns the result of executing admin's decision.
message CheckActResp {
	int32 status = 1; // DAOS error code.
}
