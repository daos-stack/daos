//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package mgmt;

import "storage.proto";
import "srv.proto";

// This is the main service definition for communications involving the
// gRPC management server. In order to add RPCs associated with your
// service add them in the ManagementService definition below.
service MgmtControl {
	rpc GetFeature(FeatureName) returns (Feature) {};
	rpc ListAllFeatures(EmptyParams) returns (stream Feature) {};
	rpc ListFeatures(Category) returns (stream Feature) {};
	rpc ListNvmeCtrlrs(EmptyParams) returns (stream NvmeController) {};
	rpc UpdateNvmeCtrlr(UpdateNvmeParams) returns (NvmeController) {};
	rpc FetchFioConfigPaths(EmptyParams) returns (stream FioConfigPath) {};
	rpc BurnInNvme(BurnInNvmeParams) returns (stream BurnInNvmeReport) {};
	rpc ListScmModules(EmptyParams) returns (stream ScmModule) {};
	rpc FormatStorage(FormatStorageParams) returns (FormatStorageResponse) {};
	rpc KillRank(DaosRank) returns (DaosResponse) {}; // Kill server of rank
}
