//
// (C) Copyright 2018-2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package mgmt;

// Management Service Protobuf Definitions related to interactions between
// DAOS control server and DAOS IO Servers.

// Generic response just containing DER from IO server.
message DaosResp {
	int32 status = 1;	// DAOS error code.
}

message JoinReq {
	string uuid = 1;	// Servee UUID.
	uint32 rank = 2;	// Server rank desired, if not -1.
	string uri = 3;		// Server CaRT base URI (i.e., for context 0).
	uint32 nctxs = 4;	// Server CaRT context count.
	string addr = 5;	// Server management address.
}

message JoinResp {
	int32 status = 1;	// DAOS error code
	uint32 rank = 2;	// Server rank assigned.
	enum State {
		IN = 0;		// Server in the system.
		OUT = 1;	// Server excluded from the system.
	}
	State state = 3;	// Server state in the system map.
}

message LeaderQueryReq {
	string system = 1;		// System name.
}

message LeaderQueryResp {
	string currentLeader = 1;
	repeated string replicas = 2;
}

message GetAttachInfoReq {
	string sys = 1;		// System name. For daos_agent only.
}

message GetAttachInfoResp {
	int32 status = 1;	// DAOS error code
	message Psr {
		uint32 rank = 1;
		string uri = 2;
	}
	repeated Psr psrs = 2;	// CaRT PSRs of the system group.
}

message PrepShutdownReq {
	uint32 rank = 1;	// DAOS IO server unique identifier.
}

// PrepShutdownResp is identical to DaosResp.

message KillRankReq {
	bool force = 1;		// Force service termination.
	uint32 rank = 2;	// DAOS IO server unique identifier.
}

// KillRankResp is identical to DaosResp.

message PingRankReq {
	uint32 rank = 1;	// DAOS IO server unique identifier.
}

// PingRankResp is identical to DaosResp.

message StartRanksReq {
	repeated uint32 ranks = 1; // Start each of the ranks supplied.
}

message StartRanksResp {
	repeated int32 status = 1; // DER one for each IO server start attempt.
}

message SetRankReq {
	uint32 rank = 1;	// DAOS IO server unique identifier.
}

// SetRankResp is identical to DaosResp.

message CreateMsReq {
	bool bootstrap = 1;	// Bootstrap the DAOS management service (MS).
	string uuid = 2;	// DAOS IO server UUID of this MS replica.
	string addr = 3;	// Control server management address of this MS replica.
}

// CreateMsResp is identical to DaosResp.

// StartMsReq is nil.

// StartMsResp is identical to DaosResp.

// SetUpReq is nil.

// SetUpResp is idential to DaosResp.
