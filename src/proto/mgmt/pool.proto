//
// (C) Copyright 2019-2021 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

syntax = "proto3";
package mgmt;

option go_package = "github.com/daos-stack/daos/src/control/common/proto/mgmt";

// Management Service Protobuf Definitions related to interactions between
// DAOS control server and DAOS pools.

// FaultDomain represents a node in a tree of fault domains. A list of them
// is sufficient to reconstruct the tree.
message FaultDomain {
	string domain = 1; // full domain string
	uint32 id = 2; // numeric ID
	repeated uint32 children = 3; // IDs of children
}

// PoolCreateReq supplies new pool parameters.
message PoolCreateReq {
	string uuid = 1; // UUID for new pool, generated on the client
	string name = 2; // Unique name for pool (optional)
	string sys = 3; // DAOS system identifier
	string user = 4; // formatted user e.g. "bob@"
	string usergroup = 5; // formatted group e.g. "builders@"
	repeated string acl = 6; // Access Control Entries in short string format
	repeated FaultDomain faultDomains = 7; // Fault domains in system
	uint32 numsvcreps = 8; // desired number of pool service replicas
	uint64 totalbytes = 9; // Total pool size in bytes (auto config)
	double scmratio = 10; // Ratio of SCM:NVMe expressed as % (auto config)
	uint32 numranks = 11; // Number of target ranks to use (auto config)
	repeated uint32 ranks = 12; // target ranks (manual config)
	uint64 scmbytes = 13; // SCM size in bytes (manual config)
	uint64 nvmebytes = 14; // NVMe size in bytes (manual config)
}

// PoolCreateResp returns created pool uuid and ranks.
message PoolCreateResp {
	int32 status = 1; // DAOS error code
	repeated uint32 svc_reps = 2; // pool service replica ranks
	repeated uint32 tgt_ranks = 3; // pool target ranks
	uint64 scm_bytes = 4; // total SCM allocated to pool
	uint64 nvme_bytes = 5; // total NVMe allocated to pool
}

// PoolDestroyReq supplies pool identifier and force flag.
message PoolDestroyReq {
	string sys = 1; // DAOS system identifier
	string uuid = 2; // uuid of pool to destroy
	bool force = 3; // destroy regardless of active connections
	repeated uint32 svc_ranks = 4; // List of pool service ranks
}

// PoolDestroyResp returns resultant state of destroy operation.
message PoolDestroyResp {
	int32 status = 1; // DAOS error code
}

// PoolEvictReq supplies pool identifier.
message PoolEvictReq {
	string sys = 1; // DAOS system identifier
	string uuid = 2; // uuid of pool to evict
	repeated uint32 svc_ranks = 3; // List of pool service ranks
	repeated string handles = 4; // Optional list of handles to evict
}

// PoolEvictResp returns resultant state of evict operation.
message PoolEvictResp {
	int32 status = 1; // DAOS error code
}

// PoolExcludeReq supplies pool identifier, rank, and target_idxs.
message PoolExcludeReq {
	string sys = 1; // DAOS system identifier
	string uuid = 2; // uuid of pool to add target up to
	uint32 rank = 3; // target to move to the up state
	repeated uint32 targetidx = 4; // target ranks
	repeated uint32 svc_ranks = 5; // List of pool service ranks
}

// PoolExcludeResp returns resultant state of Exclude operation.
message PoolExcludeResp {
	int32 status = 1; // DAOS error code
}

// PoolDrainReq supplies pool identifier, rank, and target_idxs.
message PoolDrainReq {
	string sys = 1; // DAOS system identifier
	string uuid = 2; // uuid of pool to add target up to
	uint32 rank = 3; // rank to move to the up state
	repeated uint32 targetidx = 4; // rank targets
	repeated uint32 svc_ranks = 5; // List of pool service ranks
}

// PoolDrainResp returns resultant state of Drain operation.
message PoolDrainResp {
	int32 status = 1; // DAOS error code
}

// PoolExtendReq supplies pool identifier and rank list.
message PoolExtendReq {
	string sys = 1; // DAOS system identifier
	string uuid = 2; // uuid of pool to add target up to
	repeated uint32 ranks = 3; // ranks
	repeated uint32 svc_ranks = 4; // List of pool service ranks
	uint64 scmbytes = 5; // SCM size in bytes
	uint64 nvmebytes = 6; // NVMe size in bytes
	repeated FaultDomain faultDomains = 7; // fault domains in system
}

// PoolExtendResp returns resultant state of Extend operation.
message PoolExtendResp {
	int32 status = 1; // DAOS error code
}

// PoolReintegrateReq supplies pool identifier, rank, and target_idxs.
message PoolReintegrateReq {
	string sys = 1; // DAOS system identifier
	string uuid = 2; // uuid of pool to add target up to
	uint32 rank = 3; // target to move to the up state
	repeated uint32 targetidx = 4; // target ranks
	repeated uint32 svc_ranks = 5; // List of pool service ranks
}

// PoolReintegrateResp returns resultant state of Reintegrate operation.
message PoolReintegrateResp {
	int32 status = 1; // DAOS error code
}

// ListPoolsReq represents a request to list pools on a given DAOS system.
message ListPoolsReq {
	string sys = 1; // DAOS system identifier
}

// ListPoolsResp returns the list of pools in the system.
message ListPoolsResp {
	message Pool {
		string uuid = 1; // uuid of pool
		repeated uint32 svc_reps = 2; // pool service replica ranks
	}
	int32 status = 1; // DAOS error code
	repeated Pool pools = 2; // pools list
}

// PoolResolveIDReq contains the parameters to resolve a user-friendly pool ID
// to a UUID for use in API requests.
message PoolResolveIDReq {
	string sys = 1; // DAOS system identifier
	string humanID = 2; // Unique pool identifier
}

// PoolResolveIDResp returns the pool UUID resolved from the request parameters.
message PoolResolveIDResp {
	string uuid = 1; // Pool UUID to be used for API requests
}

// ListContainers
// Initial implementation differs from C API
// (numContainers not provided in request - get whole list)
message ListContReq {
	string sys = 1; // DAOS system identifier
	string uuid = 2; // uuid of pool
	repeated uint32 svc_ranks = 3; // List of pool service ranks
}

message ListContResp {
	message Cont {
		string uuid = 1; // uuid of container
	}
	int32 status = 1; // DAOS error code
	repeated Cont containers = 2; // containers
}

// PoolQueryReq represents a pool query request.
message PoolQueryReq {
	string sys = 1; // DAOS system identifier
	string uuid = 2;
	repeated uint32 svc_ranks = 3; // List of pool service ranks
}

// StorageUsageStats represents usage statistics for a storage subsystem.
message StorageUsageStats {
	uint64 total = 1;
	uint64 free = 2;
	uint64 min = 3;
	uint64 max = 4;
	uint64 mean = 5;
}

// PoolRebuildStatus represents a pool's rebuild status.
message PoolRebuildStatus {
	int32 status = 1; // DAOS error code
	enum State {
		IDLE = 0;
		DONE = 1;
		BUSY = 2;
	}
	State state = 2;
	uint64 objects = 3;
	uint64 records = 4;
}

// PoolQueryResp represents a pool query response.
message PoolQueryResp {
	int32 status = 1; // DAOS error code
	string uuid = 2; // pool uuid
	uint32 totaltargets = 3; // total targets in pool
	uint32 activetargets = 4; // active targets in pool
	uint32 disabledtargets = 5; // number of disabled targets in pool
	PoolRebuildStatus rebuild = 6; // pool rebuild status
	StorageUsageStats scm = 7; // SCM storage usage stats
	StorageUsageStats nvme = 8; // NVMe storage usage stats
	uint32 totalnodes = 9; // total nodes in pool
	uint32 version = 10; // latest pool map version
	uint32 leader = 11; // current raft leader
}

// PoolSetPropReq represents a request to set a pool property.
message PoolSetPropReq {
	string sys = 1; // DAOS system identifier
	string uuid = 2; // uuid of pool to modify
	oneof property {
		string name = 3;   // pool property name
		uint32 number = 4; // pool property enum
	}
	oneof value {
		string strval = 5; // pool property string value
		uint64 numval = 6; // pool property numeric value
	}
	repeated uint32 svc_ranks = 7; // List of pool service ranks
}

// PoolSetPropResp represents the result of setting a property.
message PoolSetPropResp {
	int32 status = 1; // DAOS error code
	oneof property {
		string name = 2;   // pool property name
		uint32 number = 3; // pool property enum
	}
	oneof value {
		string strval = 4; // pool property string value
		uint64 numval = 5; // pool property numeric value
	}
}

