//
// (C) Copyright 2019-2022 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

syntax = "proto3";
package mgmt;

option go_package = "github.com/daos-stack/daos/src/control/common/proto/mgmt";

// Management Service Protobuf Definitions related to interactions between
// DAOS control server and DAOS pools.

// PoolCreateReq supplies new pool parameters.
message PoolCreateReq {
	string uuid = 1; // UUID for new pool, generated on the client
	string sys = 2; // DAOS system identifier
	string user = 3; // formatted user e.g. "bob@"
	string usergroup = 4; // formatted group e.g. "builders@"
	repeated string acl = 5; // Access Control Entries in short string format
	repeated PoolProperty properties = 6; // Pool properties to be set

	// The minimal fault domain tree format consists of a set of tuples
	// representing members of the tree in a breadth-first traversal order.
	// Each domain above rank consists of: (level, id, num children)
	// Each rank consists of: (rank number)
	repeated uint32 faultDomains = 7; // Fault domain tree, minimal format
	uint32 numsvcreps = 8; // desired number of pool service replicas
	uint64 totalbytes = 9; // Total pool size in bytes (auto config)
	repeated double tierratio = 10; // Ratio of storage tiers expressed as % of totalbytes (auto config)
	uint32 numranks = 11; // Number of target ranks to use (auto config)
	repeated uint32 ranks = 12; // target ranks (manual config)
	repeated uint64 tierbytes = 13; // Size in bytes of storage tiers (manual config)
}

// PoolCreateResp returns created pool uuid and ranks.
message PoolCreateResp {
	int32 status = 1; // DAOS error code
	repeated uint32 svc_reps = 2; // pool service replica ranks
	repeated uint32 tgt_ranks = 3; // pool target ranks
	repeated uint64 tier_bytes = 4; // storage tiers allocated to pool
}

// PoolDestroyReq supplies pool identifier and force flag.
message PoolDestroyReq {
	string sys = 1; // DAOS system identifier
	string id = 2; // uuid or label of pool to destroy
	bool force = 3; // destroy regardless of active connections
	repeated uint32 svc_ranks = 4; // List of pool service ranks
}

// PoolDestroyResp returns resultant state of destroy operation.
message PoolDestroyResp {
	int32 status = 1; // DAOS error code
}

// PoolEvictReq supplies pool identifier.
message PoolEvictReq {
	string sys = 1; // DAOS system identifier
	string id = 2; // uuid or label of pool to evict
	repeated uint32 svc_ranks = 3; // List of pool service ranks
	repeated string handles = 4; // Optional list of handles to evict (Mutually exclusive with destroy/force_destroy)
	bool destroy = 5; // If true, evict is first step of a pool destroy operation
	bool force_destroy = 6; // If true and destroy=true, forcibly closes open pool handles
	string machine = 7; // Optional machine name to evict handles for (Mutually exclusive with handles)
}

// PoolEvictResp returns resultant state of evict operation.
message PoolEvictResp {
	int32 status = 1; // DAOS error code
	int32 count = 2; // Count of handles evicted
}

// PoolExcludeReq supplies pool identifier, rank, and target_idxs.
message PoolExcludeReq {
	string sys = 1; // DAOS system identifier
	string id = 2; // uuid or label of pool to add target up to
	uint32 rank = 3; // target to move to the up state
	repeated uint32 targetidx = 4; // target ranks
	repeated uint32 svc_ranks = 5; // List of pool service ranks
}

// PoolExcludeResp returns resultant state of Exclude operation.
message PoolExcludeResp {
	int32 status = 1; // DAOS error code
}

// PoolDrainReq supplies pool identifier, rank, and target_idxs.
message PoolDrainReq {
	string sys = 1; // DAOS system identifier
	string id = 2; // uuid or label of pool to add target up to
	uint32 rank = 3; // rank to move to the up state
	repeated uint32 targetidx = 4; // rank targets
	repeated uint32 svc_ranks = 5; // List of pool service ranks
}

// PoolDrainResp returns resultant state of Drain operation.
message PoolDrainResp {
	int32 status = 1; // DAOS error code
}

// PoolExtendReq supplies pool identifier and rank list.
message PoolExtendReq {
	string sys = 1; // DAOS system identifier
	string id = 2; // uuid or label of pool to add target up to
	repeated uint32 ranks = 3; // ranks
	repeated uint32 svc_ranks = 4; // List of pool service ranks
	repeated uint64 tierbytes = 5; // Size in bytes of storage tiers
	repeated uint32 faultDomains = 6; // fault domain tree, minimal format
}

// PoolExtendResp returns resultant state of Extend operation.
message PoolExtendResp {
	int32 status = 1; // DAOS error code
	repeated uint64 tier_bytes = 2; // storage tiers allocated to pool
}

// PoolReintegrateReq supplies pool identifier, rank, and target_idxs.
message PoolReintegrateReq {
	string sys = 1; // DAOS system identifier
	string id = 2; // uuid or label of pool to add target up to
	uint32 rank = 3; // target to move to the up state
	repeated uint32 targetidx = 4; // target ranks
	repeated uint32 svc_ranks = 5; // List of pool service ranks
}

// PoolReintegrateResp returns resultant state of Reintegrate operation.
message PoolReintegrateResp {
	int32 status = 1; // DAOS error code
}

// ListPoolsReq represents a request to list pools on a given DAOS system.
message ListPoolsReq {
	string sys = 1; // DAOS system identifier
}

// ListPoolsResp returns the list of pools in the system.
message ListPoolsResp {
	message Pool {
		string uuid = 1; // uuid of pool
		string label = 2; // pool label
		repeated uint32 svc_reps = 3; // pool service replica ranks
		string state = 4; // pool state
	}
	int32 status = 1; // DAOS error code
	repeated Pool pools = 2; // pools list
	uint64 data_version = 3; // Version of the system database.
}

// ListContainers
// Initial implementation differs from C API
// (numContainers not provided in request - get whole list)
message ListContReq {
	string sys = 1; // DAOS system identifier
	string id = 2; // uuid or label of pool
	repeated uint32 svc_ranks = 3; // List of pool service ranks
}

message ListContResp {
	message Cont {
		string uuid = 1; // uuid of container
	}
	int32 status = 1; // DAOS error code
	repeated Cont containers = 2; // containers
}

// PoolQueryReq represents a pool query request.
message PoolQueryReq {
	string sys = 1; // DAOS system identifier
	string id = 2;
	repeated uint32 svc_ranks = 3; // List of pool service ranks
	bool include_enabled_ranks = 4; // True if the list of enabled ranks shall be returned
	bool include_disabled_ranks = 5; // True if the list of disabled ranks shall be returned
}

// StorageUsageStats represents usage statistics for a storage subsystem.
message StorageUsageStats {
	uint64 total = 1;
	uint64 free = 2;
	uint64 min = 3;
	uint64 max = 4;
	uint64 mean = 5;
	uint32 media_type = 6;
}

// PoolRebuildStatus represents a pool's rebuild status.
message PoolRebuildStatus {
	int32 status = 1; // DAOS error code
	enum State {
		IDLE = 0;
		DONE = 1;
		BUSY = 2;
	}
	State state = 2;
	uint64 objects = 3;
	uint64 records = 4;
}

// PoolQueryResp represents a pool query response.
message PoolQueryResp {
	reserved 9;
	reserved "total_nodes";
	int32 status = 1; // DAOS error code
	string uuid = 2; // pool uuid
	string label = 3; // pool label
	uint32 total_targets = 4; // total targets in pool
	uint32 active_targets = 5; // active targets in pool
	uint32 disabled_targets = 6; // number of disabled targets in pool
	PoolRebuildStatus rebuild = 7; // pool rebuild status
	repeated StorageUsageStats tier_stats = 8; // storage tiers usage stats
	uint32 version = 10; // latest pool map version
	uint32 leader = 11; // current raft leader
	string enabled_ranks = 12; // optional set of ranks enabled
	string disabled_ranks = 13; // optional set of ranks disabled
	uint32 total_engines = 14; // total engines in pool
	uint32 pool_layout_ver = 15; // current pool global version
	uint32 upgrade_layout_ver = 16; // latest pool global version to upgrade
}

message PoolProperty {
	uint32 number = 1; // pool property number
	oneof value {
		string strval = 2; // pool property string value
		uint64 numval = 3; // pool property numeric value
	}
}

// PoolSetPropReq represents a request to set pool properties.
message PoolSetPropReq {
	string sys = 1; // DAOS system identifier
	string id = 2; // uuid or label of pool to modify
	repeated PoolProperty properties = 3;
	repeated uint32 svc_ranks = 4; // List of pool service ranks
}

// PoolSetPropResp represents the result of setting pool properties.
message PoolSetPropResp {
	int32 status = 1; // DAOS error code
}

// PoolGetPropReq represents a request to get pool properties.
message PoolGetPropReq {
	string sys = 1; // DAOS system identifier
	string id = 2; // uuid or label of pool to query
	repeated PoolProperty properties = 3;
	repeated uint32 svc_ranks = 4; // List of pool service ranks
}

// PoolGetPropResp represents the result of getting pool properties.
message PoolGetPropResp {
	int32 status = 1; // DAOS error code
	repeated PoolProperty properties = 2;
}

// PoolUpgradeReq upgrades the disk format of an existing pool to the
// latest version.
message PoolUpgradeReq {
	string sys = 1; // DAOS system identifier
	string id = 2;
	repeated uint32 svc_ranks = 3; // List of pool service ranks
}

// PoolUpgradeResp returns resultant state of upgrade operation.
message PoolUpgradeResp {
	int32 status = 1; // DAOS error code
}
