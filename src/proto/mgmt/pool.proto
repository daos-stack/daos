//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package mgmt;

// Management Service Protobuf Definitions related to interactions between
// DAOS control server and DAOS pools.

// PoolCreateReq supplies new pool parameters.
message PoolCreateReq {
	uint64 scmbytes = 1; // SCM size in bytes
	uint64 nvmebytes = 2; // NVMe size in bytes
	repeated uint32 ranks = 3; // target ranks
	uint32 numsvcreps = 4; // desired number of pool service replicas
	string user = 5; // formatted user e.g. "bob@"
	string usergroup = 6; // formatted group e.g. "builders@"
	string uuid = 7; // UUID for new pool, generated on the client
	string sys = 8; // DAOS system identifier
	repeated string acl = 9; // Access Control Entries in short string format
}

// PoolCreateResp returns created pool uuid and ranks.
message PoolCreateResp {
	int32 status = 1; // DAOS error code
	repeated uint32 svcreps = 2; // pool service replica ranks
	int32 numranks = 3; // number of target ranks used
}

// PoolDestroyReq supplies pool identifier and force flag.
message PoolDestroyReq {
	string uuid = 1; // uuid of pool to destroy
	string sys = 2; // DAOS system identifier
	bool force = 3; // destroy regardless of active connections
	repeated uint32 svc_ranks = 4; // List of pool service ranks
}

// PoolDestroyResp returns resultant state of destroy operation.
message PoolDestroyResp {
	int32 status = 1; // DAOS error code
}

// PoolEvictReq supplies pool identifier.
message PoolEvictReq {
	string uuid = 1; // uuid of pool to evict
	string sys = 2; // DAOS system identifier
	repeated uint32 svc_ranks = 3; // List of pool service ranks
}

// PoolEvictResp returns resultant state of evict operation.
message PoolEvictResp {
	int32 status = 1; // DAOS error code
}

// PoolExcludeReq supplies pool identifier, rank, and target_idxs.
message PoolExcludeReq {
	string uuid = 1; // uuid of pool to add target up to
	uint32 rank = 2; // target to move to the up state
	repeated uint32 targetidx = 3; // target ranks
	repeated uint32 svc_ranks = 4; // List of pool service ranks
}

// PoolExcludeResp returns resultant state of Exclude operation.
message PoolExcludeResp {
	int32 status = 1; // DAOS error code
}

// PoolDrainReq supplies pool identifier, rank, and target_idxs.
message PoolDrainReq {
	string uuid = 1; // uuid of pool to add target up to
	uint32 rank = 2; // rank to move to the up state
	repeated uint32 targetidx = 3; // rank targets
	repeated uint32 svc_ranks = 4; // List of pool service ranks
}

// PoolDrainResp returns resultant state of Drain operation.
message PoolDrainResp {
	int32 status = 1; // DAOS error code
}

// PoolExtendReq supplies pool identifier and rank list.
message PoolExtendReq {
	string uuid = 1; // uuid of pool to add target up to
	repeated uint32 ranks = 2; // ranks
	repeated uint32 svc_ranks = 3; // List of pool service ranks
	uint64 scmbytes = 4; // SCM size in bytes
	uint64 nvmebytes = 5; // NVMe size in bytes
}

// PoolExtendResp returns resultant state of Extend operation.
message PoolExtendResp {
	int32 status = 1; // DAOS error code
}

// PoolReintegrateReq supplies pool identifier, rank, and target_idxs.
message PoolReintegrateReq {
	string uuid = 1; // uuid of pool to add target up to
	uint32 rank = 2; // target to move to the up state
	repeated uint32 targetidx = 3; // target ranks
	repeated uint32 svc_ranks = 4; // List of pool service ranks
}

// PoolReintegrateResp returns resultant state of Reintegrate operation.
message PoolReintegrateResp {
	int32 status = 1; // DAOS error code
}

// ListPoolsReq represents a request to list pools on a given DAOS system.
message ListPoolsReq {
	string sys = 1; // DAOS system identifier
}

// ListPoolsResp returns the list of pools in the system.
message ListPoolsResp {
	message Pool {
		string uuid = 1; // uuid of pool
		repeated uint32 svcreps = 2; // pool service replica ranks
	}
	int32 status = 1; // DAOS error code
	repeated Pool pools = 2; // pools list
}

// ListContainers
// Initial implementation differs from C API
// (numContainers not provided in request - get whole list)
message ListContReq {
	string uuid = 1; // uuid of pool
	repeated uint32 svc_ranks = 2; // List of pool service ranks
}

message ListContResp {
	message Cont {
		string uuid = 1; // uuid of container
	}
	int32 status = 1; // DAOS error code
	repeated Cont containers = 2; // containers
}

// PoolQueryReq represents a pool query request.
message PoolQueryReq {
	string uuid = 1;
	repeated uint32 svc_ranks = 2; // List of pool service ranks
}

// StorageUsageStats represents usage statistics for a storage subsystem.
message StorageUsageStats {
	uint64 total = 1;
	uint64 free = 2;
	uint64 min = 3;
	uint64 max = 4;
	uint64 mean = 5;
}

// PoolRebuildStatus represents a pool's rebuild status.
message PoolRebuildStatus {
	int32 status = 1; // DAOS error code
	enum State {
		IDLE = 0;
		DONE = 1;
		BUSY = 2;
	}
	State state = 2;
	uint64 objects = 3;
	uint64 records = 4;
}

// PoolQueryResp represents a pool query response.
message PoolQueryResp {
	int32 status = 1; // DAOS error code
	string uuid = 2; // pool uuid
	uint32 totaltargets = 3; // total targets in pool
	uint32 activetargets = 4; // active targets in pool
	uint32 disabledtargets = 5; // number of disabled targets in pool
	PoolRebuildStatus rebuild = 6; // pool rebuild status
	StorageUsageStats scm = 7; // SCM storage usage stats
	StorageUsageStats nvme = 8; // NVMe storage usage stats
	uint32 totalnodes = 9; // total nodes in pool
	uint32 version = 10; // latest pool map version
	uint32 leader = 11; // current raft leader
}

// PoolSetPropReq represents a request to set a pool property.
message PoolSetPropReq {
	string uuid = 1; // uuid of pool to modify
	oneof property {
		string name = 2;   // pool property name
		uint32 number = 3; // pool property enum
	}
	oneof value {
		string strval = 4; // pool property string value
		uint64 numval = 5; // pool property numeric value
	}
	repeated uint32 svc_ranks = 6; // List of pool service ranks
}

// PoolSetPropResp represents the result of setting a property.
message PoolSetPropResp {
	int32 status = 1; // DAOS error code
	oneof property {
		string name = 2;   // pool property name
		uint32 number = 3; // pool property enum
	}
	oneof value {
		string strval = 4; // pool property string value
		uint64 numval = 5; // pool property numeric value
	}
}

