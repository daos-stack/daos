//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package mgmt;

import "common.proto";

// SCM Storage Protobuf Definitions related to interactions between
// DAOS control server and locally attached storage devices.

// ScmModule represent Storage Class Memory modules installed.
message ScmModule {
	message Location {
		uint32 channel = 1;	// The channel id where module is installed.
		uint32 channelpos = 2;	// The channel position where module is installed.
		uint32 memctrlr = 3;	// The memory controller id attached to module.
		uint32 socket = 4;	// The socket id attached to module.
	}

	//string uid = 1; // The uid of the module.
	uint32 physicalid = 1;	// The physical id of the module.
	//string handle = 3; // The device handle of the module.
	//string serial = 8; // The serial number of the module.
	uint64 capacity = 2;	// The capacity of the module.
	//string fwrev = 10; // The firmware revision of the module.
	Location loc = 3;	// The location of the PMM in the hardware platform.
}

// ScmMount represents mounted AppDirect region made up of SCM module set.
message ScmMount {
	string mntpoint = 1;
	repeated ScmModule modules = 2;
}

// ScmModuleResult represents operation state for specific SCM/PM module.
//
// TODO: replace identifier with serial when returned in scan
message ScmModuleResult {
	ScmModule.Location loc = 1;	// SCM module identifier
	ResponseState state = 2;	// state of current operation
}

// ScmMountResult represents operation state for specific SCM mount point.
message ScmMountResult {
	string mntpoint = 1;		// Path where device or tmpfs is mounted
	ResponseState state = 2;	// state of current operation
}

message ScanScmParams {}

message FormatScmParams {}

message UpdateScmParams {}

message BurninScmParams {}
