//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package mgmt;

import "pool.proto";
import "srv.proto";
import "storage_query.proto"; // storage query req/resp BIO data and SMD device list
import "acl.proto"; // ACL-related requests

// Management Service is replicated on a small number of servers in the system,
// these requests will be processed on a host that is a member of the management
// service.
//
// All MgmtSvc RPCs will be forwarded over dRPC to be handled in data plane.
service MgmtSvc {
	// Join the server described by JoinReq to the system.
	rpc Join(JoinReq) returns (JoinResp) {}
	// LeaderQuery provides a mechanism for clients to discover
	// the system's current Management Service leader
	rpc LeaderQuery(LeaderQueryReq) returns (LeaderQueryResp) {}
	// Create a DAOS pool allocated across a number of ranks
	rpc PoolCreate(PoolCreateReq) returns (PoolCreateResp) {}
	// Destroy a DAOS pool allocated across a number of ranks.
	rpc PoolDestroy(PoolDestroyReq) returns (PoolDestroyResp) {}
	// PoolQuery queries a DAOS pool.
	rpc PoolQuery(PoolQueryReq) returns (PoolQueryResp) {}
	// Set a DAOS pool property.
	rpc PoolSetProp(PoolSetPropReq) returns (PoolSetPropResp) {}
	// Fetch the Access Control List for a DAOS pool.
	rpc PoolGetACL(GetACLReq) returns (ACLResp) {}
	// Overwrite the Access Control List for a DAOS pool with a new one.
	rpc PoolOverwriteACL(ModifyACLReq) returns (ACLResp) {}
	// Update existing the Access Control List for a DAOS pool with new entries.
	rpc PoolUpdateACL(ModifyACLReq) returns (ACLResp) {}
	// Delete an entry from a DAOS pool's Access Control List.
	rpc PoolDeleteACL(DeleteACLReq) returns (ACLResp) {}
	// Get the information required by libdaos to attach to the system.
	rpc GetAttachInfo(GetAttachInfoReq) returns (GetAttachInfoResp) {}
	// Get BIO device health information.
	rpc BioHealthQuery(BioHealthReq) returns (BioHealthResp) {}
	// Get SMD device list.
	rpc SmdListDevs(SmdDevReq) returns (SmdDevResp) {}
	// Get SMD pool list.
	rpc SmdListPools(SmdPoolReq) returns (SmdPoolResp) {}
	// Prepare DAOS IO server identified by rank for controlled shutdown.
	rpc PrepShutdown(PrepShutdownReq) returns (DaosResp) {}
	// Kill DAOS IO server identified by rank.
	rpc KillRank(KillRankReq) returns (DaosResp) {}
	// Ping DAOS IO server identified by rank.
	rpc PingRank(PingRankReq) returns (DaosResp) {}
	// Start DAOS IO servers identified by rank.
	rpc StartRanks(StartRanksReq) returns (StartRanksResp) {}
	// List all pools in a DAOS system: basic info: UUIDs, service ranks.
	rpc ListPools(ListPoolsReq) returns (ListPoolsResp) {}
	// Get the current state of the device
	rpc DevStateQuery(DevStateReq) returns (DevStateResp) {}
	// Set the device state of an NVMe SSD to FAULTY
	rpc StorageSetFaulty(DevStateReq) returns (DevStateResp) {}
	// List all containers in a pool
	rpc ListContainers(ListContReq) returns (ListContResp) {}
}
