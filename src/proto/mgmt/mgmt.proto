//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package mgmt;

// Import DaosRequestStatus.
import "srv.proto";
// Import Pool request and response
import "pool.proto";

// Management Service is replicated on a small number of servers in the system.
service MgmtSvc {
	// Join the server described by JoinReq to the system.
	rpc Join(JoinReq) returns (JoinResp) {}
	// Create a DAOS pool allocated across a number of ranks
	rpc CreatePool(CreatePoolReq) returns (CreatePoolResp) {}
	// Destroy a DAOS pool allocated across a number of ranks
	rpc DestroyPool(DestroyPoolReq) returns (DestroyPoolResp) {}
	// Get the information required by libdaos to attach to the system.
	rpc GetAttachInfo(GetAttachInfoReq) returns (GetAttachInfoResp) {}
}

message JoinReq {
	// Server UUID.
	string uuid = 1;
	// Server rank desired, if not -1.
	uint32 rank = 2;
	// Server CaRT base URI (i.e., for context 0).
	string uri = 3;
	// Server CaRT context count.
	uint32 nctxs = 4;
	// Server management address.
	string addr = 5;
}

message JoinResp {
	DaosRequestStatus status = 1;
	// Server rank assigned.
	uint32 rank = 2;
	// Server state in the system map.
	enum State {
		// Server in the system.
		IN = 0;
		// Server excluded from the system.
		OUT = 1;
	}
	State state = 3;
}

message GetAttachInfoReq {
	// System name. For daos_agent only.
	string sys = 1;
}

message GetAttachInfoResp {
	DaosRequestStatus status = 1;
	// CaRT PSR.
	message Psr {
		uint32 rank = 1;
		string uri = 2;
	}
	// CaRT PSRs of the system group.
	repeated Psr psrs = 2;
}
