//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package mgmt;

// Management Service Protobuf Definitions related to interactions between
// DAOS control server and DAOS Blob I/O (BIO) module and Per-Server Metadata
// (SMD).

message BioHealthReq {
	string dev_uuid = 1;
	string tgt_id = 2;
}

message BioHealthResp {
	int32 status = 1; // DAOS error code
	string dev_uuid = 2; // UUID of blobstore
	uint64 error_count = 3;
	uint32 temperature = 4;
	uint64 media_errors = 5;
	uint32 read_errs = 6;
	uint32 write_errs = 7;
	uint32 unmap_errs = 8;
	uint32 checksum_errs = 9;
	bool temp = 10;
	bool spare = 11;
	bool readonly = 12;
	bool device_reliability = 13;
	bool volatile_memory = 14;
}

message SmdDevReq {
}

message SmdDevResp {
	message Device {
		string uuid = 1; // UUID of blobstore
		repeated int32 tgt_ids = 2; // VOS target IDs
	}
	int32 status = 1;
	repeated Device devices = 2;
}

message SmdPoolReq {
}

message SmdPoolResp {
	message Pool {
		string uuid = 1; // UUID of VOS pool
		repeated int32 tgt_ids = 2; // VOS target IDs
		repeated uint64 blobs = 3; // SPDK blobs
	}
	int32 status = 1;
	repeated Pool pools = 2;
}
