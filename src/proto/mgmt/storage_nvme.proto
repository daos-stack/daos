//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package mgmt;

// NVMe Storage Protobuf Definitions related to interactions between
// DAOS control server and locally attached storage.

// NvmeController represents an NVMe Controller.
message NvmeController {
	// NvmeNamespace represent NVMe namespaces available on controller.
	message NvmeNamespace {
		// namespace id
		int32 id = 1;
		// device capacity in GBytes
		int32 capacity = 2;
	}

	// The model name of the controller.
	string model = 1;
	// The serial number of the controller.
	string serial = 2;
	// The pci address of the controller.
	string pciaddr = 3;
	// The firmware revision of the controller.
	string fwrev = 4;
	// NvmeNamespaces created on this controller.
	repeated NvmeNamespace namespace = 5;
}

// NvmeControllerResult represents operation state for specific controller.
message NvmeControllerResult {
	string pciaddr = 1;		// PCI address of NVMe controller
	ResponseState state = 2;	// state of current operation
}

message ScanNvmeParams {}

message FormatNvmeParams {}

message UpdateNvmeParams {
	// Filesystem path containing firmware image
	string path = 1;
	// Firmware slot (register) to update
	int32 slot = 2;
}

// TODO: provide facility to supply FIO config in params
message BurninNvmeParams {
	// FIO workload configuration file path
	string path = 1;
}

