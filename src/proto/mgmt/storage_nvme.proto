//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package mgmt;

import "common.proto";

// NVMe Storage Protobuf Definitions related to interactions between
// DAOS control server and locally attached storage.

// NvmeController represents an NVMe Controller (SSD).
message NvmeController {
	// Namespace represents a namespace created on an NvmeController.
	message Namespace {
		int32 id = 1;		// namespace id
		int32 capacity = 2;	// device capacity in GBytes
	}

	string model = 1;	// model name
	string serial = 2;	// serial number
	string pciaddr = 3;	// pci address
	string fwrev = 4;	// firmware revision
	int32 socketid = 5;	// NUMA socket ID
	repeated Namespace namespaces = 6;	// controller's namespaces
}

// NvmeControllerResult represents state of operation performed on controller.
message NvmeControllerResult {
	string pciaddr = 1;		// PCI address of NVMe controller
	ResponseState state = 2;	// state of current operation
}

message ScanNvmeReq {}

message FormatNvmeReq {}

message UpdateNvmeReq {
	string model = 1; // Only upgrade devices of specific model
	string startrev = 2; // Only upgrade devices with starting revision
	string path = 3;	// Filesystem path containing firmware image
	int32 slot = 4;		// Firmware slot (register) to update
}

// TODO: provide facility to supply FIO config in params
message BurninNvmeReq {
	FilePath fioconfig = 1;	// FIO workload configuration file path
}

