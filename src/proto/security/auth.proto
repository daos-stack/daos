//
// (C) Copyright 2018 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. B609815.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package auth;

// Types of authentication token
enum Flavor {
	AUTH_NONE = 0;
	AUTH_SYS = 1;
}

message Token {
	Flavor flavor = 1; // flavor of this authentication token
	bytes data = 2; // packed structure of the specified flavor
}

// Token structure for AUTH_SYS flavor cred
message Sys {
	uint64 stamp = 1; // timestamp
	string machinename = 2; // machine name
	string user = 3; // user name
	string group = 4; // primary group name
	repeated string groups = 5; // secondary group names
	string secctx = 6; // Additional field for MAC label
}

// Token and verifier are expected to have the same flavor type.
message Credential {
	Token token = 1; // authentication token
	Token verifier = 2; // to verify integrity of the token
	string origin = 3; // the agent that created this credential
}

// GetCredResp represents the result of a request to fetch authentication
// credentials.
message GetCredResp {
	int32 status = 1; // Status of the request
	Credential cred = 2; // Caller's authentication credential
}

// ValidateCredReq represents a request to verify a set of authentication
// credentials.
message ValidateCredReq {
	Credential cred = 1; // Credential to be validated
}

// ValidateCredResp represents the result of a request to validate
// authentication credentials.
message ValidateCredResp {
	int32 status = 1; // Status of the request
	Token token = 2; // Validated authentication token from the credential
}
