//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. B609815.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package acl;

// Access Control List Protobuf Definitions
// These are the request objects and gRPC services used to set or edit
// permissions on an entity in DAOS (such as a pool, container, etc.).

enum RequestStatus {
	SUCCESS = 0;
	ERR_UNKNOWN = -1;		// Unknown error
	ERR_PERM_DENIED = -2;		// Not authorized to make these changes
	ERR_INVALID_PERMS = -3;		// Permissions requested are invalid
	ERR_INVALID_PRINCIPAL = -4;	// Principal requested is invalid
	ERR_INVALID_UUID = -5;		// UUID requested is invalid
}

message Response {
	RequestStatus status = 1;
	EntryPermissions permissions = 2;
}

// Bits representing access permissions
enum Permissions {
	NO_ACCESS = 0;
	READ = 1;
	WRITE = 2;
}

// A given user/group may have multiple different types of entries
enum EntryType {
	ALLOW = 0;
	AUDIT = 1;
	ALARM = 2;
}

// Bits representing flags on a given ACL entry
enum Flags {
	NO_FLAGS = 0;
	GROUP = 1;		// This entry is for a group not a user
	ACCESS_SUCCESS = 2;	// audit/alarm on successful access
	ACCESS_FAILURE = 4;	// audit/alarm on failed access
	POOL_INHERIT = 8;	// entry should be inherited by pool's containers
}

// Identifier for a specific Access Control Entry
message Entry {
	EntryType type = 1;
	uint32 flags = 2;	// bitmask of AclFlags
	string entity = 3;	// UUID of the entity (such as a pool)
	string identity = 4;	// User/group who accesses the entity
}

// Permissions for the given entry
message EntryPermissions {
	Entry entry = 1;
	uint64 permission_bits = 2;	// Bitmask of AclPermissions
}

// gRPC API for ACL service
service AccessControl {
	// Set the permissions on a given ACE or create it if it doesn't exist
	rpc SetPermissions(EntryPermissions) returns (Response) {};
	// Fetch the permissions on a given ACE
	rpc GetPermissions(Entry) returns (Response) {};
	// Remove the given ACE completely from the ACL
	rpc DestroyAclEntry(Entry) returns (Response) {};
}
