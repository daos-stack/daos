//
// (C) Copyright 2020-2021 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

// This file defines RAS event related protobuf messages communicated over dRPC
// and gRPC.

syntax = "proto3";
package shared;

option go_package = "github.com/daos-stack/daos/src/control/common/proto/shared";

// RASEvent describes a RAS event in the DAOS system.
message RASEvent {
	uint32 id = 1;		// Unique event identifier, 64-char.
	string msg = 2;		// Human readable message describing event.
	string timestamp = 3;	// Fully qualified timestamp (us) incl timezone.
	uint32 type = 4;	// Event type.
	uint32 severity = 5;	// Event severity.
	string hostname = 6;	// (optional) Hostname of node involved in event.
	uint32 rank = 7;	// (optional) DAOS rank involved in event.
	string hw_id = 8;	// (optional) Hardware component involved in event.
	uint64 proc_id = 9;	// (optional) Process involved in event.
	uint64 thread_id = 10;	// (optional) Thread involved in event.
	string job_id = 11;	// (optional) Job involved in event.
	string pool_uuid = 12;	// (optional) Pool UUID involved in event.
	string cont_uuid = 13;	// (optional) Container UUID involved in event.
	string obj_id = 14;	// (optional) Object involved in event.
	string ctl_op = 15;	// (optional) Recommended automatic action.
	// RankStateEventInfo defines extended fields for rank state change events.
	message RankStateEventInfo {
		uint32 instance = 1;	// Control-plane harness instance index.
		bool errored = 2;	// Rank in error state.
		string error = 3;	// Message associated with error.
	}
	// PoolSvcEventInfo defines extended fields for pool service change events.
	message PoolSvcEventInfo {
		repeated uint32 svc_reps = 1;	// Pool service replica ranks.
		uint64 version = 2;		// Raft leadership term.
	}
	oneof extended_info {	// Data specific to a given event ID.
		string str_info = 16;	// Opaque data blob.
		RankStateEventInfo rank_state_info = 17;
		PoolSvcEventInfo pool_svc_info = 18;
	}
}

// ClusterEventReq communicates occurrence of a RAS event in the DAOS system.
message ClusterEventReq {
	uint64 sequence = 1;	// Sequence identifier for RAS events.
	RASEvent event = 2;	// RAS event.
}

// ClusterEventResp acknowledges receipt of an event notification.
message ClusterEventResp {
	uint64 sequence = 1;	// Sequence identifier for RAS events.
	int32 status = 2;	// DAOS error code.
}
