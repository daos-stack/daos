//
// (C) Copyright 2022 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

syntax = "proto3";
package chk;

option go_package = "github.com/daos-stack/daos/src/control/common/proto/chk";

// The enumeration values shaed by DAOS check engine and control plane.

// Kinds of DAOS global inconsistency.
enum CheckInconsistClass {
	// Consistent cases.
	CIC_NONE = 0;
	// Only a subset of the pool services are present but we will have a quorum.
	// Default action: CIA_IGNORE.
	CIC_POOL_LESS_SVC_WITH_QUORUM = 1;
	// Only a subset of the pool services are present, and we don't have a quorum.
	// Default action: CIA_INTERACT.
	CIC_POOL_LESS_SVC_WITHOUT_QUORUM = 2;
	// More members are reported than the pool service was created with.
	// Default action: CIA_DISCARD. Remove unrecognized pool service.
	CIC_POOL_MORE_SVC = 3;
	// Engine(s) claim the pool which is not registered to MS.
	// Default action: CIA_READD. Register the pool to the MS.
	CIC_POOL_NONEXIST_ON_MS = 4;
	// Pool is registered to MS but not claimed by any engine.
	// Default action: CIA_DISCARD. De-register pool from MS.
	CIC_POOL_NONEXIST_ON_ENGINE = 5;
	// Svcl list stored in MS does not match the actual PS membership.
	// Default action: CIA_TRUST_PS. Refresh svcl list in MS DB.
	CIC_POOL_BAD_SVCL = 6;
	// The pool label recorded by MS does not match the pool label property from PS.
	// Default action: CIA_TRUST_PS. Refresh label in MS DB.
	CIC_POOL_BAD_LABEL = 7;
	// An engine has some allocated storage but does not appear in pool map.
	// Default action: CIA_DISCARD. Associated files and blobs will be deleted from the engine.
	CIC_ENGINE_NONEXIST_IN_MAP = 8;
	// An engine has some allocated storage and is marked as down/downout in pool map.
	// Default action: CIA_IGNORE. It can be reintegrated after CR scan.
	CIC_ENGINE_DOWN_IN_MAP = 9;
	// An engine is referenced in pool map, but no storage is actually allocated on this engine.
	// Default action: CIA_DISCARD. Evict the rank from pool map, give left things to rebuild.
	CIC_ENGINE_HAS_NO_STORAGE = 10;
	// Containers that have storage allocated on engine but does not exist in the PS.
	// Default action: CIA_DISCARD. Destrory the unrecognized container.
	CIC_CONT_NONEXIST_ON_PS = 11;
	// The container label recorded by PS does not match the container label property.
	// Default action: CIA_TRUST_PS. Refresh label property on related target(s).
	CIC_CONT_BAD_LABEL = 12;

	// More for subsequent CR phases.

	// The DTX is corrupted, some participant RDG(s) may be lost.
	// Default action: CIA_INTERACT.
	CIC_DTX_CORRUPTED = 13;
	// The DTX entry on leader does not exist, then not sure the status.
	// Default action: CIA_DISCARD. It is equal to abort the DTX and may lost data on related
	// shard, then we may found data inconsistency in subseqeunt CR scan phase, at that time,
	// such data inconsistency will be fixed.
	CIC_DTX_ORPHAN = 14;
	// The checksum information is lost.
	// Default action: CIA_READD. We have to trust the data and recalculate the checksum. If
	// data is corrupted, then we may hit data inconsistency in subseqeunt CR scan phase, at
	// that time, such data inconsistency will be fixed.
	CIC_CSUM_LOST = 15;
	// Checksum related inconsistency or data corruption.
	// Default action: CIA_DISCARD. Then we will hit data lost in subseqeunt CR scan phase,
	// at that time, such data inconsistency will be fixed.
	CIC_CSUM_FAILURE = 16;
	// Replicated object lost some replica(s).
	// Default action: CIA_READD. Copy from another valid replica.
	CIC_OBJ_LOST_REP = 17;
	// EC object lost parity or data shard(s).
	// Default action: CIA_READD. Trust other available shards and recalculate the lost one(s).
	CIC_OBJ_LOST_EC_SHARD = 18;
	// EC object lost too many shards that exceeds its redundancy.
	// Default action: CIA_INTERACT. Ask the admin to decide whether keep or remove the object.
	CIC_OBJ_LOST_EC_DATA = 19;
	// Data inconsistency among replicas
	// Default action: CIA_TRUST_LATEST. Try to keep the latest data. If all have the same epoch,
	// then ask the admin (CIA_INTERACT) to decide which one will be trusted.
	CIC_OBJ_DATA_INCONSIST = 20;

	// Unknown inconsistency.
	// Default action: CIA_IGNORE.
	CIC_UNKNOWN = 100;
}

// Actions for how to handle kinds of inconsistency.
enum CheckInconsistAction {
	// Default action, depends on the detailed inconsistency class.
	CIA_DEFAULT = 0;
	// Interact with administrator for further action.
	CIA_INTERACT = 1;
	// Ignore but log the inconsistency.
	CIA_IGNORE = 2;
	// Discard the unrecognized element: pool service, pool itself, container, and so on.
	CIA_DISCARD = 3;
	// Re-add the missing element: pool to MS, target to pool map, and so on.
	CIA_READD = 4;
	// Trust the information recorded in MS DB.
	CIA_TRUST_MS = 5;
	// Trust the information recorded in PS DB.
	CIA_TRUST_PS = 6;
	// Trust the information recorded by target(s).
	CIA_TRUST_TARGET = 7;
	// Trust the majority parts (if have).
	CIA_TRUST_MAJORITY = 8;
	// Trust the one with latest (pool map or epoch) information. Keep the latest data.
	CIA_TRUST_LATEST = 9;
	// Trust the one with oldest (pool map or epoch) information. Rollback to old version.
	CIA_TRUST_OLDEST = 10;
	// Trust EC parity shard.
	CIA_TRUST_EC_PARITY = 11;
	// Trust EC data shard.
	CIA_TRUST_EC_DATA = 12;
}

// The flags to control DAOS check general behavior, not related with any detailed inconsistency.
enum CheckFlag {
	CF_NONE		= 0;
	// Only scan without real repairing inconsistency.
	CF_DRYRUN	= 1;
	// Start DAOS check from the beginning.
	// Otherwise, resume the DAOS check from the latest checkpoint by default.
	CF_RESET	= 2;
	// Stop DAOS check if hit unknown inconsistency or fail to repair some inconsistency.
	// Otherwise, mark 'fail' on related component and continue to handle next one by default.
	CF_FAILOUT	= 4;
	// If the admin does not want to interact with engine during check scan, then CIA_INTERACT
	// will be converted to CIA_IGNORE. That will overwrite the CheckInconsistPolicy.
	CF_AUTO		= 8;
	// Handle orphan pool when start the check instance. If not specify the flag, some orphan
	// pool(s) may be not handled (by default) unless all pools are checked from the scratch.
	CF_ORPHAN_POOL = 16;
	// Overwrite former set CF_FAILOUT flag, cannot be specified together with CF_FAILOUT.
	CF_NO_FAILOUT	= 32;
	// Overwrite former set CF_AUTO flag, cannot be specified together with CF_AUTO.
	CF_NO_AUTO	= 64;

	// More flags with 2^n.
}

// The status of DAOS check instance.
enum CheckInstStatus {
	CIS_INIT = 0; // DAOS check has never been run.
	CIS_RUNNING = 1; // DAOS check is still in process.
	CIS_COMPLETED = 2; // All passes have been done for all required pools.
	CIS_STOPPED = 3; // DAOS check has been explicitly stopped, do not allow to rejoin.
	CIS_FAILED = 4; // DAOS check auto stopped for some unrecoverable failure, do not rejoin.
	CIS_PAUSED = 5; // DAOS check has been paused because engine exit, allow to rejoin.
	CIS_IMPLICATED = 6; // Check on the engine exit for other engine failure, do not rejoin.
}

// The pool status for DAOS check.
enum CheckPoolStatus {
	CPS_UNCHECKED = 0; // DAOS check has not started against this pool.
	CPS_CHECKING = 1; // The pool is being checked.
	CPS_CHECKED = 2; // DAOS check has successfully completed all the passes on this pool.
	CPS_FAILED = 3; // DAOS check could not be completed due to some unrecoverable failure.
	CPS_PAUSED = 4; // Checking the pool has been paused because engine exit.
	CPS_PENDING = 5; // Waiting for the decision from the admin.
	CPS_STOPPED = 6; // DAOS check on the pool has been stopped explicitly.
	CPS_IMPLICATED = 7; // Check on the pool is stopped because of other pool or engine failure.
}

// DAOS check engine scan phases.
enum CheckScanPhase {
	CSP_PREPARE = 0; // Initial phase, prepare to start check on related engines.
	CSP_POOL_LIST = 1; // Pool list consolidation.

	// The following phases are per-pool based. The scanning different pools can be
	// handled in parallel, so different pools maybe in different check scan phases.

	CSP_POOL_MBS = 2; // Pool membership.
	CSP_POOL_CLEANUP = 3; // Pool cleanup.
	CSP_CONT_LIST = 4; // Container list consolidation.
	CSP_CONT_CLEANUP = 5; // Container cleanup.

	// The following phases will be implemented in the future.

	CSP_DTX_RESYNC = 6; // DTX resync and cleanup.
	CSP_OBJ_SCRUB = 7; // RP/EC shards consistency verification with checksum scrub if have.
	CSP_REBUILD = 8; // Object rebuild.
	CSP_AGGREGATION = 9; // EC aggregation & VOS aggregation.

	CSP_DONE = 10; // All done.
}

// DAOS check engine reports the found inconsistency and repair result to control plane.
// If the repair action is CIA_INTERACT, then the control plane will reply current dRPC
// firstly, and then interact with the admin for the repair decision in another section
// and tell DAOS check engine via another DRPC_METHOD_MGMT_CHK_ACT dRPC call.
//
// If the CheckReport::msg is not enough to help admin to make the decision, then we
// may have to leverage DAOS debug tools to dump more information from related target.
message CheckReport {
        uint64 seq = 1; // DAOS Check event sequence, unique for the instance.
        CheckInconsistClass class = 2; // Inconsistency class
        CheckInconsistAction action = 3; // The action taken to repair the inconsistency
        // Repair result: zero is for repaired successfully.
        //		  negative value if failed to repair.
        //		  positive value is for CIA_IGNORE or dryrun mode.
        // It is meaningless if the action is CIA_INTERACT.
        int32 result = 4;
        uint32 rank = 5; // Inconsistency happened on which rank if applicable.
        uint32 target = 6; // Inconsistency happened on which target in the rank if applicable.
        string pool_uuid = 7; // The consistency is in which pool if applicable.
        string pool_label = 8; // The pool label, if available.
        string cont_uuid = 9; // The consistency is in which container if applicable.
        string cont_label = 10; // The container label, if available.
        string objid = 11; // The consistency is in which object if applicable.
        string dkey = 12; // The consistency is in which dkey if applicable.
        string akey = 13; // The consistency is in which akey if applicable.
        string timestamp = 14; // The time of report (and repair) the inconsistency.
        string msg = 15; // Information to describe the inconsistency in detail.
        repeated CheckInconsistAction act_choices = 16; // Interactive mode options (first is suggested).
        repeated string act_details = 17; // Details for each potential action (length should match actions).
        repeated string act_msgs = 18; // Formatted messages containing details for each action choice.
}
