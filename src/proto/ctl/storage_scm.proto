//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package ctl;

import "common.proto";

// SCM Storage Protobuf Definitions related to interactions between
// DAOS control server and locally attached storage devices.

// ScmModule represent Storage Class Memory modules installed.
message ScmModule {
	uint32 channelid = 1;		// The channel id where module is installed.
	uint32 channelposition = 2;	// The channel position where module is installed.
	uint32 controllerid = 3;	// The memory controller id attached to module.
	uint32 socketid = 4;		// The socket id attached to module.
	uint32 physicalid = 5;		// The physical id of the module.
	uint64 capacity = 6;		// The capacity of the module.
	string uid = 7;			// The uid of the module.
	string partNumber = 8;		// The part number of the module.
	string firmwareRevision = 9;	// Module's active firmware revision
}

// ScmNamespace represents SCM namespace as pmem device files created on a ScmRegion.
message ScmNamespace {
	string uuid = 1;
	string blockdev = 2;
	string dev = 3; // ndctl specific device identifier
	uint32 numa_node = 4;
	uint64 size = 5; // bytes
}

// ScmMount represents mounted AppDirect region made up of SCM module set.
message ScmMount {
	string mntpoint = 1;
	repeated ScmModule modules = 2;
	ScmNamespace namespace = 3;
}

// ScmModuleResult represents operation state for specific SCM/PM module.
//
// TODO: replace identifier with serial when returned in scan
message ScmModuleResult {
	uint32 physicalid = 1;		// SCM module identifier
	ResponseState state = 2;	// state of current operation
}

// ScmMountResult represents operation state for specific SCM mount point.
message ScmMountResult {
	string mntpoint = 1;		// Path where device or tmpfs is mounted
	ResponseState state = 2;	// state of current operation
	uint32 instanceidx = 3;		// Index of IO server instance
}

message PrepareScmReq {
	bool reset = 1;			// Reset SCM devices to memory mode
}

message PrepareScmResp {
	repeated ScmNamespace namespaces = 1;	// Existing namespace devices (new and old)
	ResponseState state = 2;
	bool rebootrequired = 3;
}

message ScanScmReq {}

message ScanScmResp {
	repeated ScmModule modules = 1;
	repeated ScmNamespace namespaces = 2;
	ResponseState state = 3;
}

message FormatScmReq {}
// TODO: format should return existing / new mounts

// FormatScmResp isn't required because SCM mount results are returned instead
