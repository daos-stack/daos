//
// (C) Copyright 2019-2023 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

syntax = "proto3";
package ctl;

option go_package = "github.com/daos-stack/daos/src/control/common/proto/ctl";

// Control Service Protobuf Definitions related to interactions between
// DAOS control server and DAOS Blob I/O (BIO) module and Per-Server Metadata
// (SMD).

message BioHealthReq {
	string dev_uuid = 1;
	uint64 meta_size = 2;	// Size of the metadata (i.e. vos file index) blob
	uint64 rdb_size = 3;	// Size of the RDB blob
}

// BioHealthResp mirrors nvme_health_stats structure.
message BioHealthResp {
	reserved 1, 2;
	uint64 timestamp = 3;
	// Device health details
	uint32 warn_temp_time = 5;
	uint32 crit_temp_time = 6;
	uint64 ctrl_busy_time = 7;
	uint64 power_cycles = 8;
	uint64 power_on_hours = 9;
	uint64 unsafe_shutdowns = 10;
	uint64 media_errs = 11;
	uint64 err_log_entries = 12;
	// I/O error counters
	uint32 bio_read_errs = 13;
	uint32 bio_write_errs = 14;
	uint32 bio_unmap_errs = 15;
	uint32 checksum_errs = 16;
	uint32 temperature = 17; // in Kelvin
	// Critical warnings
	bool temp_warn = 18;
	bool avail_spare_warn = 19;
	bool dev_reliability_warn = 20;
	bool read_only_warn = 21;
	bool volatile_mem_warn = 22; // volatile memory backup
	int32 status = 23; // DAOS err code
	string dev_uuid = 24; // UUID of blobstore
	// Usage stats
	uint64 total_bytes = 25; // size of blobstore
	uint64 avail_bytes = 26; // free space in blobstore
	// Intel vendor SMART attributes
	uint32 program_fail_cnt_norm = 27; // percent remaining
	uint64 program_fail_cnt_raw = 28; // current value
	uint32 erase_fail_cnt_norm = 29;
	uint64 erase_fail_cnt_raw = 30;
	uint32 wear_leveling_cnt_norm = 31;
	uint32 wear_leveling_cnt_min = 32;
	uint32 wear_leveling_cnt_max = 33;
	uint32 wear_leveling_cnt_avg = 34;
	uint64 endtoend_err_cnt_raw = 35;
	uint64 crc_err_cnt_raw = 36;
	uint64 media_wear_raw = 37;
	uint64 host_reads_raw = 38;
	uint64 workload_timer_raw = 39;
	uint32 thermal_throttle_status = 40;
	uint64 thermal_throttle_event_cnt = 41;
	uint64 retry_buffer_overflow_cnt = 42;
	uint64 pll_lock_loss_cnt = 43;
	uint64 nand_bytes_written = 44;
	uint64 host_bytes_written = 45;
	// Engine configs properties
	uint64 cluster_size = 46;		// blobstore cluster size in bytes
	uint64 meta_wal_size = 47;		// metadata WAL blob size
	uint64 rdb_wal_size = 48;		// RDB WAL blob size
}

enum NvmeDevState {
	NORMAL = 0;	// Device is in a normal operational state
	NEW = 1;	// Device is new and is not yet in-use
	EVICTED = 2;	// Device is faulty and has been evicted
	UNPLUGGED = 3;	// Device has been physically removed
}

enum LedState {
	OFF = 0;		// Equivalent to SPDK_VMD_LED_STATE_OFF
	QUICK_BLINK = 1;	// Equivalent to SPDK_VMD_LED_STATE_IDENTIFY	(4Hz blink)
	ON = 2;			// Equivalent to SPDK_VMD_LED_STATE_FAULT	(solid on)
	SLOW_BLINK = 3;		// Equivalent to SPDK_VMD_LED_STATE_REBUILD	(1Hz blink)
	NA = 4;			// Equivalent to SPDK_VMD_LED_STATE_UNKNOWN	(VMD not enabled)
}

// SmdDevice represents a DAOS BIO device, identified by a UUID written into a label stored on a
// SPDK blobstore created on a NVMe namespace. Multiple SmdDevices may exist per NVMe controller.
message SmdDevice {
	string uuid = 1;		// UUID of blobstore
	repeated int32 tgt_ids = 2;	// VOS target IDs
	string tr_addr = 3;		// Transport address of blobstore
	NvmeDevState dev_state = 4;	// NVMe device state
	LedState led_state = 5;		// LED state
	uint64 total_bytes = 6;		// blobstore clusters total bytes
	uint64 avail_bytes = 7;		// Available RAW storage for data
	uint64 cluster_size = 8;	// blobstore cluster size in bytes
	uint32 rank = 9;		// DAOS I/O Engine using controller
	uint32 role_bits = 10;		// Device active roles (bitmask)
	uint64 meta_size = 11;		// Size of the metadata (i.e. vos file index) blob
	uint64 meta_wal_size = 12;	// Size of the metadata WAL blob
	uint64 rdb_size = 13;		// Size of the RDB blob
	uint64 rdb_wal_size = 14;	// Size of the RDB WAL blob
	uint64 usable_bytes = 15;	// Effective storage available for data
}

message SmdDevReq {}

message SmdDevResp {
	int32 status = 1;
	repeated SmdDevice devices = 2;
}

message SmdPoolReq {}

message SmdPoolResp {
	message Pool {
		string uuid = 1; // UUID of VOS pool
		repeated int32 tgt_ids = 2; // VOS target IDs
		repeated uint64 blobs = 3; // SPDK blobs
	}
	int32 status = 1;
	repeated Pool pools = 2;
}

message SmdQueryReq {
	bool omit_devices = 1;		// Indicate query should omit devices
	bool omit_pools = 2;		// Indicate query should omit pools
	bool include_bio_health = 3;	// Indicate query should include BIO health for devices
	string uuid = 4;		// Constrain query to this UUID (pool or device)
	uint32 rank = 5;		// Restrict response to only include info about this rank
}

message SmdQueryResp {
	message SmdDeviceWithHealth {
		SmdDevice details = 1;
		BioHealthResp health = 2; // optional BIO health
	}
	message Pool {
		string uuid = 1; // UUID of VOS pool
		repeated int32 tgt_ids = 2; // VOS target IDs
		repeated uint64 blobs = 3; // SPDK blobs
	}
	message RankResp {
		uint32 rank = 1; // rank to which this response corresponds
		repeated SmdDeviceWithHealth devices = 2; // List of devices on the rank
		repeated Pool pools = 3; // List of pools on the rank
	}
	int32 status = 1; // DAOS error code
	repeated RankResp ranks = 2; // List of per-rank responses
}

enum LedAction {
	GET = 0;
	SET = 1;
	RESET = 2;
}

message LedManageReq {
	string ids = 1;			// List of Device-UUIDs and/or PCI-addresses
	LedAction led_action = 3;	// LED action to perform
	LedState led_state = 4;		// LED state to set (used if action is SET)
	uint32 led_duration_mins = 5;	// LED action duration (how long to blink LED in minutes)
}

message DevReplaceReq {
	string old_dev_uuid = 1;	// UUID of old (hot-removed) blobstore/device
	string new_dev_uuid = 2;	// UUID of new (hot-plugged) blobstore/device
	bool no_reint = 3;		// Skip device reintegration if set
}

message SetFaultyReq {
	string uuid = 1;	// Device-UUID (as recorded in SMD)
}

message DevManageResp {
	int32 status = 1;	// DAOS error code
	SmdDevice device = 2;	// Details of device that has been managed
}

message SmdManageReq {
	oneof op{
		LedManageReq led = 1;		// Request to manage LED state
		DevReplaceReq replace = 2;	// Request to replace SMD device
		SetFaultyReq faulty = 3;	// Request to set SMD device faulty
	}
}

message SmdManageResp {
	message Result {
		int32 status = 1;		// DAOS error code
		SmdDevice device = 2;
	}
	message RankResp {
		uint32 rank = 1;		// Rank to which this response corresponds
		repeated Result results = 2;	// List of device results on the rank
	}
	repeated RankResp ranks = 1;		// List of per-rank responses
}
