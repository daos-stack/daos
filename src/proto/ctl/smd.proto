//
// (C) Copyright 2019-2022 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

syntax = "proto3";
package ctl;

option go_package = "github.com/daos-stack/daos/src/control/common/proto/ctl";

// Control Service Protobuf Definitions related to interactions between
// DAOS control server and DAOS Blob I/O (BIO) module and Per-Server Metadata
// (SMD).

message BioHealthReq {
	string dev_uuid = 1;
	string tgt_id = 2;
}

// BioHealthResp mirrors nvme_health_stats structure.
message BioHealthResp {
	reserved 1, 2;
	uint64 timestamp = 3;
	// Device health details
	uint32 warn_temp_time = 5;
	uint32 crit_temp_time = 6;
	uint64 ctrl_busy_time = 7;
	uint64 power_cycles = 8;
	uint64 power_on_hours = 9;
	uint64 unsafe_shutdowns = 10;
	uint64 media_errs = 11;
	uint64 err_log_entries = 12;
	// I/O error counters
	uint32 bio_read_errs = 13;
	uint32 bio_write_errs = 14;
	uint32 bio_unmap_errs = 15;
	uint32 checksum_errs = 16;
	uint32 temperature = 17; // in Kelvin
	// Critical warnings
	bool temp_warn = 18;
	bool avail_spare_warn = 19;
	bool dev_reliability_warn = 20;
	bool read_only_warn = 21;
	bool volatile_mem_warn = 22; // volatile memory backup
	int32 status = 23; // DAOS err code
	string dev_uuid = 24; // UUID of blobstore
	// Usage stats
	uint64 total_bytes = 25; // size of blobstore
	uint64 avail_bytes = 26; // free space in blobstore
	// Intel vendor SMART attributes
	uint32 program_fail_cnt_norm = 27; // percent remaining
	uint64 program_fail_cnt_raw = 28; // current value
	uint32 erase_fail_cnt_norm = 29;
	uint64 erase_fail_cnt_raw = 30;
	uint32 wear_leveling_cnt_norm = 31;
	uint32 wear_leveling_cnt_min = 32;
	uint32 wear_leveling_cnt_max = 33;
	uint32 wear_leveling_cnt_avg = 34;
	uint64 endtoend_err_cnt_raw = 35;
	uint64 crc_err_cnt_raw = 36;
	uint64 media_wear_raw = 37;
	uint64 host_reads_raw = 38;
	uint64 workload_timer_raw = 39;
	uint32 thermal_throttle_status = 40;
	uint64 thermal_throttle_event_cnt = 41;
	uint64 retry_buffer_overflow_cnt = 42;
	uint64 pll_lock_loss_cnt = 43;
	uint64 nand_bytes_written = 44;
	uint64 host_bytes_written = 45;
	// Engine configs properties
	uint64 cluster_size = 46; // blobstore cluster size in bytes
}

message SmdDevReq {
}

message SmdDevResp {
	message Device {
		reserved 3;
		reserved "state";
		string uuid = 1; // UUID of blobstore
		repeated int32 tgt_ids = 2; // VOS target IDs
		string tr_addr = 4; // Transport address of blobstore
		string dev_state = 5; // NVMe device state
	}
	int32 status = 1;
	repeated Device devices = 2;
}

message SmdPoolReq {
}

message SmdPoolResp {
	message Pool {
		string uuid = 1; // UUID of VOS pool
		repeated int32 tgt_ids = 2; // VOS target IDs
		repeated uint64 blobs = 3; // SPDK blobs
	}
	int32 status = 1;
	repeated Pool pools = 2;
}

message DevStateReq {
	string dev_uuid = 1; // UUID of blobstore
}

message DevStateResp {
	reserved 3;
	int32 status = 1; // DAOS error code
	string dev_uuid = 2; // UUID of blobstore
	string dev_state = 4; // NVMe device state
}

message DevReplaceReq {
	string old_dev_uuid = 1; // UUID of old (hot-removed) blobstore/device
	string new_dev_uuid = 2; // UUID of new (hot-plugged) blobstore/device
	bool   noReint      = 3; // Skip device reintegration if set
}

message DevReplaceResp {
	reserved 3;
	int32 status = 1; // DAOS error code
	string new_dev_uuid = 2; // UUID of new (hot-plugged) blobstore/device
	string dev_state = 4; // NVMe device state
}

message DevIdentifyReq {
	string dev_uuid = 1; // UUID of VMD uuid
}

message DevIdentifyResp {
	reserved 3;
	reserved "led_state";
	int32 status = 1; // DAOS error code
	string dev_uuid = 2; // UUID of VMD uuid
	string dev_state = 4; // NVMe device state
}

message SmdQueryReq {
	reserved 8;
	reserved "replaceUUID";
	bool omit_devices = 1; // query should omit devices
	bool omit_pools = 2; // query should omit pools
	bool include_bio_health = 3; // query should include BIO health for devices
	bool set_faulty = 4; // set the specified device to FAULTY
	string uuid = 5; // constrain query to this UUID (pool or device)
	uint32 rank = 6; // response should only include information about this rank
	string target = 7; // response should only include information about this VOS target
	bool no_reint = 9; // specify if device reint is needed (used for replace cmd)
	bool identify = 10; // set the VMD LED state to quickly blink
	uint32 state_mask = 11; // show only devices with state matching bit-mask
	string replace_uuid = 12; // UUID of new device to replace storage with
}

message SmdQueryResp {
	message Device {
		reserved 3;
		reserved "state";
		string uuid = 1; // UUID of blobstore
		repeated int32 tgt_ids = 2; // VOS target IDs
		string tr_addr = 4; // Transport address of blobstore
		BioHealthResp health = 5; // optional BIO health
		string dev_state = 6; // NVMe device state
	}
	message Pool {
		string uuid = 1; // UUID of VOS pool
		repeated int32 tgt_ids = 2; // VOS target IDs
		repeated uint64 blobs = 3; // SPDK blobs
	}
	message RankResp {
		uint32 rank = 1; // rank to which this response corresponds
		repeated Device devices = 2; // List of devices on the rank
		repeated Pool pools = 3; // List of pools on the rank
	}
	int32 status = 1; // DAOS error code
	repeated RankResp ranks = 2; // List of per-rank responses
}
