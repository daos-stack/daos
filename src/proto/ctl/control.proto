//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package ctl;

import "storage.proto";
import "network.proto";
import "system.proto";
import "firmware.proto";

// Service definitions for communications between gRPC management server and
// client regarding tasks related to DAOS system and server hardware.
//
// System* RPCs will only be processed on mgmt svc replica hosts.
//
// All MgmtCtl service RPCs will terminate at gRPC server and not traverse
// dRPC channel.
service MgmtCtl {
	// Prepare nonvolatile storage devices for use with DAOS
	rpc StoragePrepare(StoragePrepareReq) returns (StoragePrepareResp) {};
	// Retrieve details of nonvolatile storage on server, including health info
	rpc StorageScan(StorageScanReq) returns(StorageScanResp) {};
	// Format nonvolatile storage devices for use with DAOS
	rpc StorageFormat(StorageFormatReq) returns(StorageFormatResp) {};
	// Query DAOS system status
	rpc SystemQuery(SystemQueryReq) returns(SystemQueryResp) {};
	// Stop DAOS system (shutdown data-plane instances)
	rpc SystemStop(SystemStopReq) returns(SystemStopResp) {};
	// ResetFormat DAOS system (restart data-plane instances)
	rpc SystemResetFormat(SystemResetFormatReq) returns(SystemResetFormatResp) {};
	// Start DAOS system (restart data-plane instances)
	rpc SystemStart(SystemStartReq) returns(SystemStartResp) {};
	// Perform a fabric scan to determine the available provider, device, NUMA node combinations
	rpc NetworkScan (NetworkScanReq) returns (NetworkScanResp) {};
	// Retrieve firmware details from storage devices on server
	rpc FirmwareQuery(FirmwareQueryReq) returns (FirmwareQueryResp) {};
	// Update firmware on storage devices on server
	rpc FirmwareUpdate(FirmwareUpdateReq) returns (FirmwareUpdateResp) {};
}
