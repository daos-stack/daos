//
// (C) Copyright 2019 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package ctl;

import "common.proto";
import "storage.proto";
import "features.proto";

// Service definitions for communications between gRPC management server and
// client regarding tasks related to DAOS storage server hardware.
service MgmtCtl {
    // Prepare nonvolatile storage devices for use with DAOS
    rpc StoragePrepare(StoragePrepareReq) returns (StoragePrepareResp) {};
    // Retrieve details of nonvolatile storage on server, including health info
    rpc StorageScan(StorageScanReq) returns(StorageScanResp) {};
    // Format nonvolatile storage devices for use with DAOS
    rpc StorageFormat(StorageFormatReq) returns(stream StorageFormatResp) {};
    // Update nonvolatile storage device firmware
    rpc StorageUpdate(StorageUpdateReq) returns(stream StorageUpdateResp) {};
    // Perform burn-in testing to verify nonvolatile storage devices
    rpc StorageBurnIn(StorageBurnInReq) returns(stream StorageBurnInResp) {};
    // Fetch FIO configuration file specifying burn-in jobs/workloads
    rpc FetchFioConfigPaths(EmptyReq) returns(stream FilePath) {};
    // List features supported on remote storage server/DAOS system
    rpc ListFeatures(EmptyReq) returns(stream Feature) {};
}
