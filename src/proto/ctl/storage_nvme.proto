//
// (C) Copyright 2019-2022 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

syntax = "proto3";
package ctl;

option go_package = "github.com/daos-stack/daos/src/control/common/proto/ctl";

import "ctl/common.proto";

// NVMe Storage Protobuf Definitions related to interactions between
// DAOS control server and locally attached storage.

// NvmeController represents an NVMe Controller (SSD).
message NvmeController {
	// Health mirrors bio_dev_state structure.
	message Health {
		uint64 timestamp = 1;
		// Device health details
		uint32 warn_temp_time = 3;
		uint32 crit_temp_time = 4;
		uint64 ctrl_busy_time = 5;
		uint64 power_cycles = 6;
		uint64 power_on_hours = 7;
		uint64 unsafe_shutdowns = 8;
		uint64 media_errs = 9;
		uint64 err_log_entries = 10;
		// I/O error counters
		uint32 bio_read_errs = 11;
		uint32 bio_write_errs = 12;
		uint32 bio_unmap_errs = 13;
		uint32 checksum_errs = 14;
		uint32 temperature = 15; // in Kelvin
		// Critical warnings
		bool temp_warn = 16;
		bool avail_spare_warn = 17;
		bool dev_reliability_warn = 18;
		bool read_only_warn = 19;
		bool volatile_mem_warn = 20; // volatile memory backup
		// Intel vendor SMART attributes
		uint32 program_fail_cnt_norm = 21;
		uint64 program_fail_cnt_raw = 22;
		uint32 erase_fail_cnt_norm = 23;
		uint64 erase_fail_cnt_raw = 24;
		uint32 wear_leveling_cnt_norm = 25;
		uint32 wear_leveling_cnt_min = 26;
		uint32 wear_leveling_cnt_max = 27;
		uint32 wear_leveling_cnt_avg = 28;
		uint64 endtoend_err_cnt_raw = 29;
		uint64 crc_err_cnt_raw = 30;
		uint64 media_wear_raw = 31;
		uint64 host_reads_raw = 32;
		uint64 workload_timer_raw = 33;
		uint32 thermal_throttle_status = 34;
		uint64 thermal_throttle_event_cnt = 35;
		uint64 retry_buffer_overflow_cnt = 36;
		uint64 pll_lock_loss_cnt = 37;
		uint64 nand_bytes_written = 38;
		uint64 host_bytes_written = 39;
	}

	// Namespace represents a namespace created on an NvmeController.
	message Namespace {
		uint32 id = 1;			// namespace id
		uint64 size = 2;		// device capacity in bytes
		string ctrlr_pci_addr = 3;	// parent controller PCI address
	}

	// SmdDevice represents a blobstore created on a NvmeController_Namespace.
	// TODO: this should be embedded in Namespace above
	message SmdDevice {
		reserved 3;
		reserved "state";
		string uuid = 1;		// UUID of blobstore
		repeated int32 tgt_ids = 2;	// VOS target IDs
		uint32 rank = 4;		// DAOS I/O Engine using controller
		uint64 total_bytes = 5;		// blobstore clusters total bytes
		uint64 avail_bytes = 6;		// blobstore clusters available bytes
		string tr_addr = 7;		// transport address of the blobstore
		string dev_state = 8;		// NVMe device state
		uint64 cluster_size = 9;        // blobstore cluster size in bytes
	}

	string model = 1;	// model name
	string serial = 2;	// serial number
	string pci_addr = 3;	// pci address
	string fw_rev = 4;	// firmware revision
	int32 socket_id = 5;	// NUMA socket ID
	Health health_stats = 6;	// controller's health stats
	repeated Namespace namespaces = 7;	// controller's namespaces
	repeated SmdDevice smd_devices = 8;	// controller's blobstores
}

// NvmeControllerResult represents state of operation performed on controller.
message NvmeControllerResult {
	string pci_addr = 1;		// PCI address of NVMe controller
	ResponseState state = 2;	// state of current operation
}

message ScanNvmeReq {
	bool Health = 1; // Retrieve NVMe device health statistics
	bool Meta = 2; // Retrieve metadata relating to NVMe device
	bool Basic = 3; // Strip NVMe device details to only basic
}

message ScanNvmeResp {
	repeated NvmeController ctrlrs = 1;
	ResponseState state = 2;
}

message FormatNvmeReq {}

// FormatNvmeResp isn't required because controller results are returned instead

