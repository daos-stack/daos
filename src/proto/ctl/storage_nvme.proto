//
// (C) Copyright 2019-2022 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

syntax = "proto3";
package ctl;

option go_package = "github.com/daos-stack/daos/src/control/common/proto/ctl";

import "ctl/common.proto";
import "ctl/smd.proto";

// NVMe Storage Protobuf Definitions related to interactions between
// DAOS control server and locally attached storage.

// NvmeController represents an NVMe Controller (SSD).
message NvmeController {
	// Namespace represents a namespace created on an NvmeController.
	message Namespace {
		uint32 id = 1;			// namespace id
		uint64 size = 2;		// device capacity in bytes
		string ctrlr_pci_addr = 3;	// parent controller PCI address
	}

	string model = 1;			// model name
	string serial = 2;			// serial number
	string pci_addr = 3;			// pci address
	string fw_rev = 4;			// firmware revision
	int32 socket_id = 5;			// NUMA socket ID
	BioHealthResp health_stats = 6;		// controller's health stats
	repeated Namespace namespaces = 7;	// controller's namespaces
	repeated SmdDevice smd_devices = 8;	// controller's blobstores
}

// NvmeControllerResult represents state of operation performed on controller.
message NvmeControllerResult {
	string pci_addr = 1;		// PCI address of NVMe controller
	ResponseState state = 2;	// state of current operation
}

message ScanNvmeReq {
	bool Health = 1;	// Retrieve NVMe device health statistics
	bool Meta = 2;		// Retrieve metadata relating to NVMe device
	bool Basic = 3;		// Strip NVMe device details to only basic
	uint64 MetaSize = 4;	// Size of the metadata blob
	uint64 RdbSize = 5;	// Size of the RDB blob
}

message ScanNvmeResp {
	repeated NvmeController ctrlrs = 1;
	ResponseState state = 2;
}

message FormatNvmeReq {}

// FormatNvmeResp isn't required because controller results are returned instead

