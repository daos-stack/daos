//
// (C) Copyright 2018 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. B609815.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//
syntax = "proto3";
package drpc;

/**
 * Call describes a function call to be executed over the dRPC channel.
 */
message Call {
	int32 module = 1; // ID of the module to process the call.
	int32 method = 2; // ID of the method to be executed.
	int64 sequence = 3; // Sequence number for matching a response to this call.
	bytes body = 4; // Input payload to be used by the method.
}

/**
 * Status represents the valid values for a response status.
 */
enum Status {
	SUCCESS = 0; // The method executed and provided a response payload, if needed. Otherwise, the method simply succeeded.
	SUBMITTED = 1; // The method has been queued for asynchronous execution.
	FAILURE = 2; // The method has failed and did not provide a response payload.
	UNKNOWN_MODULE = 3; // The requested module does not exist.
	UNKNOWN_METHOD = 4; // The requested method does not exist.
	FAILED_UNMARSHAL_CALL = 5; // Could not unmarshal the incoming call.
	FAILED_UNMARSHAL_PAYLOAD = 6; // Could not unmarshal the method-specific payload of the incoming call.
	FAILED_MARSHAL = 7; // Generated a response payload, but couldn't marshal it into the response.
}

/**
 * Response describes the result of a dRPC call.
 */
message Response {
	int64 sequence = 1; // Sequence number of the Call that triggered this response.
	Status status = 2; // High-level status of the RPC. If SUCCESS, method-specific status may be included in the body.
	bytes body = 3; // Output payload produced by the method.
}
