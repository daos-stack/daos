//
// (C) Copyright 2019-2022 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

// This file defines the messages used by DRPC_MODULE_SRV.

syntax = "proto3";
package srv;

option go_package = "github.com/daos-stack/daos/src/control/common/proto/srv";

message NotifyReadyReq {
	string uri = 1; // CaRT URI
	uint32 nctxs = 2; // Number of CaRT contexts
	string drpcListenerSock = 3; // Path to I/O Engine's dRPC listener socket
	uint32 instanceIdx = 4; // I/O Engine instance index
	uint32 ntgts = 5; // number of VOS targets allocated in I/O Engine
	uint64 incarnation = 6; // HLC incarnation number
	bool   check_mode = 7; // True if engine started in checker mode
}

// NotifyReadyResp is nil.

message BioErrorReq {
	bool unmapErr = 1; // unmap I/O error
	bool readErr = 2; // read I/O error
	bool writeErr = 3; // write I/O error
	int32 tgtId = 4;  // VOS target ID
	uint32 instanceIdx = 5; // I/O Engine instance index
	string drpcListenerSock = 6; // Path to I/O Engine's dRPC listener socket
	string uri = 7; // CaRT URI
}

// BioErrorResp is nil.

message GetPoolSvcReq {
	string uuid = 1; // Pool UUID
}

message GetPoolSvcResp {
	int32 status = 1; // DAOS error code
	repeated uint32 svcreps = 2; // Pool service replica ranks
}

message PoolFindByLabelReq {
	string label = 1; // Pool label
}

message PoolFindByLabelResp {
	int32 status = 1; // DAOS error code
	string uuid = 2; // Pool UUID
	repeated uint32 svcreps = 3; // Pool service replica ranks
}

// List all the known pools from MS.
message CheckListPoolReq {
}

message CheckListPoolResp {
	message OnePool {
		string uuid = 1; // Pool UUID.
		string label = 2; // Pool label.
		repeated uint32 svcreps = 3; // Pool service replica ranks.
	}
	int32 status = 1; // DAOS error code.
	repeated OnePool pools = 2; // The list of pools.
}

// Register pool to MS.
message CheckRegPoolReq {
	uint64 seq = 1; // DAOS Check event sequence, unique for the instance.
	string uuid = 2; // Pool UUID.
	string label = 3; // Pool label.
	repeated uint32 svcreps = 4; // Pool service replica ranks.
}

message CheckRegPoolResp {
	int32 status = 1; // DAOS error code.
}

// Deregister pool from MS.
message CheckDeregPoolReq {
	uint64 seq = 1; // DAOS Check event sequence, unique for the instance.
	string uuid = 2; // The pool to be deregistered.
}

message CheckDeregPoolResp {
	int32 status = 1; // DAOS error code.
}

// DAOS check engine reports the found inconsistency and repair result to control plane.
// If the repair action is CIA_INTERACT, then the control plane will reply current dRPC
// firstly, and then interact with the admin for the repair decision in another section
// and tell DAOS check engine via another DRPC_METHOD_MGMT_CHK_ACT dRPC call.
//
// If the CheckReportReq::msg is not enough to help admin to make the decision, then we
// may have to leverage DAOS debug tools to dump more information from related target.
message CheckReportReq {
	uint64 seq = 1; // DAOS Check event sequence, unique for the instance.
	uint64 class = 2; // Inconsistency class - see CheckInconsistClass.
	uint32 action = 3; // The action to repair the inconsistency - see CheckInconsistAction.
	bool repaired = 4; // Repaired or not, meaningless if the action is CIA_INTERACT.
	uint32 rank = 5; // Inconsistency happened on which rank if applicable.
	uint32 target = 6; // Inconsistency happened on which target in the rank if applicable.
	string pool_uuid = 7; // The consistency is in which pool if applicable.
	string cont_uuid = 8; // The consistency is in which container if applicable.
	string objid = 9; // The consistency is in which object if applicable.
	string dkey = 10; // The consistency is in which dkey if applicable.
	string akey = 11; // The consistency is in which akey if applicable.
	string timestamp = 12; // The time of report (and repair) the inconsistency.
	string msg = 13; // Information to describe the inconsistency in detail.
	repeated string options = 14; // Options list for interaction mode.
}

message CheckReportResp {
	int32 status = 1; // DAOS error code.
}
