This file lists the environment variables used in CaRT.

 . D_PROVIDER (Deprecated: CRT_PHY_ADDR_STR)
   It determines which mercury NA plugin and transport to be used:
   - set it as "ofi+verbs;ofi_rxm" to use OFI verbs;ofi_rxm provider
   - set it as "sm" to use SM plugin which only works within single node
   - set it as "ofi+tcp" to use OFI tcp provider.
   - by default (not set or set as any other value) it will use ofi tcp
      provider.

 . D_LOG_FILE
   Set it as a file path (for example "/tmp/crt.xxx.log") to make GURT log debug
   messages to that file. Or will log to stdout.

 . D_LOG_STDERR_IN_LOG
   For debugging purpose, it will allow to redirect stderr messages in log file.
   Thus, messages from external libs, like libfabric, will be merged in log
   in correct sequence.

 . D_LOG_FILE_APPEND_PID
   Set this to a non-zero value to create separate log files based upon the
   process id (pid). The pid number will be appended to the log file specified
   in D_LOG_FILE. If not defined or setting to zero value will result in this
   feature being disabled.

 . D_LOG_FILE_APPEND_RANK
   Set this to a non-zero value to create separate log files based upon the
   process cart rank. When enabled this feature will rename the existing log file
   and append rank to the filename upon the first invocation of rank setting.
   Subsequent settings of the rank within the process are treated as noops.
   As ranks are only set on the server, this is a server-only feature.

 . D_LOG_SIZE
   DAOS debug logs (both server and client) have a 1GB file size limit by
   default. When this limit is reached, the current log file is closed and
   renamed with a .old suffix, and a new one is opened. This mechanism will
   repeat each time the limit is reached, meaning that available saved log
   records could be found in both ${D_LOG_FILE} and last generation of
   ${D_LOG_FILE}.old files, to a maximum of the most recent 2*D_LOG_SIZE
   records.  This can be modified by setting this environment variable
   ("D_LOG_SIZE=536870912"). Sizes can also be specified in human-readable form
   using `k`, `m`, `g`, `K`, `M`, and `G`. The lower-case specifiers are
   base-10 multipliers and the upper case specifiers are base-2 multipliers.

 . D_LOG_TRUNCATE
   Set this to truncate log file to size=0 before writing to it. Otherwise log
   file will be appended. Log file is specified by D_LOG_FILE envariable.

 . D_LOG_MASK
   Can set different log levels for different subsystem.
   GURT defined several debug subsystem(log facility): MISC, MEM, RPC, CORPC,
   BULK, GRP, LM, HG, etc.
   Can set different log level for different subsystems, for example:
   "export D_LOG_MASK=DEBUG" will set all subsystems' loglevel as DEBUG
   "export D_LOG_MASK=ERR,RPC=DEBUG,BULK=INFO" will set RPC's loglevel as
   DEBUG, BULK's log level as INFO, all other subsystems' loglevel as ERR.
   If neither above 2 or 3 ENVs set, the default loglevel is WARN and log device
   is stdout.

 . DD_MASK
   Can enable different debug streams for finer-grained debugging per subsystem,
   for example: "DD_MASK="trace"" will log only debug messages with the bit mask
   DB_TRACE associated with them. Multiple streams can be set as well, for
   example: "DD_MASK="io,mem"" will allow logging of a subset of debug messages
   related to io path (bit mask=DB_IO) and memory operations (bit mask=DB_MEM).
   Since these are debug masks, the subsystem/facility must have the debug log
   set ("D_LOG_MASK=DEBUG"), otherwise other priorities take precedence. The bit
   streams are passed as a parameter to D_DEBUG(mask, fmt, ...).

 . D_LOG_FLUSH
   Specifies priority level for flushing of messages into the log file.
   Can be set to one of the following "DBUG,INFO,NOTE,WARN,ERR,CRIT,ALRT,EMRG,EMIT"
   If not set will default to "WARN".

 . DD_STDERR
   User can specify the priority level to output to stderr, for example:
   "DD_STDERR="info"" will log all DLOG_INFO priority messages to stderr.
   The default for cart is DLOG_EMERG ("fatal"), and for daos is DLOG_CRIT
   ("critical"). Options include: "info/note/warn(ing)/err(or)/crit(ical)/fatal"

 . DD_SUBSYS
   User can specify which subsystems to enable. Gurt default subsystems which
   are always enabled are MEM, MISC, and CLOG. All CaRT facilities are enabled
   by default, and can be specified using DD_SUBSYS, for example:
   "DD_SUBSYS=RPC,BULK,CORPC,GRP,LM,HG,PMIX,ST,IV" or also "DD_SUBSYS=all".

 . D_MEMORY_TRACK
   User can enable memory track for daos engine by D_MEMORY_TRACK=1. With the
   environment, all of allocations inside DAOS (by D_ALLOC) will be tracked, and
   total allocated bytes per xstream can be shown through metrics.

 . CRT_TIMEOUT
   Set it as integer in the range of (0, 3600] to set the global timeout value
   of all RPCs (second). Without setting it or set it as any other value will
   take the default timeout value of 60 second.

.  CRT_ATTACH_INFO_PATH
   Set this environment variable in order to specify a custom prefix path for
   '.attach_info_tmp' file generated.
   When set to the "path" the file generated will have a form of:
       <path>/<cart group name>.attach_info_tmp
   When not set the file generated will have a form of:
      /tmp/<cart group name>.attach_info_tmp
   Calling crt_group_config_path_set() will overwrite the prefix path setting by
   CRT_ATTACH_INFO_PATH, however this ENV setting provides a method to control
   the prefix path without calling API which needs to change code.

 . D_PORT (Deprecated: OFI_PORT)
   Set it as a port number, when creating NA classes it will use the consecutive
   port numbers start from it.
   When it is not set, then will use random port number.
   Supports a comma separated list of ports, similar to D_INTERFACE handling.

 . D_PORT_AUTO_ADJUST
   Automatically adjusts provided port (via D_PORT) to be within a valid range for
   a given provider. Currently only implemented for CXI to adjust port to be within
   0-511 range.

 . D_INTERFACE (Deprecated: OFI_INTERFACE)
   Set it as the network device name to be used for network communication, for
   example "eth0", "ib0" or "ens33" etc.
   Supports a comma separated list of interfaces, for example "eth0,ib0,ens33".
   If multiple interfaces are specified then CaRT is initialized on all of them,
   allowing allocation of CaRT contexts on them using crt_context_create_on_iface_idx() API.
   If no interface is specified, the network layer will select one automatically
   during context creation (crt_context_create() API)

 . D_DOMAIN (Deprecated: OFI_DOMAIN)
   Set it as the network domain name to be used for network communications. Domain
   name can be determined by running 'hg_info' app. If not set, D_DOMAIN is
   attempted to be automatically determined. Supports a comma separated list of
   domain names, similar to handling of D_INTERFACE.

 . D_PROVIDER_AUTH_KEY
   Set it as the authentication key to be used for fabric communication. All
   processes must use the same key in order to communicate. If not set,
   D_PROVIDER_AUTH_KEY is assumed to be empty.
   Supports a comma separated list of keys, similar to D_INTERFACE handling

 . CRT_CREDIT_EP_CTX
   Set it as the max number of in-flight RPCs to a target endpoint context, the
   valid range is [0, 256].
   If it is not set then will use the default value of 32.
   It its value exceed 256, then will use 256 for flow control.
   Set it to zero means disable the flow control in cart.

 . D_QUOTA_RPCS
   Set it as the max number of per-context inflight RPCs that a sender will send
   onto a wire. Quota on each context is independent of each other.
   If it is not set the default value of 64 is used.
   Setting it to 0 disables quota

 . CRT_CTX_NUM
   If set, specifies the limit of number of allowed CaRT contexts to be created.
   Valid range is [1, 128], with default being 128 if unset.

 . D_FI_CONFIG
   Specifies the fault injection configuration file. If this variable is not set
   or set to empty, fault injection is disabled.

 . CRT_ENABLE_MEM_PIN
   Enables memory pinning for CART-890 workaround

 . CRT_MRC_ENABLE
   When not set automatically disables MR caching via FI_MR_CACHE_MAX_COUNT=0
   envariable setting. Set to non 0 to re-enable MR caching in the provider.

 . CRT_TEST_CONT
   When set to 1, orterun does not automatically shut down other servers when
   one server is shutdown. Used in cart internal testing.

 . D_CLIENT_METRICS_ENABLE
   When set to 1, client side metrics will be collected on each daos client, which
   can by retrieved by daos_metrics -j job_id on each client. Only needed if
   daos_agent is not configured to enable client metrics for all connected processes.

 . D_CLIENT_METRICS_RETAIN
   When set to 1, client side metrics will be retained even after the job exits, i.e.
   those metrics can be retrieved by daos_metrics even after job exits. Normally
   managed by daos_agent.

 . D_CLIENT_METRICS_DUMP_DIR
   Set parent directory for client side metrics. Each client will write its metrics to
   a file with the pattern <D_CLIENT_METRICS_DUMP_DIR>/<DAOS_JOBID>-<pid>.csv. As a
   convenience, setting this variable automatically sets D_CLIENT_METRICS_ENABLE=1.

   D_POST_INIT
   (server only) Controls the initial number of requests that are posted on context creation.
   When using a transport that supports multi-recv, also controls the maximum size
   of buffers (DAOS_RPC_SIZE x D_POST_INIT x D_MRECV_BUF).

   D_POST_INCR
   (server only) Controls the number of RPC handles that are incrementally posted when the
   initial number of requests (D_POST_INIT) is exhausted.

   D_MRECV_BUF
   (server only) When using a transport that supports multi-recv, controls the total number
   of multi-recv buffers that are posted.

   D_MRECV_BUF_COPY
   (server only) When using a transport that supports multi-recv, controls when we should
   start copying data in an effort to release multi-recv buffers. Copy will occur when at
   most D_MRECV_BUF_COPY buffers remain.

   D_THREAD_MODE_SINGLE
   Relax thread safety when user can guarantee that only a single thread will access
   CART context at the same time. Setting this variable may improve performance.

   SWIM_TRAFFIC_CLASS
   (server only) Select a traffic class for the SWIM protocol to use and prevent potential
   traffic congestion. Available options are: "unspec" (default), "best_effort",
   "low_latency", "bulk_data".

 . CRT_CXI_INIT_RETRY
   Retry count for HG_Init_opt2() when initializing the CXI provider (default = 3).
