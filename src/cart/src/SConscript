#!python
# (C) Copyright 2016-2020 Intel Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
# The Government's rights to use, modify, reproduce, release, perform, display,
# or disclose this software are subject to the terms of the Apache License as
# provided in Contract No. 8F-30005.
# Any reproduction of computer software, computer software documentation, or
# portions thereof marked with this legend must also reproduce the markings.
#
"""Build cart src"""
import os

HEADERS = ['api.h', 'iv.h', 'types.h', 'swim.h']
HEADERS_GURT = ['dlog.h', 'debug.h', 'common.h', 'hash.h', 'list.h',
                'heap.h', 'errno.h', 'fault_inject.h', 'debug_setup.h',
                'types.h', 'atomic.h']

def scons():
    """Scons function"""

    Import('env')

    # There is probably a better way to do this but let's get it linking first
    env.AppendUnique(LIBPATH=[Dir('cart')])
    env.AppendUnique(LIBPATH=[Dir('gurt')])
    env.AppendUnique(LINKFLAGS=["-Wl,-rpath-link=%s" % Dir('cart').path])
    env.AppendUnique(LINKFLAGS=["-Wl,-rpath-link=%s" % Dir('gurt').path])
    env.AppendUnique(CPPPATH=[Dir('include').srcnode()])
    for header in HEADERS:
        env.Install(os.path.join('$PREFIX', 'include', 'cart'),
                    os.path.join('include', 'cart', header))
    for header in HEADERS_GURT:
        env.Install(os.path.join('$PREFIX', 'include', 'gurt'),
                    os.path.join('include', 'gurt', header))

    # Generate the common libraries used by everyone
    SConscript('gurt/SConscript')
    SConscript('swim/SConscript')
    SConscript('cart/SConscript')

    # Builders
    SConscript('test/SConscript')

    # Build self test
    SConscript('self_test/SConscript')

    # Build crt_launch
    SConscript('crt_launch/SConscript')

    # Build cart_ctl
    SConscript('ctl/SConscript')

    # Build the unit tests
    SConscript('utest/SConscript')

    if not env.GetOption('clean') and not env.GetOption('help'):

        print("Checking local headers can be included")
        broken_includes = False
        config_env = env.Clone()
        config = Configure(config_env)
        for header in HEADERS_GURT:
            if not config.CheckHeader(os.path.join('gurt', header)):
                broken_includes = True
        for header in HEADERS:
            if not config.CheckHeader(os.path.join('cart', header)):
                broken_includes = True
        config.Finish()

        if broken_includes:
            print("Broken local header files, cannot continue")
            Exit(2)

    Default('gurt', 'swim', 'cart', 'test', 'self_test')

if __name__ == "SCons.Script":
    scons()
