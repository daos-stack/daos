#!python
# Copyright (C) 2016-2019 Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted for any purpose (including commercial purposes)
# provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions, and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions, and the following disclaimer in the
#    documentation and/or materials provided with the distribution.
#
# 3. In addition, redistributions of modified forms of the source or binary
#    code must carry prominent notices stating that the original code was
#    changed and the date of the change.
#
#  4. All publications or advertising materials mentioning features or use of
#     this software are asked, but not required, to acknowledge that it was
#     developed by Intel Corporation and credit the contributors.
#
# 5. Neither the name of Intel Corporation, nor the name of any Contributor
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""Build cart src"""
import os

HEADERS = ['api.h', 'iv.h', 'types.h', 'swim.h']
HEADERS_GURT = ['dlog.h', 'debug.h', 'common.h', 'hash.h', 'list.h',
                'heap.h', 'errno.h', 'fault_inject.h', 'debug_setup.h',
                'types.h', 'atomic.h']

def scons():
    """Scons function"""

    Import('env')

    # There is probably a better way to do this but let's get it linking first
    env.AppendUnique(LIBPATH=[Dir('cart')])
    env.AppendUnique(LIBPATH=[Dir('gurt')])
    env.AppendUnique(RPATH=[Dir('cart')])
    env.AppendUnique(RPATH=[Dir('gurt')])
    env.AppendUnique(LINKFLAGS=["-Wl,-rpath-link=%s" % Dir('cart').path])
    env.AppendUnique(LINKFLAGS=["-Wl,-rpath-link=%s" % Dir('gurt').path])
    env.AppendUnique(CPPPATH=[Dir('include').srcnode()])
    for header in HEADERS:
        env.Install(os.path.join('$PREFIX', 'include', 'cart'),
                    os.path.join('include', 'cart', header))
    for header in HEADERS_GURT:
        env.Install(os.path.join('$PREFIX', 'include', 'gurt'),
                    os.path.join('include', 'gurt', header))

    # Generate the common libraries used by everyone
    SConscript('gurt/SConscript')
    SConscript('swim/SConscript')
    SConscript('cart/SConscript')

    # Builders
    SConscript('test/SConscript')

    # Build self test
    SConscript('self_test/SConscript')

    # Build crt_launch
    SConscript('crt_launch/SConscript')

    # Build cart_ctl
    SConscript('ctl/SConscript')

    # Build the unit tests
    SConscript('utest/SConscript')

    if not env.GetOption('clean') and not env.GetOption('help'):

        print("Checking local headers can be included")
        broken_includes = False
        config_env = env.Clone()
        config = Configure(config_env)
        for header in HEADERS_GURT:
            if not config.CheckHeader(os.path.join('gurt', header)):
                broken_includes = True
        for header in HEADERS:
            if not config.CheckHeader(os.path.join('cart', header)):
                broken_includes = True
        config.Finish()

        if broken_includes:
            print("Broken local header files, cannot continue")
            Exit(2)

    Default('gurt', 'swim', 'cart', 'test', 'self_test')

if __name__ == "SCons.Script":
    scons()
