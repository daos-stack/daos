#!python
# (C) Copyright 2016-2020 Intel Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
# The Government's rights to use, modify, reproduce, release, perform, display,
# or disclose this software are subject to the terms of the Apache License as
# provided in Contract No. 8F-30005.
# Any reproduction of computer software, computer software documentation, or
# portions thereof marked with this legend must also reproduce the markings.
#
"""Build cart src"""

import os
import daos_build

# pylint: disable=no-name-in-module
# pylint: disable=import-error
import SCons.Action
# pylint: enable=import-error
# pylint: enable=no-name-in-module

SRC = ['crt_bulk.c', 'crt_context.c', 'crt_corpc.c',
       'crt_ctl.c', 'crt_debug.c', 'crt_group.c', 'crt_hg.c', 'crt_hg_proc.c',
       'crt_init.c', 'crt_iv.c', 'crt_register.c',
       'crt_rpc.c', 'crt_self_test_client.c', 'crt_self_test_service.c',
       'crt_swim.c', 'crt_tree.c', 'crt_tree_flat.c', 'crt_tree_kary.c',
       'crt_tree_knomial.c', 'crt_hlc.c', 'crt_hlct.c']

# pylint: disable=unused-argument
def macro_expand(target, source, env):
    """Function for PostAction"""
    scope = r"'/struct [^ ]*_\(in\|out\) {/,/};/p'"
    sed_e = r"-e 's/\s\s*/ /g' -e 's/};struct /};\nstruct /g'"
    sed_d = r"-e 's/\([{;]\) /\1\t/g' -e 's/\([{;]\)/\1\n/g'"
    grepv = r"'struct sockaddr_in {'"
    tgts = ""
    for tgt in target:
        tgts += "%s_grep " % tgt.abspath
        os.system("sed -n %s %s | tr -d '\\n' | sed %s > %s_grep"
                  % (scope, tgt.abspath, sed_e, tgt.abspath))
    h_name = "src/cart/_structures_from_macros_.h"
    h_file = os.path.join(Dir('#').abspath, h_name)
    with open(h_file, "w") as outfile:
        outfile.write("/* Automatically generated with structures\n"
                      " * expanded from CRT_RPC_DECLARE() macros\n *\n")
        with open("LICENSE", "r") as infile:
            for line in infile.readlines():
                if line == "\n":
                    outfile.write(" *\n")
                else:
                    outfile.write(" * " + line)
            infile.close()
        outfile.write(" */\n\n")
        outfile.close()
    if tgts != "":
        os.system("cat %s | grep -v %s | sort -u | sed %s >> %s"
                  % (tgts, grepv, sed_d, h_file))
# pylint: enable=unused-argument

def scons():
    """Scons function"""

    Import('env', 'prereqs', 'swim_targets', 'gurt_lib', 'CART_VERSION')

    env.AppendUnique(LIBPATH=[Dir('.')])
    env.AppendUnique(CPPPATH=[Dir('.').srcnode()])
    env.AppendUnique(CPPPATH=[Dir('../../../gurt').srcnode()])

    denv = env.Clone()

    denv.AppendUnique(LIBS=['gurt'])
    prereqs.require(denv, 'mercury')

    cart_targets = denv.SharedObject(SRC)

    compiler = env.get('COMPILER').lower()
    if compiler != 'covc':
        pp_env = Environment(TOOLS=['default', 'extra'])
        pp_env.AppendUnique(CPPPATH=[Dir('../include').srcnode(),
                                     Dir('.').srcnode()])
        prereqs.require(pp_env, 'mercury', headers_only=True)

        pp_env.AppendUnique(CPPPATH=[Dir('../../../include').srcnode(),
                                     Dir('.').srcnode()])

        # pylint: disable=no-member
        pp_files = pp_env.Preprocess(SRC)
        pp_env.AddPostAction(pp_files, SCons.Action.Action(macro_expand, None))
        # pylint: enable=no-member

        denv.Requires(cart_targets, pp_files)

    cart_lib = daos_build.library(denv, 'libcart', [cart_targets, swim_targets],
                                  SHLIBVERSION=CART_VERSION)
    denv.Requires(cart_lib, [swim_targets, gurt_lib])
    denv.InstallVersionedLib('$PREFIX/lib64/', cart_lib,
                             SHLIBVERSION=CART_VERSION)

    Default(cart_lib)
    Export('cart_lib', 'cart_targets')

if __name__ == "SCons.Script":
    scons()
