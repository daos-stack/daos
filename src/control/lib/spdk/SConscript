#!/bin/env python
"""Build DAOS SPDK Go bindings"""
from os.path import join

def scons():
    """Execute build"""
    Import('denv', 'prereqs', 'control_tgts')

    denv.AppendUnique(LIBPATH=[Dir('.')])

    senv = denv.Clone()
    prereqs.require(senv, 'pmdk', 'spdk', 'ofi', 'hwloc')

    senv.AppendUnique(CPPPATH=[join(Dir('.').srcnode().abspath, "include")])

    # SPDK related libs
    libs = ['spdk_env_dpdk', 'spdk_thread', 'spdk_bdev', 'spdk_copy']
    libs += ['rte_mempool', 'rte_mempool_ring', 'rte_bus_pci']
    libs += ['rte_pci', 'rte_ring', 'rte_mbuf', 'rte_eal', 'rte_kvargs']
    libs += ['spdk_bdev_aio', 'spdk_bdev_nvme', 'spdk_bdev_malloc']
    libs += ['spdk_conf', 'spdk_blob', 'spdk_nvme', 'spdk_util']
    libs += ['spdk_json', 'spdk_jsonrpc', 'spdk_rpc', 'spdk_trace']
    libs += ['spdk_sock', 'spdk_log', 'spdk_notify', 'spdk_blob_bdev']
    libs += ['spdk_vmd']

    # Other libs
    libs += ['numa', 'dl']

    senv.nc = senv.Object("src/nvme_control.c")
    senv.ncc = senv.Object("src/nvme_control_common.c")
    denv.nvmecontrol = senv.StaticLibrary("nvme_control",
                                          [senv.nc, senv.ncc] + control_tgts,
                                          LIBS=libs)

    senv.Install(join(senv.subst("$PREFIX"), "lib64"), denv.nvmecontrol)

    SConscript('ctests/SConscript', exports='senv')

if __name__ == "SCons.Script":
    scons()
