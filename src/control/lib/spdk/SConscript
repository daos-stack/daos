#!/bin/env python
"""Build DAOS SPDK Go bindings"""
from os.path import join

def scons():
    """Execute build"""
    Import('denv', 'prereqs')

    denv.AppendUnique(LIBPATH=[Dir('.')])

    senv = denv.Clone()
    prereqs.require(senv, 'pmdk', 'spdk', 'ofi', 'hwloc', 'isal')

    senv.AppendUnique(CPPPATH=[join(Dir('.').srcnode().abspath, "include")])

    # Link to DPDK static libs
    senv.AppendUnique(LINKFLAGS=['-Wl,--whole-archive', \
                                 '-lrte_mempool', '-lrte_mempool_ring', \
                                 '-lrte_bus_pci', '-lrte_pci', '-lrte_ring', \
                                 '-lrte_mbuf', '-lrte_eal', '-lrte_kvargs', \
                                 '-Wl,--no-whole-archive'])

    # hack to avoid building this library with cov compiler for the moment
    compiler = senv.get('COMPILER').lower()
    if compiler == "covc":
        compiler = "gcc"

    senv.nc = senv.Object("src/nvme_control.c")
    senv.ncc = senv.Object("src/nvme_control_common.c")
    denv.nvmecontrol = senv.StaticLibrary("nvme_control", [senv.nc, senv.ncc],
                                          CC=compiler, LIBS=['spdk', 'numa',
                                                             'spdk_env_dpdk',
                                                             'isal'])

    senv.Install(join(senv.subst("$PREFIX"), "lib64"), denv.nvmecontrol)

    SConscript('ctests/SConscript', exports='senv')

if __name__ == "SCons.Script":
    scons()
