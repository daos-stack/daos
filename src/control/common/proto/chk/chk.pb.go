//
// (C) Copyright 2022 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.5.0
// source: chk/chk.proto

package chk

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Kinds of DAOS global inconsistency.
type CheckInconsistClass int32

const (
	// Consistent cases.
	CheckInconsistClass_CIC_NONE CheckInconsistClass = 0
	// Only a subset of the pool services are present but we will have a quorum.
	// Default action: CIA_IGNORE.
	CheckInconsistClass_CIC_POOL_LESS_SVC_WITH_QUORUM CheckInconsistClass = 1
	// Only a subset of the pool services are present, and we don't have a quorum.
	// Default action: CIA_INTERACT.
	CheckInconsistClass_CIC_POOL_LESS_SVC_WITHOUT_QUORUM CheckInconsistClass = 2
	// More members are reported than the pool service was created with.
	// Default action: CIA_DISCARD. Remove unrecognized pool service.
	CheckInconsistClass_CIC_POOL_MORE_SVC CheckInconsistClass = 3
	// Engine(s) claim the pool which is not registered to MS.
	// Default action: CIA_READD. Register the pool to the MS.
	CheckInconsistClass_CIC_POOL_NONEXIST_ON_MS CheckInconsistClass = 4
	// Pool is registered to MS but not claimed by any engine.
	// Default action: CIA_DISCARD. De-register pool from MS.
	CheckInconsistClass_CIC_POOL_NONEXIST_ON_ENGINE CheckInconsistClass = 5
	// Svcl list stored in MS does not match the actual PS membership.
	// Default action: CIA_TRUST_PS. Refresh svcl list in MS DB.
	CheckInconsistClass_CIC_POOL_BAD_SVCL CheckInconsistClass = 6
	// The pool label recorded by MS does not match the pool label property from PS.
	// Default action: CIA_TRUST_PS. Refresh label in MS DB.
	CheckInconsistClass_CIC_POOL_BAD_LABEL CheckInconsistClass = 7
	// An engine has some allocated storage but does not appear in pool map.
	// Default action: CIA_DISCARD. Associated files and blobs will be deleted from the engine.
	CheckInconsistClass_CIC_ENGINE_NONEXIST_IN_MAP CheckInconsistClass = 8
	// An engine has some allocated storage and is marked as down/downout in pool map.
	// Default action: CIA_IGNORE. It can be reintegrated after CR scan.
	CheckInconsistClass_CIC_ENGINE_DOWN_IN_MAP CheckInconsistClass = 9
	// An engine is referenced in pool map, but no storage is actually allocated on this engine.
	// Default action: CIA_DISCARD. Evict the rank from pool map, give left things to rebuild.
	CheckInconsistClass_CIC_ENGINE_HAS_NO_STORAGE CheckInconsistClass = 10
	// Containers that have storage allocated on engine but does not exist in the PS.
	// Default action: CIA_DISCARD. Destrory the unrecognized container.
	CheckInconsistClass_CIC_CONT_NONEXIST_ON_PS CheckInconsistClass = 11
	// The container label recorded by PS does not match the container label property.
	// Default action: CIA_TRUST_PS. Refresh label property on related target(s).
	CheckInconsistClass_CIC_CONT_BAD_LABEL CheckInconsistClass = 12
	// The DTX is corrupted, some participant RDG(s) may be lost.
	// Default action: CIA_INTERACT.
	CheckInconsistClass_CIC_DTX_CORRUPTED CheckInconsistClass = 13
	// The DTX entry on leader does not exist, then not sure the status.
	// Default action: CIA_DISCARD. It is equal to abort the DTX and may lost data on related
	// shard, then we may found data inconsistency in subseqeunt CR scan phase, at that time,
	// such data inconsistency will be fixed.
	CheckInconsistClass_CIC_DTX_ORPHAN CheckInconsistClass = 14
	// The checksum information is lost.
	// Default action: CIA_READD. We have to trust the data and recalculate the checksum. If
	// data is corrupted, then we may hit data inconsistency in subseqeunt CR scan phase, at
	// that time, such data inconsistency will be fixed.
	CheckInconsistClass_CIC_CSUM_LOST CheckInconsistClass = 15
	// Checksum related inconsistency or data corruption.
	// Default action: CIA_DISCARD. Then we will hit data lost in subseqeunt CR scan phase,
	// at that time, such data inconsistency will be fixed.
	CheckInconsistClass_CIC_CSUM_FAILURE CheckInconsistClass = 16
	// Replicated object lost some replica(s).
	// Default action: CIA_READD. Copy from another valid replica.
	CheckInconsistClass_CIC_OBJ_LOST_REP CheckInconsistClass = 17
	// EC object lost parity or data shard(s).
	// Default action: CIA_READD. Trust other available shards and recalculate the lost one(s).
	CheckInconsistClass_CIC_OBJ_LOST_EC_SHARD CheckInconsistClass = 18
	// EC object lost too many shards that exceeds its redundancy.
	// Default action: CIA_INTERACT. Ask the admin to decide whether keep or remove the object.
	CheckInconsistClass_CIC_OBJ_LOST_EC_DATA CheckInconsistClass = 19
	// Data inconsistency among replicas
	// Default action: CIA_TRUST_LATEST. Try to keep the latest data. If all have the same epoch,
	// then ask the admin (CIA_INTERACT) to decide which one will be trusted.
	CheckInconsistClass_CIC_OBJ_DATA_INCONSIST CheckInconsistClass = 20
	// Unknown inconsistency.
	// Default action: CIA_IGNORE.
	CheckInconsistClass_CIC_UNKNOWN CheckInconsistClass = 100
)

// Enum value maps for CheckInconsistClass.
var (
	CheckInconsistClass_name = map[int32]string{
		0:   "CIC_NONE",
		1:   "CIC_POOL_LESS_SVC_WITH_QUORUM",
		2:   "CIC_POOL_LESS_SVC_WITHOUT_QUORUM",
		3:   "CIC_POOL_MORE_SVC",
		4:   "CIC_POOL_NONEXIST_ON_MS",
		5:   "CIC_POOL_NONEXIST_ON_ENGINE",
		6:   "CIC_POOL_BAD_SVCL",
		7:   "CIC_POOL_BAD_LABEL",
		8:   "CIC_ENGINE_NONEXIST_IN_MAP",
		9:   "CIC_ENGINE_DOWN_IN_MAP",
		10:  "CIC_ENGINE_HAS_NO_STORAGE",
		11:  "CIC_CONT_NONEXIST_ON_PS",
		12:  "CIC_CONT_BAD_LABEL",
		13:  "CIC_DTX_CORRUPTED",
		14:  "CIC_DTX_ORPHAN",
		15:  "CIC_CSUM_LOST",
		16:  "CIC_CSUM_FAILURE",
		17:  "CIC_OBJ_LOST_REP",
		18:  "CIC_OBJ_LOST_EC_SHARD",
		19:  "CIC_OBJ_LOST_EC_DATA",
		20:  "CIC_OBJ_DATA_INCONSIST",
		100: "CIC_UNKNOWN",
	}
	CheckInconsistClass_value = map[string]int32{
		"CIC_NONE":                         0,
		"CIC_POOL_LESS_SVC_WITH_QUORUM":    1,
		"CIC_POOL_LESS_SVC_WITHOUT_QUORUM": 2,
		"CIC_POOL_MORE_SVC":                3,
		"CIC_POOL_NONEXIST_ON_MS":          4,
		"CIC_POOL_NONEXIST_ON_ENGINE":      5,
		"CIC_POOL_BAD_SVCL":                6,
		"CIC_POOL_BAD_LABEL":               7,
		"CIC_ENGINE_NONEXIST_IN_MAP":       8,
		"CIC_ENGINE_DOWN_IN_MAP":           9,
		"CIC_ENGINE_HAS_NO_STORAGE":        10,
		"CIC_CONT_NONEXIST_ON_PS":          11,
		"CIC_CONT_BAD_LABEL":               12,
		"CIC_DTX_CORRUPTED":                13,
		"CIC_DTX_ORPHAN":                   14,
		"CIC_CSUM_LOST":                    15,
		"CIC_CSUM_FAILURE":                 16,
		"CIC_OBJ_LOST_REP":                 17,
		"CIC_OBJ_LOST_EC_SHARD":            18,
		"CIC_OBJ_LOST_EC_DATA":             19,
		"CIC_OBJ_DATA_INCONSIST":           20,
		"CIC_UNKNOWN":                      100,
	}
)

func (x CheckInconsistClass) Enum() *CheckInconsistClass {
	p := new(CheckInconsistClass)
	*p = x
	return p
}

func (x CheckInconsistClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckInconsistClass) Descriptor() protoreflect.EnumDescriptor {
	return file_chk_chk_proto_enumTypes[0].Descriptor()
}

func (CheckInconsistClass) Type() protoreflect.EnumType {
	return &file_chk_chk_proto_enumTypes[0]
}

func (x CheckInconsistClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckInconsistClass.Descriptor instead.
func (CheckInconsistClass) EnumDescriptor() ([]byte, []int) {
	return file_chk_chk_proto_rawDescGZIP(), []int{0}
}

// Actions for how to handle kinds of inconsistency.
type CheckInconsistAction int32

const (
	// Default action, depends on the detailed inconsistency class.
	CheckInconsistAction_CIA_DEFAULT CheckInconsistAction = 0
	// Interact with administrator for further action.
	CheckInconsistAction_CIA_INTERACT CheckInconsistAction = 1
	// Ignore but log the inconsistency.
	CheckInconsistAction_CIA_IGNORE CheckInconsistAction = 2
	// Discard the unrecognized element: pool service, pool itself, container, and so on.
	CheckInconsistAction_CIA_DISCARD CheckInconsistAction = 3
	// Re-add the missing element: pool to MS, target to pool map, and so on.
	CheckInconsistAction_CIA_READD CheckInconsistAction = 4
	// Trust the information recorded in MS DB.
	CheckInconsistAction_CIA_TRUST_MS CheckInconsistAction = 5
	// Trust the information recorded in PS DB.
	CheckInconsistAction_CIA_TRUST_PS CheckInconsistAction = 6
	// Trust the information recorded by target(s).
	CheckInconsistAction_CIA_TRUST_TARGET CheckInconsistAction = 7
	// Trust the majority parts (if have).
	CheckInconsistAction_CIA_TRUST_MAJORITY CheckInconsistAction = 8
	// Trust the one with latest (pool map or epoch) information. Keep the latest data.
	CheckInconsistAction_CIA_TRUST_LATEST CheckInconsistAction = 9
	// Trust the one with oldest (pool map or epoch) information. Rollback to old version.
	CheckInconsistAction_CIA_TRUST_OLDEST CheckInconsistAction = 10
	// Trust EC parity shard.
	CheckInconsistAction_CIA_TRUST_EC_PARITY CheckInconsistAction = 11
	// Trust EC data shard.
	CheckInconsistAction_CIA_TRUST_EC_DATA CheckInconsistAction = 12
)

// Enum value maps for CheckInconsistAction.
var (
	CheckInconsistAction_name = map[int32]string{
		0:  "CIA_DEFAULT",
		1:  "CIA_INTERACT",
		2:  "CIA_IGNORE",
		3:  "CIA_DISCARD",
		4:  "CIA_READD",
		5:  "CIA_TRUST_MS",
		6:  "CIA_TRUST_PS",
		7:  "CIA_TRUST_TARGET",
		8:  "CIA_TRUST_MAJORITY",
		9:  "CIA_TRUST_LATEST",
		10: "CIA_TRUST_OLDEST",
		11: "CIA_TRUST_EC_PARITY",
		12: "CIA_TRUST_EC_DATA",
	}
	CheckInconsistAction_value = map[string]int32{
		"CIA_DEFAULT":         0,
		"CIA_INTERACT":        1,
		"CIA_IGNORE":          2,
		"CIA_DISCARD":         3,
		"CIA_READD":           4,
		"CIA_TRUST_MS":        5,
		"CIA_TRUST_PS":        6,
		"CIA_TRUST_TARGET":    7,
		"CIA_TRUST_MAJORITY":  8,
		"CIA_TRUST_LATEST":    9,
		"CIA_TRUST_OLDEST":    10,
		"CIA_TRUST_EC_PARITY": 11,
		"CIA_TRUST_EC_DATA":   12,
	}
)

func (x CheckInconsistAction) Enum() *CheckInconsistAction {
	p := new(CheckInconsistAction)
	*p = x
	return p
}

func (x CheckInconsistAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckInconsistAction) Descriptor() protoreflect.EnumDescriptor {
	return file_chk_chk_proto_enumTypes[1].Descriptor()
}

func (CheckInconsistAction) Type() protoreflect.EnumType {
	return &file_chk_chk_proto_enumTypes[1]
}

func (x CheckInconsistAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckInconsistAction.Descriptor instead.
func (CheckInconsistAction) EnumDescriptor() ([]byte, []int) {
	return file_chk_chk_proto_rawDescGZIP(), []int{1}
}

// The flags to control DAOS check general behavior, not related with any detailed inconsistency.
type CheckFlag int32

const (
	CheckFlag_CF_NONE CheckFlag = 0
	// Only scan without real repairing inconsistency.
	CheckFlag_CF_DRYRUN CheckFlag = 1
	// Start DAOS check from the beginning.
	// Otherwise, resume the DAOS check from the latest checkpoint by default.
	CheckFlag_CF_RESET CheckFlag = 2
	// Stop DAOS check if hit unknown inconsistency or fail to repair some inconsistency.
	// Otherwise, mark 'fail' on related component and continue to handle next one by default.
	CheckFlag_CF_FAILOUT CheckFlag = 4
	// If the admin does not want to interact with engine during check scan, then CIA_INTERACT
	// will be converted to CIA_IGNORE. That will overwrite the CheckInconsistPolicy.
	CheckFlag_CF_AUTO CheckFlag = 8
	// Handle orphan pool when start the check instance. If not specify the flag, some orphan
	// pool(s) may be not handled (by default) unless all pools are checked from the scratch.
	CheckFlag_CF_ORPHAN_POOL CheckFlag = 16
	// Overwrite former set CF_FAILOUT flag, cannot be specified together with CF_FAILOUT.
	CheckFlag_CF_NO_FAILOUT CheckFlag = 32
	// Overwrite former set CF_AUTO flag, cannot be specified together with CF_AUTO.
	CheckFlag_CF_NO_AUTO CheckFlag = 64
)

// Enum value maps for CheckFlag.
var (
	CheckFlag_name = map[int32]string{
		0:  "CF_NONE",
		1:  "CF_DRYRUN",
		2:  "CF_RESET",
		4:  "CF_FAILOUT",
		8:  "CF_AUTO",
		16: "CF_ORPHAN_POOL",
		32: "CF_NO_FAILOUT",
		64: "CF_NO_AUTO",
	}
	CheckFlag_value = map[string]int32{
		"CF_NONE":        0,
		"CF_DRYRUN":      1,
		"CF_RESET":       2,
		"CF_FAILOUT":     4,
		"CF_AUTO":        8,
		"CF_ORPHAN_POOL": 16,
		"CF_NO_FAILOUT":  32,
		"CF_NO_AUTO":     64,
	}
)

func (x CheckFlag) Enum() *CheckFlag {
	p := new(CheckFlag)
	*p = x
	return p
}

func (x CheckFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_chk_chk_proto_enumTypes[2].Descriptor()
}

func (CheckFlag) Type() protoreflect.EnumType {
	return &file_chk_chk_proto_enumTypes[2]
}

func (x CheckFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckFlag.Descriptor instead.
func (CheckFlag) EnumDescriptor() ([]byte, []int) {
	return file_chk_chk_proto_rawDescGZIP(), []int{2}
}

// The status of DAOS check instance.
type CheckInstStatus int32

const (
	CheckInstStatus_CIS_INIT       CheckInstStatus = 0 // DAOS check has never been run.
	CheckInstStatus_CIS_RUNNING    CheckInstStatus = 1 // DAOS check is still in process.
	CheckInstStatus_CIS_COMPLETED  CheckInstStatus = 2 // All passes have been done for all required pools.
	CheckInstStatus_CIS_STOPPED    CheckInstStatus = 3 // DAOS check has been explicitly stopped, do not allow to rejoin.
	CheckInstStatus_CIS_FAILED     CheckInstStatus = 4 // DAOS check auto stopped for some unrecoverable failure, do not rejoin.
	CheckInstStatus_CIS_PAUSED     CheckInstStatus = 5 // DAOS check has been paused because engine exit, allow to rejoin.
	CheckInstStatus_CIS_IMPLICATED CheckInstStatus = 6 // Check on the engine exit for other engine failure, do not rejoin.
)

// Enum value maps for CheckInstStatus.
var (
	CheckInstStatus_name = map[int32]string{
		0: "CIS_INIT",
		1: "CIS_RUNNING",
		2: "CIS_COMPLETED",
		3: "CIS_STOPPED",
		4: "CIS_FAILED",
		5: "CIS_PAUSED",
		6: "CIS_IMPLICATED",
	}
	CheckInstStatus_value = map[string]int32{
		"CIS_INIT":       0,
		"CIS_RUNNING":    1,
		"CIS_COMPLETED":  2,
		"CIS_STOPPED":    3,
		"CIS_FAILED":     4,
		"CIS_PAUSED":     5,
		"CIS_IMPLICATED": 6,
	}
)

func (x CheckInstStatus) Enum() *CheckInstStatus {
	p := new(CheckInstStatus)
	*p = x
	return p
}

func (x CheckInstStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckInstStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chk_chk_proto_enumTypes[3].Descriptor()
}

func (CheckInstStatus) Type() protoreflect.EnumType {
	return &file_chk_chk_proto_enumTypes[3]
}

func (x CheckInstStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckInstStatus.Descriptor instead.
func (CheckInstStatus) EnumDescriptor() ([]byte, []int) {
	return file_chk_chk_proto_rawDescGZIP(), []int{3}
}

// The pool status for DAOS check.
type CheckPoolStatus int32

const (
	CheckPoolStatus_CPS_UNCHECKED  CheckPoolStatus = 0 // DAOS check has not started against this pool.
	CheckPoolStatus_CPS_CHECKING   CheckPoolStatus = 1 // The pool is being checked.
	CheckPoolStatus_CPS_CHECKED    CheckPoolStatus = 2 // DAOS check has successfully completed all the passes on this pool.
	CheckPoolStatus_CPS_FAILED     CheckPoolStatus = 3 // DAOS check could not be completed due to some unrecoverable failure.
	CheckPoolStatus_CPS_PAUSED     CheckPoolStatus = 4 // Checking the pool has been paused because engine exit.
	CheckPoolStatus_CPS_PENDING    CheckPoolStatus = 5 // Waiting for the decision from the admin.
	CheckPoolStatus_CPS_STOPPED    CheckPoolStatus = 6 // DAOS check on the pool has been stopped explicitly.
	CheckPoolStatus_CPS_IMPLICATED CheckPoolStatus = 7 // Check on the pool is stopped because of other pool or engine failure.
)

// Enum value maps for CheckPoolStatus.
var (
	CheckPoolStatus_name = map[int32]string{
		0: "CPS_UNCHECKED",
		1: "CPS_CHECKING",
		2: "CPS_CHECKED",
		3: "CPS_FAILED",
		4: "CPS_PAUSED",
		5: "CPS_PENDING",
		6: "CPS_STOPPED",
		7: "CPS_IMPLICATED",
	}
	CheckPoolStatus_value = map[string]int32{
		"CPS_UNCHECKED":  0,
		"CPS_CHECKING":   1,
		"CPS_CHECKED":    2,
		"CPS_FAILED":     3,
		"CPS_PAUSED":     4,
		"CPS_PENDING":    5,
		"CPS_STOPPED":    6,
		"CPS_IMPLICATED": 7,
	}
)

func (x CheckPoolStatus) Enum() *CheckPoolStatus {
	p := new(CheckPoolStatus)
	*p = x
	return p
}

func (x CheckPoolStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckPoolStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chk_chk_proto_enumTypes[4].Descriptor()
}

func (CheckPoolStatus) Type() protoreflect.EnumType {
	return &file_chk_chk_proto_enumTypes[4]
}

func (x CheckPoolStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckPoolStatus.Descriptor instead.
func (CheckPoolStatus) EnumDescriptor() ([]byte, []int) {
	return file_chk_chk_proto_rawDescGZIP(), []int{4}
}

// DAOS check engine scan phases.
type CheckScanPhase int32

const (
	CheckScanPhase_CSP_PREPARE      CheckScanPhase = 0  // Initial phase, prepare to start check on related engines.
	CheckScanPhase_CSP_POOL_LIST    CheckScanPhase = 1  // Pool list consolidation.
	CheckScanPhase_CSP_POOL_MBS     CheckScanPhase = 2  // Pool membership.
	CheckScanPhase_CSP_POOL_CLEANUP CheckScanPhase = 3  // Pool cleanup.
	CheckScanPhase_CSP_CONT_LIST    CheckScanPhase = 4  // Container list consolidation.
	CheckScanPhase_CSP_CONT_CLEANUP CheckScanPhase = 5  // Container cleanup.
	CheckScanPhase_CSP_DTX_RESYNC   CheckScanPhase = 6  // DTX resync and cleanup.
	CheckScanPhase_CSP_OBJ_SCRUB    CheckScanPhase = 7  // RP/EC shards consistency verification with checksum scrub if have.
	CheckScanPhase_CSP_REBUILD      CheckScanPhase = 8  // Object rebuild.
	CheckScanPhase_CSP_AGGREGATION  CheckScanPhase = 9  // EC aggregation & VOS aggregation.
	CheckScanPhase_CSP_DONE         CheckScanPhase = 10 // All done.
)

// Enum value maps for CheckScanPhase.
var (
	CheckScanPhase_name = map[int32]string{
		0:  "CSP_PREPARE",
		1:  "CSP_POOL_LIST",
		2:  "CSP_POOL_MBS",
		3:  "CSP_POOL_CLEANUP",
		4:  "CSP_CONT_LIST",
		5:  "CSP_CONT_CLEANUP",
		6:  "CSP_DTX_RESYNC",
		7:  "CSP_OBJ_SCRUB",
		8:  "CSP_REBUILD",
		9:  "CSP_AGGREGATION",
		10: "CSP_DONE",
	}
	CheckScanPhase_value = map[string]int32{
		"CSP_PREPARE":      0,
		"CSP_POOL_LIST":    1,
		"CSP_POOL_MBS":     2,
		"CSP_POOL_CLEANUP": 3,
		"CSP_CONT_LIST":    4,
		"CSP_CONT_CLEANUP": 5,
		"CSP_DTX_RESYNC":   6,
		"CSP_OBJ_SCRUB":    7,
		"CSP_REBUILD":      8,
		"CSP_AGGREGATION":  9,
		"CSP_DONE":         10,
	}
)

func (x CheckScanPhase) Enum() *CheckScanPhase {
	p := new(CheckScanPhase)
	*p = x
	return p
}

func (x CheckScanPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckScanPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_chk_chk_proto_enumTypes[5].Descriptor()
}

func (CheckScanPhase) Type() protoreflect.EnumType {
	return &file_chk_chk_proto_enumTypes[5]
}

func (x CheckScanPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckScanPhase.Descriptor instead.
func (CheckScanPhase) EnumDescriptor() ([]byte, []int) {
	return file_chk_chk_proto_rawDescGZIP(), []int{5}
}

// DAOS check engine reports the found inconsistency and repair result to control plane.
// If the repair action is CIA_INTERACT, then the control plane will reply current dRPC
// firstly, and then interact with the admin for the repair decision in another section
// and tell DAOS check engine via another DRPC_METHOD_MGMT_CHK_ACT dRPC call.
//
// If the CheckReport::msg is not enough to help admin to make the decision, then we
// may have to leverage DAOS debug tools to dump more information from related target.
type CheckReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq    uint64               `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`                                     // DAOS Check event sequence, unique for the instance.
	Class  CheckInconsistClass  `protobuf:"varint,2,opt,name=class,proto3,enum=chk.CheckInconsistClass" json:"class,omitempty"`    // Inconsistency class
	Action CheckInconsistAction `protobuf:"varint,3,opt,name=action,proto3,enum=chk.CheckInconsistAction" json:"action,omitempty"` // The action taken to repair the inconsistency
	// Repair result: zero is for repaired successfully.
	//
	//	negative value if failed to repair.
	//	positive value is for CIA_IGNORE or dryrun mode.
	//
	// It is meaningless if the action is CIA_INTERACT.
	Result     int32                  `protobuf:"varint,4,opt,name=result,proto3" json:"result,omitempty"`
	Rank       uint32                 `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`                                                                     // Inconsistency happened on which rank if applicable.
	Target     uint32                 `protobuf:"varint,6,opt,name=target,proto3" json:"target,omitempty"`                                                                 // Inconsistency happened on which target in the rank if applicable.
	PoolUuid   string                 `protobuf:"bytes,7,opt,name=pool_uuid,json=poolUuid,proto3" json:"pool_uuid,omitempty"`                                              // The consistency is in which pool if applicable.
	PoolLabel  string                 `protobuf:"bytes,8,opt,name=pool_label,json=poolLabel,proto3" json:"pool_label,omitempty"`                                           // The pool label, if available.
	ContUuid   string                 `protobuf:"bytes,9,opt,name=cont_uuid,json=contUuid,proto3" json:"cont_uuid,omitempty"`                                              // The consistency is in which container if applicable.
	ContLabel  string                 `protobuf:"bytes,10,opt,name=cont_label,json=contLabel,proto3" json:"cont_label,omitempty"`                                          // The container label, if available.
	Objid      string                 `protobuf:"bytes,11,opt,name=objid,proto3" json:"objid,omitempty"`                                                                   // The consistency is in which object if applicable.
	Dkey       string                 `protobuf:"bytes,12,opt,name=dkey,proto3" json:"dkey,omitempty"`                                                                     // The consistency is in which dkey if applicable.
	Akey       string                 `protobuf:"bytes,13,opt,name=akey,proto3" json:"akey,omitempty"`                                                                     // The consistency is in which akey if applicable.
	Timestamp  string                 `protobuf:"bytes,14,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                           // The time of report (and repair) the inconsistency.
	Msg        string                 `protobuf:"bytes,15,opt,name=msg,proto3" json:"msg,omitempty"`                                                                       // Information to describe the inconsistency in detail.
	ActChoices []CheckInconsistAction `protobuf:"varint,16,rep,packed,name=act_choices,json=actChoices,proto3,enum=chk.CheckInconsistAction" json:"act_choices,omitempty"` // Interactive mode options (first is suggested).
	ActDetails []string               `protobuf:"bytes,17,rep,name=act_details,json=actDetails,proto3" json:"act_details,omitempty"`                                       // Details for each potential action (length should match actions).
	ActMsgs    []string               `protobuf:"bytes,18,rep,name=act_msgs,json=actMsgs,proto3" json:"act_msgs,omitempty"`                                                // Formatted messages containing details for each action choice.
}

func (x *CheckReport) Reset() {
	*x = CheckReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chk_chk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckReport) ProtoMessage() {}

func (x *CheckReport) ProtoReflect() protoreflect.Message {
	mi := &file_chk_chk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckReport.ProtoReflect.Descriptor instead.
func (*CheckReport) Descriptor() ([]byte, []int) {
	return file_chk_chk_proto_rawDescGZIP(), []int{0}
}

func (x *CheckReport) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *CheckReport) GetClass() CheckInconsistClass {
	if x != nil {
		return x.Class
	}
	return CheckInconsistClass_CIC_NONE
}

func (x *CheckReport) GetAction() CheckInconsistAction {
	if x != nil {
		return x.Action
	}
	return CheckInconsistAction_CIA_DEFAULT
}

func (x *CheckReport) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *CheckReport) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *CheckReport) GetTarget() uint32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *CheckReport) GetPoolUuid() string {
	if x != nil {
		return x.PoolUuid
	}
	return ""
}

func (x *CheckReport) GetPoolLabel() string {
	if x != nil {
		return x.PoolLabel
	}
	return ""
}

func (x *CheckReport) GetContUuid() string {
	if x != nil {
		return x.ContUuid
	}
	return ""
}

func (x *CheckReport) GetContLabel() string {
	if x != nil {
		return x.ContLabel
	}
	return ""
}

func (x *CheckReport) GetObjid() string {
	if x != nil {
		return x.Objid
	}
	return ""
}

func (x *CheckReport) GetDkey() string {
	if x != nil {
		return x.Dkey
	}
	return ""
}

func (x *CheckReport) GetAkey() string {
	if x != nil {
		return x.Akey
	}
	return ""
}

func (x *CheckReport) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *CheckReport) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckReport) GetActChoices() []CheckInconsistAction {
	if x != nil {
		return x.ActChoices
	}
	return nil
}

func (x *CheckReport) GetActDetails() []string {
	if x != nil {
		return x.ActDetails
	}
	return nil
}

func (x *CheckReport) GetActMsgs() []string {
	if x != nil {
		return x.ActMsgs
	}
	return nil
}

var File_chk_chk_proto protoreflect.FileDescriptor

var file_chk_chk_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x68, 0x6b, 0x2f, 0x63, 0x68, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x63, 0x68, 0x6b, 0x22, 0xa4, 0x04, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x6b, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x6f, 0x6f, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x6b, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x2a, 0xcc, 0x04, 0x0a, 0x13,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x49, 0x43, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x56, 0x43, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x51, 0x55, 0x4f, 0x52,
	0x55, 0x4d, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4f, 0x4c,
	0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x56, 0x43, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55,
	0x54, 0x5f, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x49,
	0x43, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x56, 0x43, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x58, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x05, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x42, 0x41, 0x44, 0x5f,
	0x53, 0x56, 0x43, 0x4c, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x49, 0x43, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x07, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x49, 0x43, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x08, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x49, 0x43, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x49,
	0x43, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x49, 0x43,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x58, 0x49, 0x53, 0x54, 0x5f, 0x4f,
	0x4e, 0x5f, 0x50, 0x53, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x49, 0x43, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x0c, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x49, 0x43, 0x5f, 0x44, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x55, 0x50,
	0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x49, 0x43, 0x5f, 0x44, 0x54, 0x58,
	0x5f, 0x4f, 0x52, 0x50, 0x48, 0x41, 0x4e, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x49, 0x43,
	0x5f, 0x43, 0x53, 0x55, 0x4d, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x49, 0x43, 0x5f, 0x43, 0x53, 0x55, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x49, 0x43, 0x5f, 0x4f, 0x42, 0x4a, 0x5f, 0x4c, 0x4f,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x49, 0x43, 0x5f,
	0x4f, 0x42, 0x4a, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x45, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x52,
	0x44, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x49, 0x43, 0x5f, 0x4f, 0x42, 0x4a, 0x5f, 0x4c,
	0x4f, 0x53, 0x54, 0x5f, 0x45, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x13, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x49, 0x43, 0x5f, 0x4f, 0x42, 0x4a, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4e,
	0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x49, 0x43,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x64, 0x2a, 0x97, 0x02, 0x0a, 0x14, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x49, 0x41, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x49, 0x41, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x49, 0x41, 0x5f, 0x49, 0x47,
	0x4e, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x49, 0x41, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x49, 0x41, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x49, 0x41, 0x5f, 0x54, 0x52,
	0x55, 0x53, 0x54, 0x5f, 0x4d, 0x53, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x49, 0x41, 0x5f,
	0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x50, 0x53, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x49,
	0x41, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x07,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x49, 0x41, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x4d, 0x41,
	0x4a, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x49, 0x41, 0x5f,
	0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10, 0x09, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x49, 0x41, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x4f, 0x4c, 0x44, 0x45,
	0x53, 0x54, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x49, 0x41, 0x5f, 0x54, 0x52, 0x55, 0x53,
	0x54, 0x5f, 0x45, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x49, 0x54, 0x59, 0x10, 0x0b, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x49, 0x41, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x45, 0x43, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x0c, 0x2a, 0x89, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x46, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x46, 0x5f, 0x44, 0x52, 0x59, 0x52, 0x55, 0x4e, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x46, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x46, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x46, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x46, 0x5f,
	0x4f, 0x52, 0x50, 0x48, 0x41, 0x4e, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x10, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x55, 0x54, 0x10, 0x20,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x40,
	0x2a, 0x88, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x49, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x49, 0x53, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x49, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x49, 0x53, 0x5f, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x49, 0x53, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x9d, 0x01, 0x0a, 0x0f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x50, 0x53, 0x5f, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x50, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x50, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x50, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x50, 0x53, 0x5f, 0x50, 0x41, 0x55,
	0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x50, 0x53, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x50, 0x53, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x50, 0x53, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x07, 0x2a, 0xe0, 0x01, 0x0a, 0x0e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x53, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x53, 0x50, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x53, 0x50, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4d,
	0x42, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x53, 0x50, 0x5f, 0x50, 0x4f, 0x4f, 0x4c,
	0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x53,
	0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x53, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55,
	0x50, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x53, 0x50, 0x5f, 0x44, 0x54, 0x58, 0x5f, 0x52,
	0x45, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x53, 0x50, 0x5f, 0x4f,
	0x42, 0x4a, 0x5f, 0x53, 0x43, 0x52, 0x55, 0x42, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x53,
	0x50, 0x5f, 0x52, 0x45, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x53, 0x50, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x53, 0x50, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x0a, 0x42, 0x39,
	0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6f,
	0x73, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x64, 0x61, 0x6f, 0x73, 0x2f, 0x73, 0x72, 0x63,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_chk_chk_proto_rawDescOnce sync.Once
	file_chk_chk_proto_rawDescData = file_chk_chk_proto_rawDesc
)

func file_chk_chk_proto_rawDescGZIP() []byte {
	file_chk_chk_proto_rawDescOnce.Do(func() {
		file_chk_chk_proto_rawDescData = protoimpl.X.CompressGZIP(file_chk_chk_proto_rawDescData)
	})
	return file_chk_chk_proto_rawDescData
}

var file_chk_chk_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_chk_chk_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_chk_chk_proto_goTypes = []interface{}{
	(CheckInconsistClass)(0),  // 0: chk.CheckInconsistClass
	(CheckInconsistAction)(0), // 1: chk.CheckInconsistAction
	(CheckFlag)(0),            // 2: chk.CheckFlag
	(CheckInstStatus)(0),      // 3: chk.CheckInstStatus
	(CheckPoolStatus)(0),      // 4: chk.CheckPoolStatus
	(CheckScanPhase)(0),       // 5: chk.CheckScanPhase
	(*CheckReport)(nil),       // 6: chk.CheckReport
}
var file_chk_chk_proto_depIdxs = []int32{
	0, // 0: chk.CheckReport.class:type_name -> chk.CheckInconsistClass
	1, // 1: chk.CheckReport.action:type_name -> chk.CheckInconsistAction
	1, // 2: chk.CheckReport.act_choices:type_name -> chk.CheckInconsistAction
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_chk_chk_proto_init() }
func file_chk_chk_proto_init() {
	if File_chk_chk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chk_chk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chk_chk_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chk_chk_proto_goTypes,
		DependencyIndexes: file_chk_chk_proto_depIdxs,
		EnumInfos:         file_chk_chk_proto_enumTypes,
		MessageInfos:      file_chk_chk_proto_msgTypes,
	}.Build()
	File_chk_chk_proto = out.File
	file_chk_chk_proto_rawDesc = nil
	file_chk_chk_proto_goTypes = nil
	file_chk_chk_proto_depIdxs = nil
}
