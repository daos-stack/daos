// Code generated by protoc-gen-go. DO NOT EDIT.
// source: storage_nvme.proto

package mgmt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NvmeController represents an NVMe Controller (SSD).
type NvmeController struct {
	Model                string                      `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Serial               string                      `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
	Pciaddr              string                      `protobuf:"bytes,3,opt,name=pciaddr,proto3" json:"pciaddr,omitempty"`
	Fwrev                string                      `protobuf:"bytes,4,opt,name=fwrev,proto3" json:"fwrev,omitempty"`
	Namespaces           []*NvmeController_Namespace `protobuf:"bytes,5,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NvmeController) Reset()         { *m = NvmeController{} }
func (m *NvmeController) String() string { return proto.CompactTextString(m) }
func (*NvmeController) ProtoMessage()    {}
func (*NvmeController) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_nvme_72d5008c914e0c5d, []int{0}
}
func (m *NvmeController) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NvmeController.Unmarshal(m, b)
}
func (m *NvmeController) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NvmeController.Marshal(b, m, deterministic)
}
func (dst *NvmeController) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvmeController.Merge(dst, src)
}
func (m *NvmeController) XXX_Size() int {
	return xxx_messageInfo_NvmeController.Size(m)
}
func (m *NvmeController) XXX_DiscardUnknown() {
	xxx_messageInfo_NvmeController.DiscardUnknown(m)
}

var xxx_messageInfo_NvmeController proto.InternalMessageInfo

func (m *NvmeController) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *NvmeController) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *NvmeController) GetPciaddr() string {
	if m != nil {
		return m.Pciaddr
	}
	return ""
}

func (m *NvmeController) GetFwrev() string {
	if m != nil {
		return m.Fwrev
	}
	return ""
}

func (m *NvmeController) GetNamespaces() []*NvmeController_Namespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

// Namespace represents a namespace created on an NvmeController.
type NvmeController_Namespace struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Capacity             int32    `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NvmeController_Namespace) Reset()         { *m = NvmeController_Namespace{} }
func (m *NvmeController_Namespace) String() string { return proto.CompactTextString(m) }
func (*NvmeController_Namespace) ProtoMessage()    {}
func (*NvmeController_Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_nvme_72d5008c914e0c5d, []int{0, 0}
}
func (m *NvmeController_Namespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NvmeController_Namespace.Unmarshal(m, b)
}
func (m *NvmeController_Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NvmeController_Namespace.Marshal(b, m, deterministic)
}
func (dst *NvmeController_Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvmeController_Namespace.Merge(dst, src)
}
func (m *NvmeController_Namespace) XXX_Size() int {
	return xxx_messageInfo_NvmeController_Namespace.Size(m)
}
func (m *NvmeController_Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_NvmeController_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_NvmeController_Namespace proto.InternalMessageInfo

func (m *NvmeController_Namespace) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NvmeController_Namespace) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

// NvmeControllerResult represents state of operation performed on controller.
type NvmeControllerResult struct {
	Pciaddr              string         `protobuf:"bytes,1,opt,name=pciaddr,proto3" json:"pciaddr,omitempty"`
	State                *ResponseState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NvmeControllerResult) Reset()         { *m = NvmeControllerResult{} }
func (m *NvmeControllerResult) String() string { return proto.CompactTextString(m) }
func (*NvmeControllerResult) ProtoMessage()    {}
func (*NvmeControllerResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_nvme_72d5008c914e0c5d, []int{1}
}
func (m *NvmeControllerResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NvmeControllerResult.Unmarshal(m, b)
}
func (m *NvmeControllerResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NvmeControllerResult.Marshal(b, m, deterministic)
}
func (dst *NvmeControllerResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvmeControllerResult.Merge(dst, src)
}
func (m *NvmeControllerResult) XXX_Size() int {
	return xxx_messageInfo_NvmeControllerResult.Size(m)
}
func (m *NvmeControllerResult) XXX_DiscardUnknown() {
	xxx_messageInfo_NvmeControllerResult.DiscardUnknown(m)
}

var xxx_messageInfo_NvmeControllerResult proto.InternalMessageInfo

func (m *NvmeControllerResult) GetPciaddr() string {
	if m != nil {
		return m.Pciaddr
	}
	return ""
}

func (m *NvmeControllerResult) GetState() *ResponseState {
	if m != nil {
		return m.State
	}
	return nil
}

type ScanNvmeParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanNvmeParams) Reset()         { *m = ScanNvmeParams{} }
func (m *ScanNvmeParams) String() string { return proto.CompactTextString(m) }
func (*ScanNvmeParams) ProtoMessage()    {}
func (*ScanNvmeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_nvme_72d5008c914e0c5d, []int{2}
}
func (m *ScanNvmeParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanNvmeParams.Unmarshal(m, b)
}
func (m *ScanNvmeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanNvmeParams.Marshal(b, m, deterministic)
}
func (dst *ScanNvmeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanNvmeParams.Merge(dst, src)
}
func (m *ScanNvmeParams) XXX_Size() int {
	return xxx_messageInfo_ScanNvmeParams.Size(m)
}
func (m *ScanNvmeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanNvmeParams.DiscardUnknown(m)
}

var xxx_messageInfo_ScanNvmeParams proto.InternalMessageInfo

type FormatNvmeParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FormatNvmeParams) Reset()         { *m = FormatNvmeParams{} }
func (m *FormatNvmeParams) String() string { return proto.CompactTextString(m) }
func (*FormatNvmeParams) ProtoMessage()    {}
func (*FormatNvmeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_nvme_72d5008c914e0c5d, []int{3}
}
func (m *FormatNvmeParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FormatNvmeParams.Unmarshal(m, b)
}
func (m *FormatNvmeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FormatNvmeParams.Marshal(b, m, deterministic)
}
func (dst *FormatNvmeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FormatNvmeParams.Merge(dst, src)
}
func (m *FormatNvmeParams) XXX_Size() int {
	return xxx_messageInfo_FormatNvmeParams.Size(m)
}
func (m *FormatNvmeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_FormatNvmeParams.DiscardUnknown(m)
}

var xxx_messageInfo_FormatNvmeParams proto.InternalMessageInfo

type UpdateNvmeParams struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Slot                 int32    `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateNvmeParams) Reset()         { *m = UpdateNvmeParams{} }
func (m *UpdateNvmeParams) String() string { return proto.CompactTextString(m) }
func (*UpdateNvmeParams) ProtoMessage()    {}
func (*UpdateNvmeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_nvme_72d5008c914e0c5d, []int{4}
}
func (m *UpdateNvmeParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateNvmeParams.Unmarshal(m, b)
}
func (m *UpdateNvmeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateNvmeParams.Marshal(b, m, deterministic)
}
func (dst *UpdateNvmeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNvmeParams.Merge(dst, src)
}
func (m *UpdateNvmeParams) XXX_Size() int {
	return xxx_messageInfo_UpdateNvmeParams.Size(m)
}
func (m *UpdateNvmeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNvmeParams.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNvmeParams proto.InternalMessageInfo

func (m *UpdateNvmeParams) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UpdateNvmeParams) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

// TODO: provide facility to supply FIO config in params
type BurninNvmeParams struct {
	Fioconfig            *FilePath `protobuf:"bytes,1,opt,name=fioconfig,proto3" json:"fioconfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BurninNvmeParams) Reset()         { *m = BurninNvmeParams{} }
func (m *BurninNvmeParams) String() string { return proto.CompactTextString(m) }
func (*BurninNvmeParams) ProtoMessage()    {}
func (*BurninNvmeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_storage_nvme_72d5008c914e0c5d, []int{5}
}
func (m *BurninNvmeParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BurninNvmeParams.Unmarshal(m, b)
}
func (m *BurninNvmeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BurninNvmeParams.Marshal(b, m, deterministic)
}
func (dst *BurninNvmeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurninNvmeParams.Merge(dst, src)
}
func (m *BurninNvmeParams) XXX_Size() int {
	return xxx_messageInfo_BurninNvmeParams.Size(m)
}
func (m *BurninNvmeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BurninNvmeParams.DiscardUnknown(m)
}

var xxx_messageInfo_BurninNvmeParams proto.InternalMessageInfo

func (m *BurninNvmeParams) GetFioconfig() *FilePath {
	if m != nil {
		return m.Fioconfig
	}
	return nil
}

func init() {
	proto.RegisterType((*NvmeController)(nil), "mgmt.NvmeController")
	proto.RegisterType((*NvmeController_Namespace)(nil), "mgmt.NvmeController.Namespace")
	proto.RegisterType((*NvmeControllerResult)(nil), "mgmt.NvmeControllerResult")
	proto.RegisterType((*ScanNvmeParams)(nil), "mgmt.ScanNvmeParams")
	proto.RegisterType((*FormatNvmeParams)(nil), "mgmt.FormatNvmeParams")
	proto.RegisterType((*UpdateNvmeParams)(nil), "mgmt.UpdateNvmeParams")
	proto.RegisterType((*BurninNvmeParams)(nil), "mgmt.BurninNvmeParams")
}

func init() { proto.RegisterFile("storage_nvme.proto", fileDescriptor_storage_nvme_72d5008c914e0c5d) }

var fileDescriptor_storage_nvme_72d5008c914e0c5d = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x51, 0x4d, 0x6b, 0xf2, 0x40,
	0x10, 0x26, 0x6a, 0x7c, 0x5f, 0xc7, 0x12, 0xc2, 0x56, 0x4a, 0xf0, 0x50, 0x24, 0x27, 0x0b, 0x25,
	0x07, 0x7b, 0x28, 0xf4, 0x50, 0x4a, 0x0b, 0x1e, 0x45, 0x56, 0x7a, 0xea, 0xa1, 0x4c, 0x93, 0x51,
	0x17, 0xb2, 0xbb, 0x61, 0x77, 0xb5, 0xf4, 0x17, 0xf7, 0x6f, 0x94, 0x6c, 0xfc, 0x88, 0xb7, 0x79,
	0x9e, 0x99, 0x7d, 0x3e, 0x58, 0x60, 0xd6, 0x69, 0x83, 0x1b, 0xfa, 0x54, 0x7b, 0x49, 0x59, 0x65,
	0xb4, 0xd3, 0xac, 0x27, 0x37, 0xd2, 0x8d, 0xaf, 0x72, 0x2d, 0xa5, 0x56, 0x0d, 0x97, 0xfe, 0x06,
	0x10, 0x2d, 0xf6, 0x92, 0xde, 0xb4, 0x72, 0x46, 0x97, 0x25, 0x19, 0x36, 0x82, 0x50, 0xea, 0x82,
	0xca, 0x24, 0x98, 0x04, 0xd3, 0x01, 0x6f, 0x00, 0xbb, 0x81, 0xbe, 0x25, 0x23, 0xb0, 0x4c, 0x3a,
	0x9e, 0x3e, 0x20, 0x96, 0xc0, 0xbf, 0x2a, 0x17, 0x58, 0x14, 0x26, 0xe9, 0xfa, 0xc5, 0x11, 0xd6,
	0x3a, 0xeb, 0x6f, 0x43, 0xfb, 0xa4, 0xd7, 0xe8, 0x78, 0xc0, 0x9e, 0x01, 0x14, 0x4a, 0xb2, 0x15,
	0xe6, 0x64, 0x93, 0x70, 0xd2, 0x9d, 0x0e, 0x67, 0xb7, 0x59, 0x9d, 0x2c, 0xbb, 0xcc, 0x91, 0x2d,
	0x8e, 0x67, 0xbc, 0xf5, 0x62, 0xfc, 0x08, 0x83, 0xd3, 0x82, 0x45, 0xd0, 0x11, 0x85, 0xcf, 0x19,
	0xf2, 0x8e, 0x28, 0xd8, 0x18, 0xfe, 0xe7, 0x58, 0x61, 0x2e, 0xdc, 0x8f, 0x8f, 0x19, 0xf2, 0x13,
	0x4e, 0x3f, 0x60, 0x74, 0x69, 0xc0, 0xc9, 0xee, 0x4a, 0xd7, 0x2e, 0x10, 0x5c, 0x16, 0xb8, 0x83,
	0xd0, 0x3a, 0x74, 0xe4, 0xa5, 0x86, 0xb3, 0xeb, 0x26, 0x25, 0x27, 0x5b, 0x69, 0x65, 0x69, 0x55,
	0xaf, 0x78, 0x73, 0x91, 0xc6, 0x10, 0xad, 0x72, 0x54, 0xb5, 0xc1, 0x12, 0x0d, 0x4a, 0x9b, 0x32,
	0x88, 0xe7, 0xda, 0x48, 0x74, 0x2d, 0xee, 0x09, 0xe2, 0xf7, 0xaa, 0x40, 0x47, 0x67, 0x8e, 0x31,
	0xe8, 0x55, 0xe8, 0xb6, 0x07, 0x6f, 0x3f, 0xd7, 0x9c, 0x2d, 0xb5, 0x3b, 0x54, 0xf0, 0x73, 0xfa,
	0x02, 0xf1, 0xeb, 0xce, 0x28, 0xd1, 0xf2, 0x60, 0xf7, 0x30, 0x58, 0x0b, 0x9d, 0x6b, 0xb5, 0x16,
	0x1b, 0x2f, 0x30, 0x9c, 0x45, 0x4d, 0xc8, 0xb9, 0x28, 0x69, 0x89, 0x6e, 0xcb, 0xcf, 0x07, 0x5f,
	0x7d, 0xff, 0xe3, 0x0f, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x08, 0xc7, 0x5c, 0xdc, 0x1b, 0x02,
	0x00, 0x00,
}
