//
// (C) Copyright 2022 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.5.0
// source: mgmt/check.proto

package mgmt

import (
	chk "github.com/daos-stack/daos/src/control/common/proto/chk"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The pairs for kinds of inconsistency and related repair action. The control plane need to
// generate such policy array from some configuration file either via command line option or
// some default location, such as /etc/daos/daos_check.yml. Such policy arrge will be passed
// to DAOS engine when start check and cannot changed during check scanning, but can be list
// via 'dmg check prop' - see CheckPropResp.
type CheckInconsistPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InconsistCas chk.CheckInconsistClass  `protobuf:"varint,1,opt,name=inconsist_cas,json=inconsistCas,proto3,enum=chk.CheckInconsistClass" json:"inconsist_cas,omitempty"`  // See CheckInconsistClass.
	InconsistAct chk.CheckInconsistAction `protobuf:"varint,2,opt,name=inconsist_act,json=inconsistAct,proto3,enum=chk.CheckInconsistAction" json:"inconsist_act,omitempty"` // See CheckInconsistAction.
}

func (x *CheckInconsistPolicy) Reset() {
	*x = CheckInconsistPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInconsistPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInconsistPolicy) ProtoMessage() {}

func (x *CheckInconsistPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInconsistPolicy.ProtoReflect.Descriptor instead.
func (*CheckInconsistPolicy) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{0}
}

func (x *CheckInconsistPolicy) GetInconsistCas() chk.CheckInconsistClass {
	if x != nil {
		return x.InconsistCas
	}
	return chk.CheckInconsistClass(0)
}

func (x *CheckInconsistPolicy) GetInconsistAct() chk.CheckInconsistAction {
	if x != nil {
		return x.InconsistAct
	}
	return chk.CheckInconsistAction(0)
}

type CheckEnableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys string `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty"`
}

func (x *CheckEnableReq) Reset() {
	*x = CheckEnableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckEnableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckEnableReq) ProtoMessage() {}

func (x *CheckEnableReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckEnableReq.ProtoReflect.Descriptor instead.
func (*CheckEnableReq) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{1}
}

func (x *CheckEnableReq) GetSys() string {
	if x != nil {
		return x.Sys
	}
	return ""
}

type CheckDisableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys string `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty"`
}

func (x *CheckDisableReq) Reset() {
	*x = CheckDisableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDisableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDisableReq) ProtoMessage() {}

func (x *CheckDisableReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDisableReq.ProtoReflect.Descriptor instead.
func (*CheckDisableReq) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{2}
}

func (x *CheckDisableReq) GetSys() string {
	if x != nil {
		return x.Sys
	}
	return ""
}

// For 'dmg check start'.
type CheckStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys   string `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty"`      // DAOS system identifier.
	Flags uint32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"` // See CheckFlag.
	// The list of ranks to start DAOS check. Cannot be empty.
	//
	// The control plane will generate the ranks list and guarantee that any rank in the system
	// is either will participate in check or has been excluded. Otherwise, partial ranks check
	// may cause some unexpected and unrecoverable result unless the specified pool(s) does not
	// exist on those missed rank(s).
	Ranks []uint32 `protobuf:"varint,3,rep,packed,name=ranks,proto3" json:"ranks,omitempty"`
	// UUID for the pools for which to start DAOS check.
	// If empty, then start DAOS check for all pools in the system.
	Uuids    []string                `protobuf:"bytes,4,rep,name=uuids,proto3" json:"uuids,omitempty"`
	Policies []*CheckInconsistPolicy `protobuf:"bytes,5,rep,name=policies,proto3" json:"policies,omitempty"` // Policy array for handling inconsistency.
}

func (x *CheckStartReq) Reset() {
	*x = CheckStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStartReq) ProtoMessage() {}

func (x *CheckStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStartReq.ProtoReflect.Descriptor instead.
func (*CheckStartReq) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{3}
}

func (x *CheckStartReq) GetSys() string {
	if x != nil {
		return x.Sys
	}
	return ""
}

func (x *CheckStartReq) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *CheckStartReq) GetRanks() []uint32 {
	if x != nil {
		return x.Ranks
	}
	return nil
}

func (x *CheckStartReq) GetUuids() []string {
	if x != nil {
		return x.Uuids
	}
	return nil
}

func (x *CheckStartReq) GetPolicies() []*CheckInconsistPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// CheckStartResp returns the result of check start.
type CheckStartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // DAOS error code.
}

func (x *CheckStartResp) Reset() {
	*x = CheckStartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStartResp) ProtoMessage() {}

func (x *CheckStartResp) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStartResp.ProtoReflect.Descriptor instead.
func (*CheckStartResp) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{4}
}

func (x *CheckStartResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// For 'dmg check stop'.
type CheckStopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys string `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty"` // DAOS system identifier.
	// UUID for the pools for which to stop DAOS check.
	// If empty, then stop check for all pools in the system.
	Uuids []string `protobuf:"bytes,2,rep,name=uuids,proto3" json:"uuids,omitempty"`
}

func (x *CheckStopReq) Reset() {
	*x = CheckStopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStopReq) ProtoMessage() {}

func (x *CheckStopReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStopReq.ProtoReflect.Descriptor instead.
func (*CheckStopReq) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{5}
}

func (x *CheckStopReq) GetSys() string {
	if x != nil {
		return x.Sys
	}
	return ""
}

func (x *CheckStopReq) GetUuids() []string {
	if x != nil {
		return x.Uuids
	}
	return nil
}

// CheckStopResp returns the result of check stop.
type CheckStopResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // DAOS error code.
}

func (x *CheckStopResp) Reset() {
	*x = CheckStopResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStopResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStopResp) ProtoMessage() {}

func (x *CheckStopResp) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStopResp.ProtoReflect.Descriptor instead.
func (*CheckStopResp) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{6}
}

func (x *CheckStopResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// For 'dmg check query'.
type CheckQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys string `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty"` // DAOS system identifier.
	// UUID for the pools for which to query DAOS check.
	// If empty, then query DAOS check for all pools in the system.
	Uuids   []string `protobuf:"bytes,2,rep,name=uuids,proto3" json:"uuids,omitempty"`
	Shallow bool     `protobuf:"varint,3,opt,name=shallow,proto3" json:"shallow,omitempty"`  // shallow query (findings only)
	Seqs    []uint64 `protobuf:"varint,4,rep,packed,name=seqs,proto3" json:"seqs,omitempty"` // return findings with these sequences (implies shallow)
}

func (x *CheckQueryReq) Reset() {
	*x = CheckQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQueryReq) ProtoMessage() {}

func (x *CheckQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQueryReq.ProtoReflect.Descriptor instead.
func (*CheckQueryReq) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{7}
}

func (x *CheckQueryReq) GetSys() string {
	if x != nil {
		return x.Sys
	}
	return ""
}

func (x *CheckQueryReq) GetUuids() []string {
	if x != nil {
		return x.Uuids
	}
	return nil
}

func (x *CheckQueryReq) GetShallow() bool {
	if x != nil {
		return x.Shallow
	}
	return false
}

func (x *CheckQueryReq) GetSeqs() []uint64 {
	if x != nil {
		return x.Seqs
	}
	return nil
}

// Time information on related component: system, pool or target.
type CheckQueryTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime uint64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // The time of check instance being started on the component.
	// If the check instance is still running on the component, then it is the estimated
	// remaining time to complete the check on the component. Otherwise, it is the time
	// of the check instance completed, failed or stopped on the component.
	MiscTime uint64 `protobuf:"varint,2,opt,name=misc_time,json=miscTime,proto3" json:"misc_time,omitempty"`
}

func (x *CheckQueryTime) Reset() {
	*x = CheckQueryTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQueryTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQueryTime) ProtoMessage() {}

func (x *CheckQueryTime) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQueryTime.ProtoReflect.Descriptor instead.
func (*CheckQueryTime) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{8}
}

func (x *CheckQueryTime) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CheckQueryTime) GetMiscTime() uint64 {
	if x != nil {
		return x.MiscTime
	}
	return 0
}

// Inconsistency statistics on related component: system, pool or target.
type CheckQueryInconsist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`       // The count of total found inconsistency on the component.
	Repaired uint32 `protobuf:"varint,2,opt,name=repaired,proto3" json:"repaired,omitempty"` // The count of repaired inconsistency on the component.
	Ignored  uint32 `protobuf:"varint,3,opt,name=ignored,proto3" json:"ignored,omitempty"`   // The count of ignored inconsistency on the component.
	Failed   uint32 `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty"`     // The count of fail to repaired inconsistency on the component.
}

func (x *CheckQueryInconsist) Reset() {
	*x = CheckQueryInconsist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQueryInconsist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQueryInconsist) ProtoMessage() {}

func (x *CheckQueryInconsist) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQueryInconsist.ProtoReflect.Descriptor instead.
func (*CheckQueryInconsist) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{9}
}

func (x *CheckQueryInconsist) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CheckQueryInconsist) GetRepaired() uint32 {
	if x != nil {
		return x.Repaired
	}
	return 0
}

func (x *CheckQueryInconsist) GetIgnored() uint32 {
	if x != nil {
		return x.Ignored
	}
	return 0
}

func (x *CheckQueryInconsist) GetFailed() uint32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

// Check query result for the pool shard on the target.
type CheckQueryTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank   uint32              `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`                              // Rank ID.
	Target uint32              `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`                          // Target index in the rank.
	Status chk.CheckInstStatus `protobuf:"varint,3,opt,name=status,proto3,enum=chk.CheckInstStatus" json:"status,omitempty"` // Check instance status on this target - see CheckInstStatus.
	// Inconsistency statistics during the phases range
	// [CSP_DTX_RESYNC, CSP_AGGREGATION] for the pool shard on the target.
	Inconsistency *CheckQueryInconsist `protobuf:"bytes,4,opt,name=inconsistency,proto3" json:"inconsistency,omitempty"`
	// Time information for the pool shard on the target if applicable.
	Time *CheckQueryTime `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *CheckQueryTarget) Reset() {
	*x = CheckQueryTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQueryTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQueryTarget) ProtoMessage() {}

func (x *CheckQueryTarget) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQueryTarget.ProtoReflect.Descriptor instead.
func (*CheckQueryTarget) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{10}
}

func (x *CheckQueryTarget) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *CheckQueryTarget) GetTarget() uint32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *CheckQueryTarget) GetStatus() chk.CheckInstStatus {
	if x != nil {
		return x.Status
	}
	return chk.CheckInstStatus(0)
}

func (x *CheckQueryTarget) GetInconsistency() *CheckQueryInconsist {
	if x != nil {
		return x.Inconsistency
	}
	return nil
}

func (x *CheckQueryTarget) GetTime() *CheckQueryTime {
	if x != nil {
		return x.Time
	}
	return nil
}

// Check query result for the pool.
type CheckQueryPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string              `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                               // Pool UUID.
	Status chk.CheckPoolStatus `protobuf:"varint,2,opt,name=status,proto3,enum=chk.CheckPoolStatus" json:"status,omitempty"` // Pool status - see CheckPoolStatus.
	Phase  chk.CheckScanPhase  `protobuf:"varint,3,opt,name=phase,proto3,enum=chk.CheckScanPhase" json:"phase,omitempty"`    // Scan phase - see CheckScanPhase.
	// Inconsistency statistics during the phases range
	// [CSP_POOL_MBS, CSP_CONT_CLEANUP] for the pool.
	Inconsistency *CheckQueryInconsist `protobuf:"bytes,4,opt,name=inconsistency,proto3" json:"inconsistency,omitempty"`
	// Time information for the pool if applicable.
	Time *CheckQueryTime `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	// Per target based query result for the phases since CSP_DTX_RESYNC.
	Targets []*CheckQueryTarget `protobuf:"bytes,6,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *CheckQueryPool) Reset() {
	*x = CheckQueryPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQueryPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQueryPool) ProtoMessage() {}

func (x *CheckQueryPool) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQueryPool.ProtoReflect.Descriptor instead.
func (*CheckQueryPool) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{11}
}

func (x *CheckQueryPool) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CheckQueryPool) GetStatus() chk.CheckPoolStatus {
	if x != nil {
		return x.Status
	}
	return chk.CheckPoolStatus(0)
}

func (x *CheckQueryPool) GetPhase() chk.CheckScanPhase {
	if x != nil {
		return x.Phase
	}
	return chk.CheckScanPhase(0)
}

func (x *CheckQueryPool) GetInconsistency() *CheckQueryInconsist {
	if x != nil {
		return x.Inconsistency
	}
	return nil
}

func (x *CheckQueryPool) GetTime() *CheckQueryTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CheckQueryPool) GetTargets() []*CheckQueryTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

// CheckQueryResp returns DAOS check status for required pool(s) or the whole system.
// Depend on the dmg command line option, the control plane needs to reorganize the query
// results with summary (of pool shards from targets) and different detailed information.
type CheckQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqStatus int32 `protobuf:"varint,1,opt,name=req_status,json=reqStatus,proto3" json:"req_status,omitempty"` // DAOS error code.
	// The whole check instance status depends on the each engine status:
	// As long as one target is in CIS_RUNNING, then the instance is CIS_RUNNING.
	// Otherwise, in turn with the status of CIS_FAILED, CIS_STOPPED, CIS_IMPLICATED,
	// CIS_COMPLETED, CIS_PAUSED, CIS_INIT.
	InsStatus chk.CheckInstStatus `protobuf:"varint,2,opt,name=ins_status,json=insStatus,proto3,enum=chk.CheckInstStatus" json:"ins_status,omitempty"`
	// Scan phase - see CheckScanPhase. Before moving to CSP_POOL_MBS, the check
	// instance status is maintained on the check leader. And then multiple pools
	// can be processed in parallel, so the instance phase for different pools may
	// be different, see CheckQueryPool::phase.
	InsPhase chk.CheckScanPhase `protobuf:"varint,3,opt,name=ins_phase,json=insPhase,proto3,enum=chk.CheckScanPhase" json:"ins_phase,omitempty"`
	// Inconsistency statistics during the phases range
	// [CSP_PREPARE, CSP_POOL_LIST] for the whole system.
	Inconsistency *CheckQueryInconsist `protobuf:"bytes,4,opt,name=inconsistency,proto3" json:"inconsistency,omitempty"`
	// Time information for the whole system if applicable.
	Time *CheckQueryTime `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	// Per pool based query result for the phases since CSP_POOL_MBS.
	Pools []*CheckQueryPool `protobuf:"bytes,6,rep,name=pools,proto3" json:"pools,omitempty"`
	// Inconsistency reports to be displayed
	Reports []*chk.CheckReport `protobuf:"bytes,7,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *CheckQueryResp) Reset() {
	*x = CheckQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQueryResp) ProtoMessage() {}

func (x *CheckQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQueryResp.ProtoReflect.Descriptor instead.
func (*CheckQueryResp) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{12}
}

func (x *CheckQueryResp) GetReqStatus() int32 {
	if x != nil {
		return x.ReqStatus
	}
	return 0
}

func (x *CheckQueryResp) GetInsStatus() chk.CheckInstStatus {
	if x != nil {
		return x.InsStatus
	}
	return chk.CheckInstStatus(0)
}

func (x *CheckQueryResp) GetInsPhase() chk.CheckScanPhase {
	if x != nil {
		return x.InsPhase
	}
	return chk.CheckScanPhase(0)
}

func (x *CheckQueryResp) GetInconsistency() *CheckQueryInconsist {
	if x != nil {
		return x.Inconsistency
	}
	return nil
}

func (x *CheckQueryResp) GetTime() *CheckQueryTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CheckQueryResp) GetPools() []*CheckQueryPool {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *CheckQueryResp) GetReports() []*chk.CheckReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

// For 'dmg check set-policy'
type CheckSetPolicyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys      string                  `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty"`           // DAOS system identifier.
	Flags    uint32                  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`      // The flags when start check - see CheckFlag.
	Policies []*CheckInconsistPolicy `protobuf:"bytes,3,rep,name=policies,proto3" json:"policies,omitempty"` // Inconsistency policy array.
}

func (x *CheckSetPolicyReq) Reset() {
	*x = CheckSetPolicyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSetPolicyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSetPolicyReq) ProtoMessage() {}

func (x *CheckSetPolicyReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSetPolicyReq.ProtoReflect.Descriptor instead.
func (*CheckSetPolicyReq) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{13}
}

func (x *CheckSetPolicyReq) GetSys() string {
	if x != nil {
		return x.Sys
	}
	return ""
}

func (x *CheckSetPolicyReq) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *CheckSetPolicyReq) GetPolicies() []*CheckInconsistPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// To allow daos_server to query check leader properties
type CheckPropReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys string `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty"` // DAOS system identifier.
}

func (x *CheckPropReq) Reset() {
	*x = CheckPropReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPropReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPropReq) ProtoMessage() {}

func (x *CheckPropReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPropReq.ProtoReflect.Descriptor instead.
func (*CheckPropReq) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{14}
}

func (x *CheckPropReq) GetSys() string {
	if x != nil {
		return x.Sys
	}
	return ""
}

// CheckPropResp returns the result of check prop and the properties when start check.
type CheckPropResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int32                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`    // DAOS error code.
	Flags    uint32                  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`      // The flags when start check - see CheckFlag.
	Policies []*CheckInconsistPolicy `protobuf:"bytes,3,rep,name=policies,proto3" json:"policies,omitempty"` // Inconsistency policy array.
}

func (x *CheckPropResp) Reset() {
	*x = CheckPropResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPropResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPropResp) ProtoMessage() {}

func (x *CheckPropResp) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPropResp.ProtoReflect.Descriptor instead.
func (*CheckPropResp) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{15}
}

func (x *CheckPropResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CheckPropResp) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *CheckPropResp) GetPolicies() []*CheckInconsistPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// For 'dmg check get-policy'
type CheckGetPolicyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys      string                    `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty"` // DAOS system identifier.
	Classes  []chk.CheckInconsistClass `protobuf:"varint,2,rep,packed,name=classes,proto3,enum=chk.CheckInconsistClass" json:"classes,omitempty"`
	LastUsed bool                      `protobuf:"varint,3,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
}

func (x *CheckGetPolicyReq) Reset() {
	*x = CheckGetPolicyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckGetPolicyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckGetPolicyReq) ProtoMessage() {}

func (x *CheckGetPolicyReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckGetPolicyReq.ProtoReflect.Descriptor instead.
func (*CheckGetPolicyReq) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{16}
}

func (x *CheckGetPolicyReq) GetSys() string {
	if x != nil {
		return x.Sys
	}
	return ""
}

func (x *CheckGetPolicyReq) GetClasses() []chk.CheckInconsistClass {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *CheckGetPolicyReq) GetLastUsed() bool {
	if x != nil {
		return x.LastUsed
	}
	return false
}

// CheckGetPolicyResp returns the result of check prop and the properties when start check.
// NB: Dupe of CheckPropResp currently; may consolidate if they don't diverge.
type CheckGetPolicyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int32                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`    // DAOS error code.
	Flags    uint32                  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`      // The flags when start check - see CheckFlag.
	Policies []*CheckInconsistPolicy `protobuf:"bytes,3,rep,name=policies,proto3" json:"policies,omitempty"` // Inconsistency policy array.
}

func (x *CheckGetPolicyResp) Reset() {
	*x = CheckGetPolicyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckGetPolicyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckGetPolicyResp) ProtoMessage() {}

func (x *CheckGetPolicyResp) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckGetPolicyResp.ProtoReflect.Descriptor instead.
func (*CheckGetPolicyResp) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{17}
}

func (x *CheckGetPolicyResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CheckGetPolicyResp) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *CheckGetPolicyResp) GetPolicies() []*CheckInconsistPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// For the admin's decision from DAOS check interaction.
type CheckActReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys string `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty"` // DAOS system identifier.
	// DAOS RAS event sequence - see RASEvent::extended_info::check_info::chk_inconsist_seq.
	Seq uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	// The decision from RASEvent::extended_info::check_info::chk_opts.
	Act    chk.CheckInconsistAction `protobuf:"varint,3,opt,name=act,proto3,enum=chk.CheckInconsistAction" json:"act,omitempty"`
	ForAll bool                     `protobuf:"varint,4,opt,name=for_all,json=forAll,proto3" json:"for_all,omitempty"` // The same action is applicable to the same type of inconsistency.
}

func (x *CheckActReq) Reset() {
	*x = CheckActReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckActReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckActReq) ProtoMessage() {}

func (x *CheckActReq) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckActReq.ProtoReflect.Descriptor instead.
func (*CheckActReq) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{18}
}

func (x *CheckActReq) GetSys() string {
	if x != nil {
		return x.Sys
	}
	return ""
}

func (x *CheckActReq) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *CheckActReq) GetAct() chk.CheckInconsistAction {
	if x != nil {
		return x.Act
	}
	return chk.CheckInconsistAction(0)
}

func (x *CheckActReq) GetForAll() bool {
	if x != nil {
		return x.ForAll
	}
	return false
}

// CheckActResp returns the result of executing admin's decision.
type CheckActResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // DAOS error code.
}

func (x *CheckActResp) Reset() {
	*x = CheckActResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_check_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckActResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckActResp) ProtoMessage() {}

func (x *CheckActResp) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_check_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckActResp.ProtoReflect.Descriptor instead.
func (*CheckActResp) Descriptor() ([]byte, []int) {
	return file_mgmt_check_proto_rawDescGZIP(), []int{19}
}

func (x *CheckActResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_mgmt_check_proto protoreflect.FileDescriptor

var file_mgmt_check_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x6d, 0x67, 0x6d, 0x74, 0x1a, 0x0d, 0x63, 0x68, 0x6b, 0x2f, 0x63, 0x68,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x6b, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x43, 0x61, 0x73, 0x12,
	0x3e, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x6b, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x22,
	0x22, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x79, 0x73, 0x22, 0x23, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x79, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x12, 0x36,
	0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x36, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x22, 0x27, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x65, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x71, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x65, 0x71, 0x73, 0x22, 0x4c, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x73,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69,
	0x73, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x22, 0xd7, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x0e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x29, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x63, 0x68, 0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x63, 0x61, 0x6e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x69,
	0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x69,
	0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x63, 0x68, 0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x30, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x63,
	0x61, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x68, 0x6b, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x0c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x79, 0x73, 0x22, 0x75, 0x0a, 0x0d, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x22, 0x76, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x6b,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x22, 0x7a, 0x0a, 0x12, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x36,
	0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x03, 0x61, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x6b, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x61, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6c,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x22,
	0x26, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6f, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2f, 0x64, 0x61, 0x6f, 0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d,
	0x67, 0x6d, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mgmt_check_proto_rawDescOnce sync.Once
	file_mgmt_check_proto_rawDescData = file_mgmt_check_proto_rawDesc
)

func file_mgmt_check_proto_rawDescGZIP() []byte {
	file_mgmt_check_proto_rawDescOnce.Do(func() {
		file_mgmt_check_proto_rawDescData = protoimpl.X.CompressGZIP(file_mgmt_check_proto_rawDescData)
	})
	return file_mgmt_check_proto_rawDescData
}

var file_mgmt_check_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_mgmt_check_proto_goTypes = []interface{}{
	(*CheckInconsistPolicy)(nil),  // 0: mgmt.CheckInconsistPolicy
	(*CheckEnableReq)(nil),        // 1: mgmt.CheckEnableReq
	(*CheckDisableReq)(nil),       // 2: mgmt.CheckDisableReq
	(*CheckStartReq)(nil),         // 3: mgmt.CheckStartReq
	(*CheckStartResp)(nil),        // 4: mgmt.CheckStartResp
	(*CheckStopReq)(nil),          // 5: mgmt.CheckStopReq
	(*CheckStopResp)(nil),         // 6: mgmt.CheckStopResp
	(*CheckQueryReq)(nil),         // 7: mgmt.CheckQueryReq
	(*CheckQueryTime)(nil),        // 8: mgmt.CheckQueryTime
	(*CheckQueryInconsist)(nil),   // 9: mgmt.CheckQueryInconsist
	(*CheckQueryTarget)(nil),      // 10: mgmt.CheckQueryTarget
	(*CheckQueryPool)(nil),        // 11: mgmt.CheckQueryPool
	(*CheckQueryResp)(nil),        // 12: mgmt.CheckQueryResp
	(*CheckSetPolicyReq)(nil),     // 13: mgmt.CheckSetPolicyReq
	(*CheckPropReq)(nil),          // 14: mgmt.CheckPropReq
	(*CheckPropResp)(nil),         // 15: mgmt.CheckPropResp
	(*CheckGetPolicyReq)(nil),     // 16: mgmt.CheckGetPolicyReq
	(*CheckGetPolicyResp)(nil),    // 17: mgmt.CheckGetPolicyResp
	(*CheckActReq)(nil),           // 18: mgmt.CheckActReq
	(*CheckActResp)(nil),          // 19: mgmt.CheckActResp
	(chk.CheckInconsistClass)(0),  // 20: chk.CheckInconsistClass
	(chk.CheckInconsistAction)(0), // 21: chk.CheckInconsistAction
	(chk.CheckInstStatus)(0),      // 22: chk.CheckInstStatus
	(chk.CheckPoolStatus)(0),      // 23: chk.CheckPoolStatus
	(chk.CheckScanPhase)(0),       // 24: chk.CheckScanPhase
	(*chk.CheckReport)(nil),       // 25: chk.CheckReport
}
var file_mgmt_check_proto_depIdxs = []int32{
	20, // 0: mgmt.CheckInconsistPolicy.inconsist_cas:type_name -> chk.CheckInconsistClass
	21, // 1: mgmt.CheckInconsistPolicy.inconsist_act:type_name -> chk.CheckInconsistAction
	0,  // 2: mgmt.CheckStartReq.policies:type_name -> mgmt.CheckInconsistPolicy
	22, // 3: mgmt.CheckQueryTarget.status:type_name -> chk.CheckInstStatus
	9,  // 4: mgmt.CheckQueryTarget.inconsistency:type_name -> mgmt.CheckQueryInconsist
	8,  // 5: mgmt.CheckQueryTarget.time:type_name -> mgmt.CheckQueryTime
	23, // 6: mgmt.CheckQueryPool.status:type_name -> chk.CheckPoolStatus
	24, // 7: mgmt.CheckQueryPool.phase:type_name -> chk.CheckScanPhase
	9,  // 8: mgmt.CheckQueryPool.inconsistency:type_name -> mgmt.CheckQueryInconsist
	8,  // 9: mgmt.CheckQueryPool.time:type_name -> mgmt.CheckQueryTime
	10, // 10: mgmt.CheckQueryPool.targets:type_name -> mgmt.CheckQueryTarget
	22, // 11: mgmt.CheckQueryResp.ins_status:type_name -> chk.CheckInstStatus
	24, // 12: mgmt.CheckQueryResp.ins_phase:type_name -> chk.CheckScanPhase
	9,  // 13: mgmt.CheckQueryResp.inconsistency:type_name -> mgmt.CheckQueryInconsist
	8,  // 14: mgmt.CheckQueryResp.time:type_name -> mgmt.CheckQueryTime
	11, // 15: mgmt.CheckQueryResp.pools:type_name -> mgmt.CheckQueryPool
	25, // 16: mgmt.CheckQueryResp.reports:type_name -> chk.CheckReport
	0,  // 17: mgmt.CheckSetPolicyReq.policies:type_name -> mgmt.CheckInconsistPolicy
	0,  // 18: mgmt.CheckPropResp.policies:type_name -> mgmt.CheckInconsistPolicy
	20, // 19: mgmt.CheckGetPolicyReq.classes:type_name -> chk.CheckInconsistClass
	0,  // 20: mgmt.CheckGetPolicyResp.policies:type_name -> mgmt.CheckInconsistPolicy
	21, // 21: mgmt.CheckActReq.act:type_name -> chk.CheckInconsistAction
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_mgmt_check_proto_init() }
func file_mgmt_check_proto_init() {
	if File_mgmt_check_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mgmt_check_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInconsistPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckEnableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDisableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStopResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQueryTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQueryInconsist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQueryTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQueryPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSetPolicyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPropReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPropResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckGetPolicyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckGetPolicyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckActReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_check_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckActResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mgmt_check_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mgmt_check_proto_goTypes,
		DependencyIndexes: file_mgmt_check_proto_depIdxs,
		MessageInfos:      file_mgmt_check_proto_msgTypes,
	}.Build()
	File_mgmt_check_proto = out.File
	file_mgmt_check_proto_rawDesc = nil
	file_mgmt_check_proto_goTypes = nil
	file_mgmt_check_proto_depIdxs = nil
}
