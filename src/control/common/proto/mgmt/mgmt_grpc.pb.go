//
// (C) Copyright 2019-2022 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.5.0
// source: mgmt/mgmt.proto

package mgmt

import (
	context "context"
	chk "github.com/daos-stack/daos/src/control/common/proto/chk"
	shared "github.com/daos-stack/daos/src/control/common/proto/shared"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MgmtSvc_Join_FullMethodName                     = "/mgmt.MgmtSvc/Join"
	MgmtSvc_ClusterEvent_FullMethodName             = "/mgmt.MgmtSvc/ClusterEvent"
	MgmtSvc_LeaderQuery_FullMethodName              = "/mgmt.MgmtSvc/LeaderQuery"
	MgmtSvc_PoolCreate_FullMethodName               = "/mgmt.MgmtSvc/PoolCreate"
	MgmtSvc_PoolDestroy_FullMethodName              = "/mgmt.MgmtSvc/PoolDestroy"
	MgmtSvc_PoolEvict_FullMethodName                = "/mgmt.MgmtSvc/PoolEvict"
	MgmtSvc_PoolExclude_FullMethodName              = "/mgmt.MgmtSvc/PoolExclude"
	MgmtSvc_PoolDrain_FullMethodName                = "/mgmt.MgmtSvc/PoolDrain"
	MgmtSvc_PoolExtend_FullMethodName               = "/mgmt.MgmtSvc/PoolExtend"
	MgmtSvc_PoolReintegrate_FullMethodName          = "/mgmt.MgmtSvc/PoolReintegrate"
	MgmtSvc_PoolQuery_FullMethodName                = "/mgmt.MgmtSvc/PoolQuery"
	MgmtSvc_PoolQueryTarget_FullMethodName          = "/mgmt.MgmtSvc/PoolQueryTarget"
	MgmtSvc_PoolSetProp_FullMethodName              = "/mgmt.MgmtSvc/PoolSetProp"
	MgmtSvc_PoolGetProp_FullMethodName              = "/mgmt.MgmtSvc/PoolGetProp"
	MgmtSvc_PoolGetACL_FullMethodName               = "/mgmt.MgmtSvc/PoolGetACL"
	MgmtSvc_PoolOverwriteACL_FullMethodName         = "/mgmt.MgmtSvc/PoolOverwriteACL"
	MgmtSvc_PoolUpdateACL_FullMethodName            = "/mgmt.MgmtSvc/PoolUpdateACL"
	MgmtSvc_PoolDeleteACL_FullMethodName            = "/mgmt.MgmtSvc/PoolDeleteACL"
	MgmtSvc_GetAttachInfo_FullMethodName            = "/mgmt.MgmtSvc/GetAttachInfo"
	MgmtSvc_ListPools_FullMethodName                = "/mgmt.MgmtSvc/ListPools"
	MgmtSvc_ListContainers_FullMethodName           = "/mgmt.MgmtSvc/ListContainers"
	MgmtSvc_ContSetOwner_FullMethodName             = "/mgmt.MgmtSvc/ContSetOwner"
	MgmtSvc_SystemQuery_FullMethodName              = "/mgmt.MgmtSvc/SystemQuery"
	MgmtSvc_SystemStop_FullMethodName               = "/mgmt.MgmtSvc/SystemStop"
	MgmtSvc_SystemStart_FullMethodName              = "/mgmt.MgmtSvc/SystemStart"
	MgmtSvc_SystemExclude_FullMethodName            = "/mgmt.MgmtSvc/SystemExclude"
	MgmtSvc_SystemErase_FullMethodName              = "/mgmt.MgmtSvc/SystemErase"
	MgmtSvc_SystemCleanup_FullMethodName            = "/mgmt.MgmtSvc/SystemCleanup"
	MgmtSvc_SystemCheckEnable_FullMethodName        = "/mgmt.MgmtSvc/SystemCheckEnable"
	MgmtSvc_SystemCheckDisable_FullMethodName       = "/mgmt.MgmtSvc/SystemCheckDisable"
	MgmtSvc_SystemCheckStart_FullMethodName         = "/mgmt.MgmtSvc/SystemCheckStart"
	MgmtSvc_SystemCheckStop_FullMethodName          = "/mgmt.MgmtSvc/SystemCheckStop"
	MgmtSvc_SystemCheckQuery_FullMethodName         = "/mgmt.MgmtSvc/SystemCheckQuery"
	MgmtSvc_SystemCheckSetPolicy_FullMethodName     = "/mgmt.MgmtSvc/SystemCheckSetPolicy"
	MgmtSvc_SystemCheckGetPolicy_FullMethodName     = "/mgmt.MgmtSvc/SystemCheckGetPolicy"
	MgmtSvc_SystemCheckRepair_FullMethodName        = "/mgmt.MgmtSvc/SystemCheckRepair"
	MgmtSvc_PoolUpgrade_FullMethodName              = "/mgmt.MgmtSvc/PoolUpgrade"
	MgmtSvc_SystemSetAttr_FullMethodName            = "/mgmt.MgmtSvc/SystemSetAttr"
	MgmtSvc_SystemGetAttr_FullMethodName            = "/mgmt.MgmtSvc/SystemGetAttr"
	MgmtSvc_SystemSetProp_FullMethodName            = "/mgmt.MgmtSvc/SystemSetProp"
	MgmtSvc_SystemGetProp_FullMethodName            = "/mgmt.MgmtSvc/SystemGetProp"
	MgmtSvc_FaultInjectReport_FullMethodName        = "/mgmt.MgmtSvc/FaultInjectReport"
	MgmtSvc_FaultInjectPoolFault_FullMethodName     = "/mgmt.MgmtSvc/FaultInjectPoolFault"
	MgmtSvc_FaultInjectMgmtPoolFault_FullMethodName = "/mgmt.MgmtSvc/FaultInjectMgmtPoolFault"
)

// MgmtSvcClient is the client API for MgmtSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MgmtSvcClient interface {
	// Join the server described by JoinReq to the system.
	Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*JoinResp, error)
	// ClusterEvent notify MS of a RAS event in the cluster.
	ClusterEvent(ctx context.Context, in *shared.ClusterEventReq, opts ...grpc.CallOption) (*shared.ClusterEventResp, error)
	// LeaderQuery provides a mechanism for clients to discover
	// the system's current Management Service leader
	LeaderQuery(ctx context.Context, in *LeaderQueryReq, opts ...grpc.CallOption) (*LeaderQueryResp, error)
	// Create a DAOS pool allocated across a number of ranks
	PoolCreate(ctx context.Context, in *PoolCreateReq, opts ...grpc.CallOption) (*PoolCreateResp, error)
	// Destroy a DAOS pool allocated across a number of ranks.
	PoolDestroy(ctx context.Context, in *PoolDestroyReq, opts ...grpc.CallOption) (*PoolDestroyResp, error)
	// Evict a DAOS pool's connections.
	PoolEvict(ctx context.Context, in *PoolEvictReq, opts ...grpc.CallOption) (*PoolEvictResp, error)
	// Exclude a pool target.
	PoolExclude(ctx context.Context, in *PoolExcludeReq, opts ...grpc.CallOption) (*PoolExcludeResp, error)
	// Drain a pool target.
	PoolDrain(ctx context.Context, in *PoolDrainReq, opts ...grpc.CallOption) (*PoolDrainResp, error)
	// Extend a pool.
	PoolExtend(ctx context.Context, in *PoolExtendReq, opts ...grpc.CallOption) (*PoolExtendResp, error)
	// Reintegrate a pool target.
	PoolReintegrate(ctx context.Context, in *PoolReintegrateReq, opts ...grpc.CallOption) (*PoolReintegrateResp, error)
	// PoolQuery queries a DAOS pool.
	PoolQuery(ctx context.Context, in *PoolQueryReq, opts ...grpc.CallOption) (*PoolQueryResp, error)
	// PoolQueryTarget queries a DAOS storage target.
	PoolQueryTarget(ctx context.Context, in *PoolQueryTargetReq, opts ...grpc.CallOption) (*PoolQueryTargetResp, error)
	// Set a DAOS pool property.
	PoolSetProp(ctx context.Context, in *PoolSetPropReq, opts ...grpc.CallOption) (*PoolSetPropResp, error)
	// Get a DAOS pool property list.
	PoolGetProp(ctx context.Context, in *PoolGetPropReq, opts ...grpc.CallOption) (*PoolGetPropResp, error)
	// Fetch the Access Control List for a DAOS pool.
	PoolGetACL(ctx context.Context, in *GetACLReq, opts ...grpc.CallOption) (*ACLResp, error)
	// Overwrite the Access Control List for a DAOS pool with a new one.
	PoolOverwriteACL(ctx context.Context, in *ModifyACLReq, opts ...grpc.CallOption) (*ACLResp, error)
	// Update existing the Access Control List for a DAOS pool with new entries.
	PoolUpdateACL(ctx context.Context, in *ModifyACLReq, opts ...grpc.CallOption) (*ACLResp, error)
	// Delete an entry from a DAOS pool's Access Control List.
	PoolDeleteACL(ctx context.Context, in *DeleteACLReq, opts ...grpc.CallOption) (*ACLResp, error)
	// Get the information required by libdaos to attach to the system.
	GetAttachInfo(ctx context.Context, in *GetAttachInfoReq, opts ...grpc.CallOption) (*GetAttachInfoResp, error)
	// List all pools in a DAOS system: basic info: UUIDs, service ranks.
	ListPools(ctx context.Context, in *ListPoolsReq, opts ...grpc.CallOption) (*ListPoolsResp, error)
	// List all containers in a pool
	ListContainers(ctx context.Context, in *ListContReq, opts ...grpc.CallOption) (*ListContResp, error)
	// Change the owner of a DAOS container
	ContSetOwner(ctx context.Context, in *ContSetOwnerReq, opts ...grpc.CallOption) (*ContSetOwnerResp, error)
	// Query DAOS system status
	SystemQuery(ctx context.Context, in *SystemQueryReq, opts ...grpc.CallOption) (*SystemQueryResp, error)
	// Stop DAOS system (shutdown data-plane instances)
	SystemStop(ctx context.Context, in *SystemStopReq, opts ...grpc.CallOption) (*SystemStopResp, error)
	// Start DAOS system (restart data-plane instances)
	SystemStart(ctx context.Context, in *SystemStartReq, opts ...grpc.CallOption) (*SystemStartResp, error)
	// Exclude DAOS ranks
	SystemExclude(ctx context.Context, in *SystemExcludeReq, opts ...grpc.CallOption) (*SystemExcludeResp, error)
	// Erase DAOS system database prior to reformat
	SystemErase(ctx context.Context, in *SystemEraseReq, opts ...grpc.CallOption) (*SystemEraseResp, error)
	// Clean up leaked resources for a given node
	SystemCleanup(ctx context.Context, in *SystemCleanupReq, opts ...grpc.CallOption) (*SystemCleanupResp, error)
	// Enable system check mode
	SystemCheckEnable(ctx context.Context, in *CheckEnableReq, opts ...grpc.CallOption) (*DaosResp, error)
	// Disable system check mode
	SystemCheckDisable(ctx context.Context, in *CheckDisableReq, opts ...grpc.CallOption) (*DaosResp, error)
	// Initiate a system check
	SystemCheckStart(ctx context.Context, in *CheckStartReq, opts ...grpc.CallOption) (*CheckStartResp, error)
	// Stop a system check
	SystemCheckStop(ctx context.Context, in *CheckStopReq, opts ...grpc.CallOption) (*CheckStopResp, error)
	// Query a system check
	SystemCheckQuery(ctx context.Context, in *CheckQueryReq, opts ...grpc.CallOption) (*CheckQueryResp, error)
	// Set system check properties
	SystemCheckSetPolicy(ctx context.Context, in *CheckSetPolicyReq, opts ...grpc.CallOption) (*DaosResp, error)
	// Query system check properties
	SystemCheckGetPolicy(ctx context.Context, in *CheckGetPolicyReq, opts ...grpc.CallOption) (*CheckGetPolicyResp, error)
	// Send the desired action to repair an inconsistency.
	SystemCheckRepair(ctx context.Context, in *CheckActReq, opts ...grpc.CallOption) (*CheckActResp, error)
	// PoolUpgrade queries a DAOS pool.
	PoolUpgrade(ctx context.Context, in *PoolUpgradeReq, opts ...grpc.CallOption) (*PoolUpgradeResp, error)
	// Set a system attribute or attributes.
	SystemSetAttr(ctx context.Context, in *SystemSetAttrReq, opts ...grpc.CallOption) (*DaosResp, error)
	// Get a system attribute or attributes.
	SystemGetAttr(ctx context.Context, in *SystemGetAttrReq, opts ...grpc.CallOption) (*SystemGetAttrResp, error)
	// Set a system property or properties.
	SystemSetProp(ctx context.Context, in *SystemSetPropReq, opts ...grpc.CallOption) (*DaosResp, error)
	// Get a system property or properties.
	SystemGetProp(ctx context.Context, in *SystemGetPropReq, opts ...grpc.CallOption) (*SystemGetPropResp, error)
	// Fault injection handlers are only implemented in non-release builds.
	// FaultInjectReport injects a checker report.
	FaultInjectReport(ctx context.Context, in *chk.CheckReport, opts ...grpc.CallOption) (*DaosResp, error)
	// FaultInjectPoolFault creates a pool fault for testing the checker.
	FaultInjectPoolFault(ctx context.Context, in *chk.Fault, opts ...grpc.CallOption) (*DaosResp, error)
	FaultInjectMgmtPoolFault(ctx context.Context, in *chk.Fault, opts ...grpc.CallOption) (*DaosResp, error)
}

type mgmtSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtSvcClient(cc grpc.ClientConnInterface) MgmtSvcClient {
	return &mgmtSvcClient{cc}
}

func (c *mgmtSvcClient) Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*JoinResp, error) {
	out := new(JoinResp)
	err := c.cc.Invoke(ctx, MgmtSvc_Join_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) ClusterEvent(ctx context.Context, in *shared.ClusterEventReq, opts ...grpc.CallOption) (*shared.ClusterEventResp, error) {
	out := new(shared.ClusterEventResp)
	err := c.cc.Invoke(ctx, MgmtSvc_ClusterEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) LeaderQuery(ctx context.Context, in *LeaderQueryReq, opts ...grpc.CallOption) (*LeaderQueryResp, error) {
	out := new(LeaderQueryResp)
	err := c.cc.Invoke(ctx, MgmtSvc_LeaderQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolCreate(ctx context.Context, in *PoolCreateReq, opts ...grpc.CallOption) (*PoolCreateResp, error) {
	out := new(PoolCreateResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolDestroy(ctx context.Context, in *PoolDestroyReq, opts ...grpc.CallOption) (*PoolDestroyResp, error) {
	out := new(PoolDestroyResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolDestroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolEvict(ctx context.Context, in *PoolEvictReq, opts ...grpc.CallOption) (*PoolEvictResp, error) {
	out := new(PoolEvictResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolEvict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolExclude(ctx context.Context, in *PoolExcludeReq, opts ...grpc.CallOption) (*PoolExcludeResp, error) {
	out := new(PoolExcludeResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolExclude_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolDrain(ctx context.Context, in *PoolDrainReq, opts ...grpc.CallOption) (*PoolDrainResp, error) {
	out := new(PoolDrainResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolDrain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolExtend(ctx context.Context, in *PoolExtendReq, opts ...grpc.CallOption) (*PoolExtendResp, error) {
	out := new(PoolExtendResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolExtend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolReintegrate(ctx context.Context, in *PoolReintegrateReq, opts ...grpc.CallOption) (*PoolReintegrateResp, error) {
	out := new(PoolReintegrateResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolReintegrate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolQuery(ctx context.Context, in *PoolQueryReq, opts ...grpc.CallOption) (*PoolQueryResp, error) {
	out := new(PoolQueryResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolQueryTarget(ctx context.Context, in *PoolQueryTargetReq, opts ...grpc.CallOption) (*PoolQueryTargetResp, error) {
	out := new(PoolQueryTargetResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolQueryTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolSetProp(ctx context.Context, in *PoolSetPropReq, opts ...grpc.CallOption) (*PoolSetPropResp, error) {
	out := new(PoolSetPropResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolSetProp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolGetProp(ctx context.Context, in *PoolGetPropReq, opts ...grpc.CallOption) (*PoolGetPropResp, error) {
	out := new(PoolGetPropResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolGetProp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolGetACL(ctx context.Context, in *GetACLReq, opts ...grpc.CallOption) (*ACLResp, error) {
	out := new(ACLResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolGetACL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolOverwriteACL(ctx context.Context, in *ModifyACLReq, opts ...grpc.CallOption) (*ACLResp, error) {
	out := new(ACLResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolOverwriteACL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolUpdateACL(ctx context.Context, in *ModifyACLReq, opts ...grpc.CallOption) (*ACLResp, error) {
	out := new(ACLResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolUpdateACL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolDeleteACL(ctx context.Context, in *DeleteACLReq, opts ...grpc.CallOption) (*ACLResp, error) {
	out := new(ACLResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolDeleteACL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) GetAttachInfo(ctx context.Context, in *GetAttachInfoReq, opts ...grpc.CallOption) (*GetAttachInfoResp, error) {
	out := new(GetAttachInfoResp)
	err := c.cc.Invoke(ctx, MgmtSvc_GetAttachInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) ListPools(ctx context.Context, in *ListPoolsReq, opts ...grpc.CallOption) (*ListPoolsResp, error) {
	out := new(ListPoolsResp)
	err := c.cc.Invoke(ctx, MgmtSvc_ListPools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) ListContainers(ctx context.Context, in *ListContReq, opts ...grpc.CallOption) (*ListContResp, error) {
	out := new(ListContResp)
	err := c.cc.Invoke(ctx, MgmtSvc_ListContainers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) ContSetOwner(ctx context.Context, in *ContSetOwnerReq, opts ...grpc.CallOption) (*ContSetOwnerResp, error) {
	out := new(ContSetOwnerResp)
	err := c.cc.Invoke(ctx, MgmtSvc_ContSetOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemQuery(ctx context.Context, in *SystemQueryReq, opts ...grpc.CallOption) (*SystemQueryResp, error) {
	out := new(SystemQueryResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemStop(ctx context.Context, in *SystemStopReq, opts ...grpc.CallOption) (*SystemStopResp, error) {
	out := new(SystemStopResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemStop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemStart(ctx context.Context, in *SystemStartReq, opts ...grpc.CallOption) (*SystemStartResp, error) {
	out := new(SystemStartResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemExclude(ctx context.Context, in *SystemExcludeReq, opts ...grpc.CallOption) (*SystemExcludeResp, error) {
	out := new(SystemExcludeResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemExclude_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemErase(ctx context.Context, in *SystemEraseReq, opts ...grpc.CallOption) (*SystemEraseResp, error) {
	out := new(SystemEraseResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemErase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemCleanup(ctx context.Context, in *SystemCleanupReq, opts ...grpc.CallOption) (*SystemCleanupResp, error) {
	out := new(SystemCleanupResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemCleanup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemCheckEnable(ctx context.Context, in *CheckEnableReq, opts ...grpc.CallOption) (*DaosResp, error) {
	out := new(DaosResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemCheckEnable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemCheckDisable(ctx context.Context, in *CheckDisableReq, opts ...grpc.CallOption) (*DaosResp, error) {
	out := new(DaosResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemCheckDisable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemCheckStart(ctx context.Context, in *CheckStartReq, opts ...grpc.CallOption) (*CheckStartResp, error) {
	out := new(CheckStartResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemCheckStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemCheckStop(ctx context.Context, in *CheckStopReq, opts ...grpc.CallOption) (*CheckStopResp, error) {
	out := new(CheckStopResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemCheckStop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemCheckQuery(ctx context.Context, in *CheckQueryReq, opts ...grpc.CallOption) (*CheckQueryResp, error) {
	out := new(CheckQueryResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemCheckQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemCheckSetPolicy(ctx context.Context, in *CheckSetPolicyReq, opts ...grpc.CallOption) (*DaosResp, error) {
	out := new(DaosResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemCheckSetPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemCheckGetPolicy(ctx context.Context, in *CheckGetPolicyReq, opts ...grpc.CallOption) (*CheckGetPolicyResp, error) {
	out := new(CheckGetPolicyResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemCheckGetPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemCheckRepair(ctx context.Context, in *CheckActReq, opts ...grpc.CallOption) (*CheckActResp, error) {
	out := new(CheckActResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemCheckRepair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) PoolUpgrade(ctx context.Context, in *PoolUpgradeReq, opts ...grpc.CallOption) (*PoolUpgradeResp, error) {
	out := new(PoolUpgradeResp)
	err := c.cc.Invoke(ctx, MgmtSvc_PoolUpgrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemSetAttr(ctx context.Context, in *SystemSetAttrReq, opts ...grpc.CallOption) (*DaosResp, error) {
	out := new(DaosResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemSetAttr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemGetAttr(ctx context.Context, in *SystemGetAttrReq, opts ...grpc.CallOption) (*SystemGetAttrResp, error) {
	out := new(SystemGetAttrResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemGetAttr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemSetProp(ctx context.Context, in *SystemSetPropReq, opts ...grpc.CallOption) (*DaosResp, error) {
	out := new(DaosResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemSetProp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) SystemGetProp(ctx context.Context, in *SystemGetPropReq, opts ...grpc.CallOption) (*SystemGetPropResp, error) {
	out := new(SystemGetPropResp)
	err := c.cc.Invoke(ctx, MgmtSvc_SystemGetProp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) FaultInjectReport(ctx context.Context, in *chk.CheckReport, opts ...grpc.CallOption) (*DaosResp, error) {
	out := new(DaosResp)
	err := c.cc.Invoke(ctx, MgmtSvc_FaultInjectReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) FaultInjectPoolFault(ctx context.Context, in *chk.Fault, opts ...grpc.CallOption) (*DaosResp, error) {
	out := new(DaosResp)
	err := c.cc.Invoke(ctx, MgmtSvc_FaultInjectPoolFault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) FaultInjectMgmtPoolFault(ctx context.Context, in *chk.Fault, opts ...grpc.CallOption) (*DaosResp, error) {
	out := new(DaosResp)
	err := c.cc.Invoke(ctx, MgmtSvc_FaultInjectMgmtPoolFault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtSvcServer is the server API for MgmtSvc service.
// All implementations must embed UnimplementedMgmtSvcServer
// for forward compatibility
type MgmtSvcServer interface {
	// Join the server described by JoinReq to the system.
	Join(context.Context, *JoinReq) (*JoinResp, error)
	// ClusterEvent notify MS of a RAS event in the cluster.
	ClusterEvent(context.Context, *shared.ClusterEventReq) (*shared.ClusterEventResp, error)
	// LeaderQuery provides a mechanism for clients to discover
	// the system's current Management Service leader
	LeaderQuery(context.Context, *LeaderQueryReq) (*LeaderQueryResp, error)
	// Create a DAOS pool allocated across a number of ranks
	PoolCreate(context.Context, *PoolCreateReq) (*PoolCreateResp, error)
	// Destroy a DAOS pool allocated across a number of ranks.
	PoolDestroy(context.Context, *PoolDestroyReq) (*PoolDestroyResp, error)
	// Evict a DAOS pool's connections.
	PoolEvict(context.Context, *PoolEvictReq) (*PoolEvictResp, error)
	// Exclude a pool target.
	PoolExclude(context.Context, *PoolExcludeReq) (*PoolExcludeResp, error)
	// Drain a pool target.
	PoolDrain(context.Context, *PoolDrainReq) (*PoolDrainResp, error)
	// Extend a pool.
	PoolExtend(context.Context, *PoolExtendReq) (*PoolExtendResp, error)
	// Reintegrate a pool target.
	PoolReintegrate(context.Context, *PoolReintegrateReq) (*PoolReintegrateResp, error)
	// PoolQuery queries a DAOS pool.
	PoolQuery(context.Context, *PoolQueryReq) (*PoolQueryResp, error)
	// PoolQueryTarget queries a DAOS storage target.
	PoolQueryTarget(context.Context, *PoolQueryTargetReq) (*PoolQueryTargetResp, error)
	// Set a DAOS pool property.
	PoolSetProp(context.Context, *PoolSetPropReq) (*PoolSetPropResp, error)
	// Get a DAOS pool property list.
	PoolGetProp(context.Context, *PoolGetPropReq) (*PoolGetPropResp, error)
	// Fetch the Access Control List for a DAOS pool.
	PoolGetACL(context.Context, *GetACLReq) (*ACLResp, error)
	// Overwrite the Access Control List for a DAOS pool with a new one.
	PoolOverwriteACL(context.Context, *ModifyACLReq) (*ACLResp, error)
	// Update existing the Access Control List for a DAOS pool with new entries.
	PoolUpdateACL(context.Context, *ModifyACLReq) (*ACLResp, error)
	// Delete an entry from a DAOS pool's Access Control List.
	PoolDeleteACL(context.Context, *DeleteACLReq) (*ACLResp, error)
	// Get the information required by libdaos to attach to the system.
	GetAttachInfo(context.Context, *GetAttachInfoReq) (*GetAttachInfoResp, error)
	// List all pools in a DAOS system: basic info: UUIDs, service ranks.
	ListPools(context.Context, *ListPoolsReq) (*ListPoolsResp, error)
	// List all containers in a pool
	ListContainers(context.Context, *ListContReq) (*ListContResp, error)
	// Change the owner of a DAOS container
	ContSetOwner(context.Context, *ContSetOwnerReq) (*ContSetOwnerResp, error)
	// Query DAOS system status
	SystemQuery(context.Context, *SystemQueryReq) (*SystemQueryResp, error)
	// Stop DAOS system (shutdown data-plane instances)
	SystemStop(context.Context, *SystemStopReq) (*SystemStopResp, error)
	// Start DAOS system (restart data-plane instances)
	SystemStart(context.Context, *SystemStartReq) (*SystemStartResp, error)
	// Exclude DAOS ranks
	SystemExclude(context.Context, *SystemExcludeReq) (*SystemExcludeResp, error)
	// Erase DAOS system database prior to reformat
	SystemErase(context.Context, *SystemEraseReq) (*SystemEraseResp, error)
	// Clean up leaked resources for a given node
	SystemCleanup(context.Context, *SystemCleanupReq) (*SystemCleanupResp, error)
	// Enable system check mode
	SystemCheckEnable(context.Context, *CheckEnableReq) (*DaosResp, error)
	// Disable system check mode
	SystemCheckDisable(context.Context, *CheckDisableReq) (*DaosResp, error)
	// Initiate a system check
	SystemCheckStart(context.Context, *CheckStartReq) (*CheckStartResp, error)
	// Stop a system check
	SystemCheckStop(context.Context, *CheckStopReq) (*CheckStopResp, error)
	// Query a system check
	SystemCheckQuery(context.Context, *CheckQueryReq) (*CheckQueryResp, error)
	// Set system check properties
	SystemCheckSetPolicy(context.Context, *CheckSetPolicyReq) (*DaosResp, error)
	// Query system check properties
	SystemCheckGetPolicy(context.Context, *CheckGetPolicyReq) (*CheckGetPolicyResp, error)
	// Send the desired action to repair an inconsistency.
	SystemCheckRepair(context.Context, *CheckActReq) (*CheckActResp, error)
	// PoolUpgrade queries a DAOS pool.
	PoolUpgrade(context.Context, *PoolUpgradeReq) (*PoolUpgradeResp, error)
	// Set a system attribute or attributes.
	SystemSetAttr(context.Context, *SystemSetAttrReq) (*DaosResp, error)
	// Get a system attribute or attributes.
	SystemGetAttr(context.Context, *SystemGetAttrReq) (*SystemGetAttrResp, error)
	// Set a system property or properties.
	SystemSetProp(context.Context, *SystemSetPropReq) (*DaosResp, error)
	// Get a system property or properties.
	SystemGetProp(context.Context, *SystemGetPropReq) (*SystemGetPropResp, error)
	// Fault injection handlers are only implemented in non-release builds.
	// FaultInjectReport injects a checker report.
	FaultInjectReport(context.Context, *chk.CheckReport) (*DaosResp, error)
	// FaultInjectPoolFault creates a pool fault for testing the checker.
	FaultInjectPoolFault(context.Context, *chk.Fault) (*DaosResp, error)
	FaultInjectMgmtPoolFault(context.Context, *chk.Fault) (*DaosResp, error)
	mustEmbedUnimplementedMgmtSvcServer()
}

// UnimplementedMgmtSvcServer must be embedded to have forward compatible implementations.
type UnimplementedMgmtSvcServer struct {
}

func (UnimplementedMgmtSvcServer) Join(context.Context, *JoinReq) (*JoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedMgmtSvcServer) ClusterEvent(context.Context, *shared.ClusterEventReq) (*shared.ClusterEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterEvent not implemented")
}
func (UnimplementedMgmtSvcServer) LeaderQuery(context.Context, *LeaderQueryReq) (*LeaderQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderQuery not implemented")
}
func (UnimplementedMgmtSvcServer) PoolCreate(context.Context, *PoolCreateReq) (*PoolCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolCreate not implemented")
}
func (UnimplementedMgmtSvcServer) PoolDestroy(context.Context, *PoolDestroyReq) (*PoolDestroyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDestroy not implemented")
}
func (UnimplementedMgmtSvcServer) PoolEvict(context.Context, *PoolEvictReq) (*PoolEvictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolEvict not implemented")
}
func (UnimplementedMgmtSvcServer) PoolExclude(context.Context, *PoolExcludeReq) (*PoolExcludeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolExclude not implemented")
}
func (UnimplementedMgmtSvcServer) PoolDrain(context.Context, *PoolDrainReq) (*PoolDrainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDrain not implemented")
}
func (UnimplementedMgmtSvcServer) PoolExtend(context.Context, *PoolExtendReq) (*PoolExtendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolExtend not implemented")
}
func (UnimplementedMgmtSvcServer) PoolReintegrate(context.Context, *PoolReintegrateReq) (*PoolReintegrateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolReintegrate not implemented")
}
func (UnimplementedMgmtSvcServer) PoolQuery(context.Context, *PoolQueryReq) (*PoolQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolQuery not implemented")
}
func (UnimplementedMgmtSvcServer) PoolQueryTarget(context.Context, *PoolQueryTargetReq) (*PoolQueryTargetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolQueryTarget not implemented")
}
func (UnimplementedMgmtSvcServer) PoolSetProp(context.Context, *PoolSetPropReq) (*PoolSetPropResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolSetProp not implemented")
}
func (UnimplementedMgmtSvcServer) PoolGetProp(context.Context, *PoolGetPropReq) (*PoolGetPropResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolGetProp not implemented")
}
func (UnimplementedMgmtSvcServer) PoolGetACL(context.Context, *GetACLReq) (*ACLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolGetACL not implemented")
}
func (UnimplementedMgmtSvcServer) PoolOverwriteACL(context.Context, *ModifyACLReq) (*ACLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolOverwriteACL not implemented")
}
func (UnimplementedMgmtSvcServer) PoolUpdateACL(context.Context, *ModifyACLReq) (*ACLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolUpdateACL not implemented")
}
func (UnimplementedMgmtSvcServer) PoolDeleteACL(context.Context, *DeleteACLReq) (*ACLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDeleteACL not implemented")
}
func (UnimplementedMgmtSvcServer) GetAttachInfo(context.Context, *GetAttachInfoReq) (*GetAttachInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachInfo not implemented")
}
func (UnimplementedMgmtSvcServer) ListPools(context.Context, *ListPoolsReq) (*ListPoolsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPools not implemented")
}
func (UnimplementedMgmtSvcServer) ListContainers(context.Context, *ListContReq) (*ListContResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainers not implemented")
}
func (UnimplementedMgmtSvcServer) ContSetOwner(context.Context, *ContSetOwnerReq) (*ContSetOwnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContSetOwner not implemented")
}
func (UnimplementedMgmtSvcServer) SystemQuery(context.Context, *SystemQueryReq) (*SystemQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemQuery not implemented")
}
func (UnimplementedMgmtSvcServer) SystemStop(context.Context, *SystemStopReq) (*SystemStopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemStop not implemented")
}
func (UnimplementedMgmtSvcServer) SystemStart(context.Context, *SystemStartReq) (*SystemStartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemStart not implemented")
}
func (UnimplementedMgmtSvcServer) SystemExclude(context.Context, *SystemExcludeReq) (*SystemExcludeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemExclude not implemented")
}
func (UnimplementedMgmtSvcServer) SystemErase(context.Context, *SystemEraseReq) (*SystemEraseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemErase not implemented")
}
func (UnimplementedMgmtSvcServer) SystemCleanup(context.Context, *SystemCleanupReq) (*SystemCleanupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCleanup not implemented")
}
func (UnimplementedMgmtSvcServer) SystemCheckEnable(context.Context, *CheckEnableReq) (*DaosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCheckEnable not implemented")
}
func (UnimplementedMgmtSvcServer) SystemCheckDisable(context.Context, *CheckDisableReq) (*DaosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCheckDisable not implemented")
}
func (UnimplementedMgmtSvcServer) SystemCheckStart(context.Context, *CheckStartReq) (*CheckStartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCheckStart not implemented")
}
func (UnimplementedMgmtSvcServer) SystemCheckStop(context.Context, *CheckStopReq) (*CheckStopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCheckStop not implemented")
}
func (UnimplementedMgmtSvcServer) SystemCheckQuery(context.Context, *CheckQueryReq) (*CheckQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCheckQuery not implemented")
}
func (UnimplementedMgmtSvcServer) SystemCheckSetPolicy(context.Context, *CheckSetPolicyReq) (*DaosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCheckSetPolicy not implemented")
}
func (UnimplementedMgmtSvcServer) SystemCheckGetPolicy(context.Context, *CheckGetPolicyReq) (*CheckGetPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCheckGetPolicy not implemented")
}
func (UnimplementedMgmtSvcServer) SystemCheckRepair(context.Context, *CheckActReq) (*CheckActResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCheckRepair not implemented")
}
func (UnimplementedMgmtSvcServer) PoolUpgrade(context.Context, *PoolUpgradeReq) (*PoolUpgradeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolUpgrade not implemented")
}
func (UnimplementedMgmtSvcServer) SystemSetAttr(context.Context, *SystemSetAttrReq) (*DaosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemSetAttr not implemented")
}
func (UnimplementedMgmtSvcServer) SystemGetAttr(context.Context, *SystemGetAttrReq) (*SystemGetAttrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemGetAttr not implemented")
}
func (UnimplementedMgmtSvcServer) SystemSetProp(context.Context, *SystemSetPropReq) (*DaosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemSetProp not implemented")
}
func (UnimplementedMgmtSvcServer) SystemGetProp(context.Context, *SystemGetPropReq) (*SystemGetPropResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemGetProp not implemented")
}
func (UnimplementedMgmtSvcServer) FaultInjectReport(context.Context, *chk.CheckReport) (*DaosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaultInjectReport not implemented")
}
func (UnimplementedMgmtSvcServer) FaultInjectPoolFault(context.Context, *chk.Fault) (*DaosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaultInjectPoolFault not implemented")
}
func (UnimplementedMgmtSvcServer) FaultInjectMgmtPoolFault(context.Context, *chk.Fault) (*DaosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaultInjectMgmtPoolFault not implemented")
}
func (UnimplementedMgmtSvcServer) mustEmbedUnimplementedMgmtSvcServer() {}

// UnsafeMgmtSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtSvcServer will
// result in compilation errors.
type UnsafeMgmtSvcServer interface {
	mustEmbedUnimplementedMgmtSvcServer()
}

func RegisterMgmtSvcServer(s grpc.ServiceRegistrar, srv MgmtSvcServer) {
	s.RegisterService(&MgmtSvc_ServiceDesc, srv)
}

func _MgmtSvc_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).Join(ctx, req.(*JoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_ClusterEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.ClusterEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).ClusterEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_ClusterEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).ClusterEvent(ctx, req.(*shared.ClusterEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_LeaderQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).LeaderQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_LeaderQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).LeaderQuery(ctx, req.(*LeaderQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolCreate(ctx, req.(*PoolCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolDestroyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolDestroy(ctx, req.(*PoolDestroyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolEvict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolEvictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolEvict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolEvict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolEvict(ctx, req.(*PoolEvictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolExclude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolExcludeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolExclude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolExclude_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolExclude(ctx, req.(*PoolExcludeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolDrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolDrainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolDrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolDrain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolDrain(ctx, req.(*PoolDrainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolExtend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolExtendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolExtend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolExtend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolExtend(ctx, req.(*PoolExtendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolReintegrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolReintegrateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolReintegrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolReintegrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolReintegrate(ctx, req.(*PoolReintegrateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolQuery(ctx, req.(*PoolQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolQueryTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolQueryTargetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolQueryTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolQueryTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolQueryTarget(ctx, req.(*PoolQueryTargetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolSetProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolSetPropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolSetProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolSetProp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolSetProp(ctx, req.(*PoolSetPropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolGetProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolGetPropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolGetProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolGetProp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolGetProp(ctx, req.(*PoolGetPropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolGetACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolGetACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolGetACL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolGetACL(ctx, req.(*GetACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolOverwriteACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolOverwriteACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolOverwriteACL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolOverwriteACL(ctx, req.(*ModifyACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolUpdateACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolUpdateACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolUpdateACL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolUpdateACL(ctx, req.(*ModifyACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolDeleteACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolDeleteACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolDeleteACL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolDeleteACL(ctx, req.(*DeleteACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_GetAttachInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).GetAttachInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_GetAttachInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).GetAttachInfo(ctx, req.(*GetAttachInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_ListPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoolsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).ListPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_ListPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).ListPools(ctx, req.(*ListPoolsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_ListContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).ListContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_ListContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).ListContainers(ctx, req.(*ListContReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_ContSetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContSetOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).ContSetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_ContSetOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).ContSetOwner(ctx, req.(*ContSetOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemQuery(ctx, req.(*SystemQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemStop(ctx, req.(*SystemStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemStart(ctx, req.(*SystemStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemExclude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemExcludeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemExclude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemExclude_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemExclude(ctx, req.(*SystemExcludeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemErase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemEraseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemErase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemErase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemErase(ctx, req.(*SystemEraseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemCleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemCleanupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemCleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemCleanup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemCleanup(ctx, req.(*SystemCleanupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemCheckEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEnableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemCheckEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemCheckEnable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemCheckEnable(ctx, req.(*CheckEnableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemCheckDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDisableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemCheckDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemCheckDisable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemCheckDisable(ctx, req.(*CheckDisableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemCheckStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemCheckStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemCheckStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemCheckStart(ctx, req.(*CheckStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemCheckStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemCheckStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemCheckStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemCheckStop(ctx, req.(*CheckStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemCheckQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemCheckQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemCheckQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemCheckQuery(ctx, req.(*CheckQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemCheckSetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSetPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemCheckSetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemCheckSetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemCheckSetPolicy(ctx, req.(*CheckSetPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemCheckGetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGetPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemCheckGetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemCheckGetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemCheckGetPolicy(ctx, req.(*CheckGetPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemCheckRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemCheckRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemCheckRepair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemCheckRepair(ctx, req.(*CheckActReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_PoolUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolUpgradeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).PoolUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_PoolUpgrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).PoolUpgrade(ctx, req.(*PoolUpgradeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemSetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemSetAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemSetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemSetAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemSetAttr(ctx, req.(*SystemSetAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemGetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemGetAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemGetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemGetAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemGetAttr(ctx, req.(*SystemGetAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemSetProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemSetPropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemSetProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemSetProp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemSetProp(ctx, req.(*SystemSetPropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_SystemGetProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemGetPropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).SystemGetProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_SystemGetProp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).SystemGetProp(ctx, req.(*SystemGetPropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_FaultInjectReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chk.CheckReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).FaultInjectReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_FaultInjectReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).FaultInjectReport(ctx, req.(*chk.CheckReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_FaultInjectPoolFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chk.Fault)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).FaultInjectPoolFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_FaultInjectPoolFault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).FaultInjectPoolFault(ctx, req.(*chk.Fault))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_FaultInjectMgmtPoolFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chk.Fault)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).FaultInjectMgmtPoolFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtSvc_FaultInjectMgmtPoolFault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).FaultInjectMgmtPoolFault(ctx, req.(*chk.Fault))
	}
	return interceptor(ctx, in, info, handler)
}

// MgmtSvc_ServiceDesc is the grpc.ServiceDesc for MgmtSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MgmtSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mgmt.MgmtSvc",
	HandlerType: (*MgmtSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _MgmtSvc_Join_Handler,
		},
		{
			MethodName: "ClusterEvent",
			Handler:    _MgmtSvc_ClusterEvent_Handler,
		},
		{
			MethodName: "LeaderQuery",
			Handler:    _MgmtSvc_LeaderQuery_Handler,
		},
		{
			MethodName: "PoolCreate",
			Handler:    _MgmtSvc_PoolCreate_Handler,
		},
		{
			MethodName: "PoolDestroy",
			Handler:    _MgmtSvc_PoolDestroy_Handler,
		},
		{
			MethodName: "PoolEvict",
			Handler:    _MgmtSvc_PoolEvict_Handler,
		},
		{
			MethodName: "PoolExclude",
			Handler:    _MgmtSvc_PoolExclude_Handler,
		},
		{
			MethodName: "PoolDrain",
			Handler:    _MgmtSvc_PoolDrain_Handler,
		},
		{
			MethodName: "PoolExtend",
			Handler:    _MgmtSvc_PoolExtend_Handler,
		},
		{
			MethodName: "PoolReintegrate",
			Handler:    _MgmtSvc_PoolReintegrate_Handler,
		},
		{
			MethodName: "PoolQuery",
			Handler:    _MgmtSvc_PoolQuery_Handler,
		},
		{
			MethodName: "PoolQueryTarget",
			Handler:    _MgmtSvc_PoolQueryTarget_Handler,
		},
		{
			MethodName: "PoolSetProp",
			Handler:    _MgmtSvc_PoolSetProp_Handler,
		},
		{
			MethodName: "PoolGetProp",
			Handler:    _MgmtSvc_PoolGetProp_Handler,
		},
		{
			MethodName: "PoolGetACL",
			Handler:    _MgmtSvc_PoolGetACL_Handler,
		},
		{
			MethodName: "PoolOverwriteACL",
			Handler:    _MgmtSvc_PoolOverwriteACL_Handler,
		},
		{
			MethodName: "PoolUpdateACL",
			Handler:    _MgmtSvc_PoolUpdateACL_Handler,
		},
		{
			MethodName: "PoolDeleteACL",
			Handler:    _MgmtSvc_PoolDeleteACL_Handler,
		},
		{
			MethodName: "GetAttachInfo",
			Handler:    _MgmtSvc_GetAttachInfo_Handler,
		},
		{
			MethodName: "ListPools",
			Handler:    _MgmtSvc_ListPools_Handler,
		},
		{
			MethodName: "ListContainers",
			Handler:    _MgmtSvc_ListContainers_Handler,
		},
		{
			MethodName: "ContSetOwner",
			Handler:    _MgmtSvc_ContSetOwner_Handler,
		},
		{
			MethodName: "SystemQuery",
			Handler:    _MgmtSvc_SystemQuery_Handler,
		},
		{
			MethodName: "SystemStop",
			Handler:    _MgmtSvc_SystemStop_Handler,
		},
		{
			MethodName: "SystemStart",
			Handler:    _MgmtSvc_SystemStart_Handler,
		},
		{
			MethodName: "SystemExclude",
			Handler:    _MgmtSvc_SystemExclude_Handler,
		},
		{
			MethodName: "SystemErase",
			Handler:    _MgmtSvc_SystemErase_Handler,
		},
		{
			MethodName: "SystemCleanup",
			Handler:    _MgmtSvc_SystemCleanup_Handler,
		},
		{
			MethodName: "SystemCheckEnable",
			Handler:    _MgmtSvc_SystemCheckEnable_Handler,
		},
		{
			MethodName: "SystemCheckDisable",
			Handler:    _MgmtSvc_SystemCheckDisable_Handler,
		},
		{
			MethodName: "SystemCheckStart",
			Handler:    _MgmtSvc_SystemCheckStart_Handler,
		},
		{
			MethodName: "SystemCheckStop",
			Handler:    _MgmtSvc_SystemCheckStop_Handler,
		},
		{
			MethodName: "SystemCheckQuery",
			Handler:    _MgmtSvc_SystemCheckQuery_Handler,
		},
		{
			MethodName: "SystemCheckSetPolicy",
			Handler:    _MgmtSvc_SystemCheckSetPolicy_Handler,
		},
		{
			MethodName: "SystemCheckGetPolicy",
			Handler:    _MgmtSvc_SystemCheckGetPolicy_Handler,
		},
		{
			MethodName: "SystemCheckRepair",
			Handler:    _MgmtSvc_SystemCheckRepair_Handler,
		},
		{
			MethodName: "PoolUpgrade",
			Handler:    _MgmtSvc_PoolUpgrade_Handler,
		},
		{
			MethodName: "SystemSetAttr",
			Handler:    _MgmtSvc_SystemSetAttr_Handler,
		},
		{
			MethodName: "SystemGetAttr",
			Handler:    _MgmtSvc_SystemGetAttr_Handler,
		},
		{
			MethodName: "SystemSetProp",
			Handler:    _MgmtSvc_SystemSetProp_Handler,
		},
		{
			MethodName: "SystemGetProp",
			Handler:    _MgmtSvc_SystemGetProp_Handler,
		},
		{
			MethodName: "FaultInjectReport",
			Handler:    _MgmtSvc_FaultInjectReport_Handler,
		},
		{
			MethodName: "FaultInjectPoolFault",
			Handler:    _MgmtSvc_FaultInjectPoolFault_Handler,
		},
		{
			MethodName: "FaultInjectMgmtPoolFault",
			Handler:    _MgmtSvc_FaultInjectMgmtPoolFault_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mgmt/mgmt.proto",
}
