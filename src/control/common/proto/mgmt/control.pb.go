// Code generated by protoc-gen-go. DO NOT EDIT.
// source: control.proto

package mgmt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MgmtCtlClient is the client API for MgmtCtl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MgmtCtlClient interface {
	// Retrieve details of nonvolatile storage on server
	StorageScan(ctx context.Context, in *StorageScanReq, opts ...grpc.CallOption) (*StorageScanResp, error)
	// Format nonvolatile storage devices for use with DAOS
	StorageFormat(ctx context.Context, in *StorageFormatReq, opts ...grpc.CallOption) (MgmtCtl_StorageFormatClient, error)
	// Update nonvolatile storage device firmware
	StorageUpdate(ctx context.Context, in *StorageUpdateReq, opts ...grpc.CallOption) (MgmtCtl_StorageUpdateClient, error)
	// Perform burn-in testing to verify nonvolatile storage devices
	StorageBurnIn(ctx context.Context, in *StorageBurnInReq, opts ...grpc.CallOption) (MgmtCtl_StorageBurnInClient, error)
	// Fetch FIO configuration file specifying burn-in jobs/workloads
	FetchFioConfigPaths(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (MgmtCtl_FetchFioConfigPathsClient, error)
	// Kill a given rank associated with a given pool
	KillRank(ctx context.Context, in *DaosRank, opts ...grpc.CallOption) (*DaosResp, error)
	// List features supported on remote storage server/DAOS system
	ListFeatures(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (MgmtCtl_ListFeaturesClient, error)
}

type mgmtCtlClient struct {
	cc *grpc.ClientConn
}

func NewMgmtCtlClient(cc *grpc.ClientConn) MgmtCtlClient {
	return &mgmtCtlClient{cc}
}

func (c *mgmtCtlClient) StorageScan(ctx context.Context, in *StorageScanReq, opts ...grpc.CallOption) (*StorageScanResp, error) {
	out := new(StorageScanResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtCtl/StorageScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtCtlClient) StorageFormat(ctx context.Context, in *StorageFormatReq, opts ...grpc.CallOption) (MgmtCtl_StorageFormatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtCtl_serviceDesc.Streams[0], "/mgmt.MgmtCtl/StorageFormat", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtCtlStorageFormatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MgmtCtl_StorageFormatClient interface {
	Recv() (*StorageFormatResp, error)
	grpc.ClientStream
}

type mgmtCtlStorageFormatClient struct {
	grpc.ClientStream
}

func (x *mgmtCtlStorageFormatClient) Recv() (*StorageFormatResp, error) {
	m := new(StorageFormatResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mgmtCtlClient) StorageUpdate(ctx context.Context, in *StorageUpdateReq, opts ...grpc.CallOption) (MgmtCtl_StorageUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtCtl_serviceDesc.Streams[1], "/mgmt.MgmtCtl/StorageUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtCtlStorageUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MgmtCtl_StorageUpdateClient interface {
	Recv() (*StorageUpdateResp, error)
	grpc.ClientStream
}

type mgmtCtlStorageUpdateClient struct {
	grpc.ClientStream
}

func (x *mgmtCtlStorageUpdateClient) Recv() (*StorageUpdateResp, error) {
	m := new(StorageUpdateResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mgmtCtlClient) StorageBurnIn(ctx context.Context, in *StorageBurnInReq, opts ...grpc.CallOption) (MgmtCtl_StorageBurnInClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtCtl_serviceDesc.Streams[2], "/mgmt.MgmtCtl/StorageBurnIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtCtlStorageBurnInClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MgmtCtl_StorageBurnInClient interface {
	Recv() (*StorageBurnInResp, error)
	grpc.ClientStream
}

type mgmtCtlStorageBurnInClient struct {
	grpc.ClientStream
}

func (x *mgmtCtlStorageBurnInClient) Recv() (*StorageBurnInResp, error) {
	m := new(StorageBurnInResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mgmtCtlClient) FetchFioConfigPaths(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (MgmtCtl_FetchFioConfigPathsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtCtl_serviceDesc.Streams[3], "/mgmt.MgmtCtl/FetchFioConfigPaths", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtCtlFetchFioConfigPathsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MgmtCtl_FetchFioConfigPathsClient interface {
	Recv() (*FilePath, error)
	grpc.ClientStream
}

type mgmtCtlFetchFioConfigPathsClient struct {
	grpc.ClientStream
}

func (x *mgmtCtlFetchFioConfigPathsClient) Recv() (*FilePath, error) {
	m := new(FilePath)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mgmtCtlClient) KillRank(ctx context.Context, in *DaosRank, opts ...grpc.CallOption) (*DaosResp, error) {
	out := new(DaosResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtCtl/KillRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtCtlClient) ListFeatures(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (MgmtCtl_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtCtl_serviceDesc.Streams[4], "/mgmt.MgmtCtl/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtCtlListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MgmtCtl_ListFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type mgmtCtlListFeaturesClient struct {
	grpc.ClientStream
}

func (x *mgmtCtlListFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MgmtCtlServer is the server API for MgmtCtl service.
type MgmtCtlServer interface {
	// Retrieve details of nonvolatile storage on server
	StorageScan(context.Context, *StorageScanReq) (*StorageScanResp, error)
	// Format nonvolatile storage devices for use with DAOS
	StorageFormat(*StorageFormatReq, MgmtCtl_StorageFormatServer) error
	// Update nonvolatile storage device firmware
	StorageUpdate(*StorageUpdateReq, MgmtCtl_StorageUpdateServer) error
	// Perform burn-in testing to verify nonvolatile storage devices
	StorageBurnIn(*StorageBurnInReq, MgmtCtl_StorageBurnInServer) error
	// Fetch FIO configuration file specifying burn-in jobs/workloads
	FetchFioConfigPaths(*EmptyReq, MgmtCtl_FetchFioConfigPathsServer) error
	// Kill a given rank associated with a given pool
	KillRank(context.Context, *DaosRank) (*DaosResp, error)
	// List features supported on remote storage server/DAOS system
	ListFeatures(*EmptyReq, MgmtCtl_ListFeaturesServer) error
}

func RegisterMgmtCtlServer(s *grpc.Server, srv MgmtCtlServer) {
	s.RegisterService(&_MgmtCtl_serviceDesc, srv)
}

func _MgmtCtl_StorageScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageScanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtCtlServer).StorageScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtCtl/StorageScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtCtlServer).StorageScan(ctx, req.(*StorageScanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtCtl_StorageFormat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorageFormatReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MgmtCtlServer).StorageFormat(m, &mgmtCtlStorageFormatServer{stream})
}

type MgmtCtl_StorageFormatServer interface {
	Send(*StorageFormatResp) error
	grpc.ServerStream
}

type mgmtCtlStorageFormatServer struct {
	grpc.ServerStream
}

func (x *mgmtCtlStorageFormatServer) Send(m *StorageFormatResp) error {
	return x.ServerStream.SendMsg(m)
}

func _MgmtCtl_StorageUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorageUpdateReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MgmtCtlServer).StorageUpdate(m, &mgmtCtlStorageUpdateServer{stream})
}

type MgmtCtl_StorageUpdateServer interface {
	Send(*StorageUpdateResp) error
	grpc.ServerStream
}

type mgmtCtlStorageUpdateServer struct {
	grpc.ServerStream
}

func (x *mgmtCtlStorageUpdateServer) Send(m *StorageUpdateResp) error {
	return x.ServerStream.SendMsg(m)
}

func _MgmtCtl_StorageBurnIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorageBurnInReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MgmtCtlServer).StorageBurnIn(m, &mgmtCtlStorageBurnInServer{stream})
}

type MgmtCtl_StorageBurnInServer interface {
	Send(*StorageBurnInResp) error
	grpc.ServerStream
}

type mgmtCtlStorageBurnInServer struct {
	grpc.ServerStream
}

func (x *mgmtCtlStorageBurnInServer) Send(m *StorageBurnInResp) error {
	return x.ServerStream.SendMsg(m)
}

func _MgmtCtl_FetchFioConfigPaths_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MgmtCtlServer).FetchFioConfigPaths(m, &mgmtCtlFetchFioConfigPathsServer{stream})
}

type MgmtCtl_FetchFioConfigPathsServer interface {
	Send(*FilePath) error
	grpc.ServerStream
}

type mgmtCtlFetchFioConfigPathsServer struct {
	grpc.ServerStream
}

func (x *mgmtCtlFetchFioConfigPathsServer) Send(m *FilePath) error {
	return x.ServerStream.SendMsg(m)
}

func _MgmtCtl_KillRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaosRank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtCtlServer).KillRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtCtl/KillRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtCtlServer).KillRank(ctx, req.(*DaosRank))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtCtl_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MgmtCtlServer).ListFeatures(m, &mgmtCtlListFeaturesServer{stream})
}

type MgmtCtl_ListFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type mgmtCtlListFeaturesServer struct {
	grpc.ServerStream
}

func (x *mgmtCtlListFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

var _MgmtCtl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mgmt.MgmtCtl",
	HandlerType: (*MgmtCtlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StorageScan",
			Handler:    _MgmtCtl_StorageScan_Handler,
		},
		{
			MethodName: "KillRank",
			Handler:    _MgmtCtl_KillRank_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StorageFormat",
			Handler:       _MgmtCtl_StorageFormat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StorageUpdate",
			Handler:       _MgmtCtl_StorageUpdate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StorageBurnIn",
			Handler:       _MgmtCtl_StorageBurnIn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchFioConfigPaths",
			Handler:       _MgmtCtl_FetchFioConfigPaths_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListFeatures",
			Handler:       _MgmtCtl_ListFeatures_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "control.proto",
}

func init() { proto.RegisterFile("control.proto", fileDescriptor_control_bb1d988ebc7a91b0) }

var fileDescriptor_control_bb1d988ebc7a91b0 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4d, 0x4b, 0x03, 0x31,
	0x10, 0x86, 0x15, 0xc5, 0x8f, 0xd8, 0xed, 0x21, 0x7e, 0xc1, 0x1e, 0x3d, 0xcb, 0xe2, 0xc7, 0x49,
	0xf0, 0x64, 0x6b, 0x40, 0x54, 0x90, 0x16, 0x7f, 0x40, 0x5c, 0xd3, 0x6d, 0x30, 0xc9, 0xac, 0xc9,
	0x54, 0xf0, 0x87, 0xf9, 0xff, 0x24, 0x9d, 0x2c, 0x6c, 0x9b, 0xde, 0xf6, 0x7d, 0x76, 0xe6, 0x79,
	0x21, 0xc3, 0x8a, 0x1a, 0x1c, 0x7a, 0x30, 0x55, 0xeb, 0x01, 0x81, 0xef, 0xda, 0xc6, 0x62, 0x39,
	0xa8, 0xc1, 0x5a, 0x70, 0xc4, 0xca, 0x22, 0x20, 0x78, 0xd9, 0xa8, 0x14, 0x87, 0x33, 0x25, 0x71,
	0xe1, 0x55, 0x48, 0xf9, 0x30, 0xf8, 0x1f, 0xfa, 0xbc, 0xf9, 0xdb, 0x61, 0xfb, 0xaf, 0x8d, 0xc5,
	0x11, 0x1a, 0x7e, 0xcf, 0x8e, 0xa6, 0xb4, 0x37, 0xad, 0xa5, 0xe3, 0x27, 0x55, 0x34, 0x57, 0x3d,
	0x34, 0x51, 0xdf, 0xe5, 0xe9, 0x06, 0x1a, 0xda, 0x8b, 0x2d, 0x3e, 0x66, 0x45, 0x82, 0x02, 0xbc,
	0x95, 0xc8, 0xcf, 0x56, 0x26, 0x09, 0x46, 0xc3, 0xf9, 0x46, 0x1e, 0x1d, 0x57, 0xdb, 0x3d, 0xcb,
	0x7b, 0xfb, 0x29, 0x51, 0xad, 0x59, 0x08, 0xe6, 0x96, 0x8e, 0x67, 0x96, 0x87, 0x85, 0x77, 0x4f,
	0x6e, 0xcd, 0x42, 0x30, 0xb7, 0x74, 0x3c, 0x59, 0xee, 0xd8, 0xb1, 0x50, 0x58, 0xcf, 0x85, 0x86,
	0x11, 0xb8, 0x99, 0x6e, 0xde, 0x24, 0xce, 0x03, 0x1f, 0xd2, 0xce, 0xa3, 0x6d, 0xf1, 0x37, 0x3a,
	0x52, 0x16, 0xda, 0xa8, 0x38, 0xb0, 0x5c, 0xbd, 0x64, 0x07, 0xcf, 0xda, 0x98, 0x89, 0x74, 0x5f,
	0xdd, 0xfc, 0x58, 0x42, 0x88, 0xb9, 0xec, 0x67, 0x7a, 0xba, 0x6b, 0x36, 0x78, 0xd1, 0x01, 0x45,
	0xba, 0x52, 0xd6, 0x50, 0xa4, 0x06, 0xfa, 0x1f, 0x0b, 0x3e, 0xf6, 0x96, 0xe7, 0xbb, 0xfd, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0x35, 0x21, 0xab, 0xf5, 0x0d, 0x02, 0x00, 0x00,
}
