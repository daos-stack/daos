// Code generated by protoc-gen-go. DO NOT EDIT.
// source: control.proto

package mgmt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MgmtCtlClient is the client API for MgmtCtl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MgmtCtlClient interface {
	// Retrieve details of nonvolatile storage devices on server
	ScanStorage(ctx context.Context, in *ScanStorageReq, opts ...grpc.CallOption) (*ScanStorageResp, error)
	// Format nonvolatile storage devices for use with DAOS
	FormatStorage(ctx context.Context, in *FormatStorageReq, opts ...grpc.CallOption) (MgmtCtl_FormatStorageClient, error)
	// Update nonvolatile storage device firmware
	UpdateStorage(ctx context.Context, in *UpdateStorageReq, opts ...grpc.CallOption) (MgmtCtl_UpdateStorageClient, error)
	// Perform burn-in testing to verify nonvolatile storage devices
	BurninStorage(ctx context.Context, in *BurninStorageReq, opts ...grpc.CallOption) (MgmtCtl_BurninStorageClient, error)
	// Fetch FIO configuration file specifying burn-in jobs/workloads
	FetchFioConfigPaths(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (MgmtCtl_FetchFioConfigPathsClient, error)
	// Kill a given rank associated with a given pool
	KillRank(ctx context.Context, in *DaosRank, opts ...grpc.CallOption) (*DaosResponse, error)
	// List features supported on remote storage server/DAOS system
	ListFeatures(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (MgmtCtl_ListFeaturesClient, error)
}

type mgmtCtlClient struct {
	cc *grpc.ClientConn
}

func NewMgmtCtlClient(cc *grpc.ClientConn) MgmtCtlClient {
	return &mgmtCtlClient{cc}
}

func (c *mgmtCtlClient) ScanStorage(ctx context.Context, in *ScanStorageReq, opts ...grpc.CallOption) (*ScanStorageResp, error) {
	out := new(ScanStorageResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtCtl/ScanStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtCtlClient) FormatStorage(ctx context.Context, in *FormatStorageReq, opts ...grpc.CallOption) (MgmtCtl_FormatStorageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtCtl_serviceDesc.Streams[0], "/mgmt.MgmtCtl/FormatStorage", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtCtlFormatStorageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MgmtCtl_FormatStorageClient interface {
	Recv() (*FormatStorageResp, error)
	grpc.ClientStream
}

type mgmtCtlFormatStorageClient struct {
	grpc.ClientStream
}

func (x *mgmtCtlFormatStorageClient) Recv() (*FormatStorageResp, error) {
	m := new(FormatStorageResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mgmtCtlClient) UpdateStorage(ctx context.Context, in *UpdateStorageReq, opts ...grpc.CallOption) (MgmtCtl_UpdateStorageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtCtl_serviceDesc.Streams[1], "/mgmt.MgmtCtl/UpdateStorage", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtCtlUpdateStorageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MgmtCtl_UpdateStorageClient interface {
	Recv() (*UpdateStorageResp, error)
	grpc.ClientStream
}

type mgmtCtlUpdateStorageClient struct {
	grpc.ClientStream
}

func (x *mgmtCtlUpdateStorageClient) Recv() (*UpdateStorageResp, error) {
	m := new(UpdateStorageResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mgmtCtlClient) BurninStorage(ctx context.Context, in *BurninStorageReq, opts ...grpc.CallOption) (MgmtCtl_BurninStorageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtCtl_serviceDesc.Streams[2], "/mgmt.MgmtCtl/BurninStorage", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtCtlBurninStorageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MgmtCtl_BurninStorageClient interface {
	Recv() (*BurninStorageResp, error)
	grpc.ClientStream
}

type mgmtCtlBurninStorageClient struct {
	grpc.ClientStream
}

func (x *mgmtCtlBurninStorageClient) Recv() (*BurninStorageResp, error) {
	m := new(BurninStorageResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mgmtCtlClient) FetchFioConfigPaths(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (MgmtCtl_FetchFioConfigPathsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtCtl_serviceDesc.Streams[3], "/mgmt.MgmtCtl/FetchFioConfigPaths", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtCtlFetchFioConfigPathsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MgmtCtl_FetchFioConfigPathsClient interface {
	Recv() (*FilePath, error)
	grpc.ClientStream
}

type mgmtCtlFetchFioConfigPathsClient struct {
	grpc.ClientStream
}

func (x *mgmtCtlFetchFioConfigPathsClient) Recv() (*FilePath, error) {
	m := new(FilePath)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mgmtCtlClient) KillRank(ctx context.Context, in *DaosRank, opts ...grpc.CallOption) (*DaosResponse, error) {
	out := new(DaosResponse)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtCtl/KillRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtCtlClient) ListFeatures(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (MgmtCtl_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtCtl_serviceDesc.Streams[4], "/mgmt.MgmtCtl/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtCtlListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MgmtCtl_ListFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type mgmtCtlListFeaturesClient struct {
	grpc.ClientStream
}

func (x *mgmtCtlListFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MgmtCtlServer is the server API for MgmtCtl service.
type MgmtCtlServer interface {
	// Retrieve details of nonvolatile storage devices on server
	ScanStorage(context.Context, *ScanStorageReq) (*ScanStorageResp, error)
	// Format nonvolatile storage devices for use with DAOS
	FormatStorage(*FormatStorageReq, MgmtCtl_FormatStorageServer) error
	// Update nonvolatile storage device firmware
	UpdateStorage(*UpdateStorageReq, MgmtCtl_UpdateStorageServer) error
	// Perform burn-in testing to verify nonvolatile storage devices
	BurninStorage(*BurninStorageReq, MgmtCtl_BurninStorageServer) error
	// Fetch FIO configuration file specifying burn-in jobs/workloads
	FetchFioConfigPaths(*EmptyReq, MgmtCtl_FetchFioConfigPathsServer) error
	// Kill a given rank associated with a given pool
	KillRank(context.Context, *DaosRank) (*DaosResponse, error)
	// List features supported on remote storage server/DAOS system
	ListFeatures(*EmptyReq, MgmtCtl_ListFeaturesServer) error
}

func RegisterMgmtCtlServer(s *grpc.Server, srv MgmtCtlServer) {
	s.RegisterService(&_MgmtCtl_serviceDesc, srv)
}

func _MgmtCtl_ScanStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanStorageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtCtlServer).ScanStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtCtl/ScanStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtCtlServer).ScanStorage(ctx, req.(*ScanStorageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtCtl_FormatStorage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FormatStorageReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MgmtCtlServer).FormatStorage(m, &mgmtCtlFormatStorageServer{stream})
}

type MgmtCtl_FormatStorageServer interface {
	Send(*FormatStorageResp) error
	grpc.ServerStream
}

type mgmtCtlFormatStorageServer struct {
	grpc.ServerStream
}

func (x *mgmtCtlFormatStorageServer) Send(m *FormatStorageResp) error {
	return x.ServerStream.SendMsg(m)
}

func _MgmtCtl_UpdateStorage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateStorageReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MgmtCtlServer).UpdateStorage(m, &mgmtCtlUpdateStorageServer{stream})
}

type MgmtCtl_UpdateStorageServer interface {
	Send(*UpdateStorageResp) error
	grpc.ServerStream
}

type mgmtCtlUpdateStorageServer struct {
	grpc.ServerStream
}

func (x *mgmtCtlUpdateStorageServer) Send(m *UpdateStorageResp) error {
	return x.ServerStream.SendMsg(m)
}

func _MgmtCtl_BurninStorage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BurninStorageReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MgmtCtlServer).BurninStorage(m, &mgmtCtlBurninStorageServer{stream})
}

type MgmtCtl_BurninStorageServer interface {
	Send(*BurninStorageResp) error
	grpc.ServerStream
}

type mgmtCtlBurninStorageServer struct {
	grpc.ServerStream
}

func (x *mgmtCtlBurninStorageServer) Send(m *BurninStorageResp) error {
	return x.ServerStream.SendMsg(m)
}

func _MgmtCtl_FetchFioConfigPaths_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MgmtCtlServer).FetchFioConfigPaths(m, &mgmtCtlFetchFioConfigPathsServer{stream})
}

type MgmtCtl_FetchFioConfigPathsServer interface {
	Send(*FilePath) error
	grpc.ServerStream
}

type mgmtCtlFetchFioConfigPathsServer struct {
	grpc.ServerStream
}

func (x *mgmtCtlFetchFioConfigPathsServer) Send(m *FilePath) error {
	return x.ServerStream.SendMsg(m)
}

func _MgmtCtl_KillRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaosRank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtCtlServer).KillRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtCtl/KillRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtCtlServer).KillRank(ctx, req.(*DaosRank))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtCtl_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MgmtCtlServer).ListFeatures(m, &mgmtCtlListFeaturesServer{stream})
}

type MgmtCtl_ListFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type mgmtCtlListFeaturesServer struct {
	grpc.ServerStream
}

func (x *mgmtCtlListFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

var _MgmtCtl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mgmt.MgmtCtl",
	HandlerType: (*MgmtCtlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanStorage",
			Handler:    _MgmtCtl_ScanStorage_Handler,
		},
		{
			MethodName: "KillRank",
			Handler:    _MgmtCtl_KillRank_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FormatStorage",
			Handler:       _MgmtCtl_FormatStorage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateStorage",
			Handler:       _MgmtCtl_UpdateStorage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BurninStorage",
			Handler:       _MgmtCtl_BurninStorage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchFioConfigPaths",
			Handler:       _MgmtCtl_FetchFioConfigPaths_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListFeatures",
			Handler:       _MgmtCtl_ListFeatures_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "control.proto",
}

func init() { proto.RegisterFile("control.proto", fileDescriptor_control_6b7cd3e4a6c5f74c) }

var fileDescriptor_control_6b7cd3e4a6c5f74c = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4d, 0x4e, 0xf3, 0x30,
	0x10, 0x86, 0xfb, 0xe9, 0x43, 0xfc, 0x98, 0xa6, 0x0b, 0xf3, 0x27, 0x65, 0xd9, 0x03, 0x44, 0x05,
	0x56, 0x48, 0xac, 0x68, 0xf1, 0x06, 0x90, 0x50, 0x2b, 0x0e, 0x60, 0x82, 0x9b, 0x5a, 0xd8, 0x1e,
	0xe3, 0x99, 0x22, 0x71, 0x34, 0x6e, 0x87, 0x5c, 0xbb, 0x22, 0x09, 0xdd, 0xf9, 0x7d, 0x3c, 0xef,
	0x33, 0x8b, 0x61, 0x45, 0x0d, 0x8e, 0x02, 0x98, 0xca, 0x07, 0x20, 0xe0, 0x7b, 0xb6, 0xb1, 0x54,
	0x0e, 0x6b, 0xb0, 0x16, 0x5c, 0x62, 0x65, 0x81, 0x04, 0x41, 0x36, 0x2a, 0xc7, 0xd1, 0x52, 0x49,
	0x5a, 0x07, 0x85, 0x39, 0x1f, 0x61, 0xf8, 0x4c, 0xcf, 0xab, 0xef, 0xff, 0xec, 0xe0, 0xa9, 0xb1,
	0x34, 0x25, 0xc3, 0x6f, 0xd9, 0xf1, 0xa2, 0x96, 0x6e, 0x91, 0xba, 0xfc, 0xb4, 0x8a, 0xe6, 0xaa,
	0x85, 0xe6, 0xea, 0xa3, 0x3c, 0xdb, 0x41, 0xd1, 0x8f, 0x07, 0x7c, 0xc6, 0x0a, 0x01, 0xc1, 0x4a,
	0xda, 0xf6, 0xcf, 0xd3, 0x64, 0x07, 0x46, 0xc3, 0xc5, 0x4e, 0x1e, 0x1d, 0x93, 0x7f, 0xd1, 0xf2,
	0xe2, 0xdf, 0x24, 0xa9, 0x9e, 0xa5, 0x03, 0x5b, 0x96, 0x1e, 0xff, 0xb5, 0xdc, 0xad, 0x83, 0xd3,
	0xae, 0x67, 0xe9, 0xc0, 0x96, 0xa5, 0xc7, 0xb3, 0xe5, 0x86, 0x9d, 0x08, 0x45, 0xf5, 0x4a, 0x68,
	0x98, 0x82, 0x5b, 0xea, 0xe6, 0x59, 0xd2, 0x0a, 0xf9, 0x28, 0x75, 0xee, 0xad, 0xa7, 0xaf, 0xe8,
	0xc8, 0x59, 0x68, 0xa3, 0xe2, 0xc0, 0xa6, 0x3a, 0x61, 0x87, 0x0f, 0xda, 0x98, 0xb9, 0x74, 0xef,
	0xdb, 0xf9, 0x99, 0x04, 0x8c, 0xb9, 0xe4, 0xad, 0xac, 0xd0, 0x83, 0x43, 0x35, 0x1e, 0xf0, 0x4b,
	0x36, 0x7c, 0xd4, 0x48, 0x22, 0x5f, 0xea, 0xcf, 0x96, 0x22, 0x6f, 0x49, 0xff, 0x71, 0xc9, 0xeb,
	0xfe, 0xe6, 0x84, 0xd7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x7a, 0x48, 0x78, 0x11, 0x02,
	0x00, 0x00,
}
