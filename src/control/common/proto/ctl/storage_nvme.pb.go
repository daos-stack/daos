//
// (C) Copyright 2019-2022 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.5.0
// source: ctl/storage_nvme.proto

package ctl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NvmeController represents an NVMe Controller (SSD).
type NvmeController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model       string                      `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`                                // model name
	Serial      string                      `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`                              // serial number
	PciAddr     string                      `protobuf:"bytes,3,opt,name=pci_addr,json=pciAddr,proto3" json:"pci_addr,omitempty"`             // pci address
	FwRev       string                      `protobuf:"bytes,4,opt,name=fw_rev,json=fwRev,proto3" json:"fw_rev,omitempty"`                   // firmware revision
	SocketId    int32                       `protobuf:"varint,5,opt,name=socket_id,json=socketId,proto3" json:"socket_id,omitempty"`         // NUMA socket ID
	HealthStats *NvmeController_Health      `protobuf:"bytes,6,opt,name=health_stats,json=healthStats,proto3" json:"health_stats,omitempty"` // controller's health stats
	Namespaces  []*NvmeController_Namespace `protobuf:"bytes,7,rep,name=namespaces,proto3" json:"namespaces,omitempty"`                      // controller's namespaces
	SmdDevices  []*NvmeController_SmdDevice `protobuf:"bytes,8,rep,name=smd_devices,json=smdDevices,proto3" json:"smd_devices,omitempty"`    // controller's blobstores
}

func (x *NvmeController) Reset() {
	*x = NvmeController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_storage_nvme_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeController) ProtoMessage() {}

func (x *NvmeController) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_storage_nvme_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeController.ProtoReflect.Descriptor instead.
func (*NvmeController) Descriptor() ([]byte, []int) {
	return file_ctl_storage_nvme_proto_rawDescGZIP(), []int{0}
}

func (x *NvmeController) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *NvmeController) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *NvmeController) GetPciAddr() string {
	if x != nil {
		return x.PciAddr
	}
	return ""
}

func (x *NvmeController) GetFwRev() string {
	if x != nil {
		return x.FwRev
	}
	return ""
}

func (x *NvmeController) GetSocketId() int32 {
	if x != nil {
		return x.SocketId
	}
	return 0
}

func (x *NvmeController) GetHealthStats() *NvmeController_Health {
	if x != nil {
		return x.HealthStats
	}
	return nil
}

func (x *NvmeController) GetNamespaces() []*NvmeController_Namespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *NvmeController) GetSmdDevices() []*NvmeController_SmdDevice {
	if x != nil {
		return x.SmdDevices
	}
	return nil
}

// NvmeControllerResult represents state of operation performed on controller.
type NvmeControllerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PciAddr string         `protobuf:"bytes,1,opt,name=pci_addr,json=pciAddr,proto3" json:"pci_addr,omitempty"` // PCI address of NVMe controller
	State   *ResponseState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`                    // state of current operation
}

func (x *NvmeControllerResult) Reset() {
	*x = NvmeControllerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_storage_nvme_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeControllerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeControllerResult) ProtoMessage() {}

func (x *NvmeControllerResult) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_storage_nvme_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeControllerResult.ProtoReflect.Descriptor instead.
func (*NvmeControllerResult) Descriptor() ([]byte, []int) {
	return file_ctl_storage_nvme_proto_rawDescGZIP(), []int{1}
}

func (x *NvmeControllerResult) GetPciAddr() string {
	if x != nil {
		return x.PciAddr
	}
	return ""
}

func (x *NvmeControllerResult) GetState() *ResponseState {
	if x != nil {
		return x.State
	}
	return nil
}

type ScanNvmeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Health bool `protobuf:"varint,1,opt,name=Health,proto3" json:"Health,omitempty"` // Retrieve NVMe device health statistics
	Meta   bool `protobuf:"varint,2,opt,name=Meta,proto3" json:"Meta,omitempty"`     // Retrieve metadata relating to NVMe device
	Basic  bool `protobuf:"varint,3,opt,name=Basic,proto3" json:"Basic,omitempty"`   // Strip NVMe device details to only basic
}

func (x *ScanNvmeReq) Reset() {
	*x = ScanNvmeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_storage_nvme_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanNvmeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanNvmeReq) ProtoMessage() {}

func (x *ScanNvmeReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_storage_nvme_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanNvmeReq.ProtoReflect.Descriptor instead.
func (*ScanNvmeReq) Descriptor() ([]byte, []int) {
	return file_ctl_storage_nvme_proto_rawDescGZIP(), []int{2}
}

func (x *ScanNvmeReq) GetHealth() bool {
	if x != nil {
		return x.Health
	}
	return false
}

func (x *ScanNvmeReq) GetMeta() bool {
	if x != nil {
		return x.Meta
	}
	return false
}

func (x *ScanNvmeReq) GetBasic() bool {
	if x != nil {
		return x.Basic
	}
	return false
}

type ScanNvmeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctrlrs []*NvmeController `protobuf:"bytes,1,rep,name=ctrlrs,proto3" json:"ctrlrs,omitempty"`
	State  *ResponseState    `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ScanNvmeResp) Reset() {
	*x = ScanNvmeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_storage_nvme_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanNvmeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanNvmeResp) ProtoMessage() {}

func (x *ScanNvmeResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_storage_nvme_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanNvmeResp.ProtoReflect.Descriptor instead.
func (*ScanNvmeResp) Descriptor() ([]byte, []int) {
	return file_ctl_storage_nvme_proto_rawDescGZIP(), []int{3}
}

func (x *ScanNvmeResp) GetCtrlrs() []*NvmeController {
	if x != nil {
		return x.Ctrlrs
	}
	return nil
}

func (x *ScanNvmeResp) GetState() *ResponseState {
	if x != nil {
		return x.State
	}
	return nil
}

type FormatNvmeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FormatNvmeReq) Reset() {
	*x = FormatNvmeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_storage_nvme_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatNvmeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatNvmeReq) ProtoMessage() {}

func (x *FormatNvmeReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_storage_nvme_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatNvmeReq.ProtoReflect.Descriptor instead.
func (*FormatNvmeReq) Descriptor() ([]byte, []int) {
	return file_ctl_storage_nvme_proto_rawDescGZIP(), []int{4}
}

// Health mirrors bio_dev_state structure.
type NvmeController_Health struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Device health details
	WarnTempTime    uint32 `protobuf:"varint,3,opt,name=warn_temp_time,json=warnTempTime,proto3" json:"warn_temp_time,omitempty"`
	CritTempTime    uint32 `protobuf:"varint,4,opt,name=crit_temp_time,json=critTempTime,proto3" json:"crit_temp_time,omitempty"`
	CtrlBusyTime    uint64 `protobuf:"varint,5,opt,name=ctrl_busy_time,json=ctrlBusyTime,proto3" json:"ctrl_busy_time,omitempty"`
	PowerCycles     uint64 `protobuf:"varint,6,opt,name=power_cycles,json=powerCycles,proto3" json:"power_cycles,omitempty"`
	PowerOnHours    uint64 `protobuf:"varint,7,opt,name=power_on_hours,json=powerOnHours,proto3" json:"power_on_hours,omitempty"`
	UnsafeShutdowns uint64 `protobuf:"varint,8,opt,name=unsafe_shutdowns,json=unsafeShutdowns,proto3" json:"unsafe_shutdowns,omitempty"`
	MediaErrs       uint64 `protobuf:"varint,9,opt,name=media_errs,json=mediaErrs,proto3" json:"media_errs,omitempty"`
	ErrLogEntries   uint64 `protobuf:"varint,10,opt,name=err_log_entries,json=errLogEntries,proto3" json:"err_log_entries,omitempty"`
	// I/O error counters
	BioReadErrs  uint32 `protobuf:"varint,11,opt,name=bio_read_errs,json=bioReadErrs,proto3" json:"bio_read_errs,omitempty"`
	BioWriteErrs uint32 `protobuf:"varint,12,opt,name=bio_write_errs,json=bioWriteErrs,proto3" json:"bio_write_errs,omitempty"`
	BioUnmapErrs uint32 `protobuf:"varint,13,opt,name=bio_unmap_errs,json=bioUnmapErrs,proto3" json:"bio_unmap_errs,omitempty"`
	ChecksumErrs uint32 `protobuf:"varint,14,opt,name=checksum_errs,json=checksumErrs,proto3" json:"checksum_errs,omitempty"`
	Temperature  uint32 `protobuf:"varint,15,opt,name=temperature,proto3" json:"temperature,omitempty"` // in Kelvin
	// Critical warnings
	TempWarn           bool `protobuf:"varint,16,opt,name=temp_warn,json=tempWarn,proto3" json:"temp_warn,omitempty"`
	AvailSpareWarn     bool `protobuf:"varint,17,opt,name=avail_spare_warn,json=availSpareWarn,proto3" json:"avail_spare_warn,omitempty"`
	DevReliabilityWarn bool `protobuf:"varint,18,opt,name=dev_reliability_warn,json=devReliabilityWarn,proto3" json:"dev_reliability_warn,omitempty"`
	ReadOnlyWarn       bool `protobuf:"varint,19,opt,name=read_only_warn,json=readOnlyWarn,proto3" json:"read_only_warn,omitempty"`
	VolatileMemWarn    bool `protobuf:"varint,20,opt,name=volatile_mem_warn,json=volatileMemWarn,proto3" json:"volatile_mem_warn,omitempty"` // volatile memory backup
	// Intel vendor SMART attributes
	ProgramFailCntNorm      uint32 `protobuf:"varint,21,opt,name=program_fail_cnt_norm,json=programFailCntNorm,proto3" json:"program_fail_cnt_norm,omitempty"`
	ProgramFailCntRaw       uint64 `protobuf:"varint,22,opt,name=program_fail_cnt_raw,json=programFailCntRaw,proto3" json:"program_fail_cnt_raw,omitempty"`
	EraseFailCntNorm        uint32 `protobuf:"varint,23,opt,name=erase_fail_cnt_norm,json=eraseFailCntNorm,proto3" json:"erase_fail_cnt_norm,omitempty"`
	EraseFailCntRaw         uint64 `protobuf:"varint,24,opt,name=erase_fail_cnt_raw,json=eraseFailCntRaw,proto3" json:"erase_fail_cnt_raw,omitempty"`
	WearLevelingCntNorm     uint32 `protobuf:"varint,25,opt,name=wear_leveling_cnt_norm,json=wearLevelingCntNorm,proto3" json:"wear_leveling_cnt_norm,omitempty"`
	WearLevelingCntMin      uint32 `protobuf:"varint,26,opt,name=wear_leveling_cnt_min,json=wearLevelingCntMin,proto3" json:"wear_leveling_cnt_min,omitempty"`
	WearLevelingCntMax      uint32 `protobuf:"varint,27,opt,name=wear_leveling_cnt_max,json=wearLevelingCntMax,proto3" json:"wear_leveling_cnt_max,omitempty"`
	WearLevelingCntAvg      uint32 `protobuf:"varint,28,opt,name=wear_leveling_cnt_avg,json=wearLevelingCntAvg,proto3" json:"wear_leveling_cnt_avg,omitempty"`
	EndtoendErrCntRaw       uint64 `protobuf:"varint,29,opt,name=endtoend_err_cnt_raw,json=endtoendErrCntRaw,proto3" json:"endtoend_err_cnt_raw,omitempty"`
	CrcErrCntRaw            uint64 `protobuf:"varint,30,opt,name=crc_err_cnt_raw,json=crcErrCntRaw,proto3" json:"crc_err_cnt_raw,omitempty"`
	MediaWearRaw            uint64 `protobuf:"varint,31,opt,name=media_wear_raw,json=mediaWearRaw,proto3" json:"media_wear_raw,omitempty"`
	HostReadsRaw            uint64 `protobuf:"varint,32,opt,name=host_reads_raw,json=hostReadsRaw,proto3" json:"host_reads_raw,omitempty"`
	WorkloadTimerRaw        uint64 `protobuf:"varint,33,opt,name=workload_timer_raw,json=workloadTimerRaw,proto3" json:"workload_timer_raw,omitempty"`
	ThermalThrottleStatus   uint32 `protobuf:"varint,34,opt,name=thermal_throttle_status,json=thermalThrottleStatus,proto3" json:"thermal_throttle_status,omitempty"`
	ThermalThrottleEventCnt uint64 `protobuf:"varint,35,opt,name=thermal_throttle_event_cnt,json=thermalThrottleEventCnt,proto3" json:"thermal_throttle_event_cnt,omitempty"`
	RetryBufferOverflowCnt  uint64 `protobuf:"varint,36,opt,name=retry_buffer_overflow_cnt,json=retryBufferOverflowCnt,proto3" json:"retry_buffer_overflow_cnt,omitempty"`
	PllLockLossCnt          uint64 `protobuf:"varint,37,opt,name=pll_lock_loss_cnt,json=pllLockLossCnt,proto3" json:"pll_lock_loss_cnt,omitempty"`
	NandBytesWritten        uint64 `protobuf:"varint,38,opt,name=nand_bytes_written,json=nandBytesWritten,proto3" json:"nand_bytes_written,omitempty"`
	HostBytesWritten        uint64 `protobuf:"varint,39,opt,name=host_bytes_written,json=hostBytesWritten,proto3" json:"host_bytes_written,omitempty"`
}

func (x *NvmeController_Health) Reset() {
	*x = NvmeController_Health{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_storage_nvme_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeController_Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeController_Health) ProtoMessage() {}

func (x *NvmeController_Health) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_storage_nvme_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeController_Health.ProtoReflect.Descriptor instead.
func (*NvmeController_Health) Descriptor() ([]byte, []int) {
	return file_ctl_storage_nvme_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NvmeController_Health) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NvmeController_Health) GetWarnTempTime() uint32 {
	if x != nil {
		return x.WarnTempTime
	}
	return 0
}

func (x *NvmeController_Health) GetCritTempTime() uint32 {
	if x != nil {
		return x.CritTempTime
	}
	return 0
}

func (x *NvmeController_Health) GetCtrlBusyTime() uint64 {
	if x != nil {
		return x.CtrlBusyTime
	}
	return 0
}

func (x *NvmeController_Health) GetPowerCycles() uint64 {
	if x != nil {
		return x.PowerCycles
	}
	return 0
}

func (x *NvmeController_Health) GetPowerOnHours() uint64 {
	if x != nil {
		return x.PowerOnHours
	}
	return 0
}

func (x *NvmeController_Health) GetUnsafeShutdowns() uint64 {
	if x != nil {
		return x.UnsafeShutdowns
	}
	return 0
}

func (x *NvmeController_Health) GetMediaErrs() uint64 {
	if x != nil {
		return x.MediaErrs
	}
	return 0
}

func (x *NvmeController_Health) GetErrLogEntries() uint64 {
	if x != nil {
		return x.ErrLogEntries
	}
	return 0
}

func (x *NvmeController_Health) GetBioReadErrs() uint32 {
	if x != nil {
		return x.BioReadErrs
	}
	return 0
}

func (x *NvmeController_Health) GetBioWriteErrs() uint32 {
	if x != nil {
		return x.BioWriteErrs
	}
	return 0
}

func (x *NvmeController_Health) GetBioUnmapErrs() uint32 {
	if x != nil {
		return x.BioUnmapErrs
	}
	return 0
}

func (x *NvmeController_Health) GetChecksumErrs() uint32 {
	if x != nil {
		return x.ChecksumErrs
	}
	return 0
}

func (x *NvmeController_Health) GetTemperature() uint32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *NvmeController_Health) GetTempWarn() bool {
	if x != nil {
		return x.TempWarn
	}
	return false
}

func (x *NvmeController_Health) GetAvailSpareWarn() bool {
	if x != nil {
		return x.AvailSpareWarn
	}
	return false
}

func (x *NvmeController_Health) GetDevReliabilityWarn() bool {
	if x != nil {
		return x.DevReliabilityWarn
	}
	return false
}

func (x *NvmeController_Health) GetReadOnlyWarn() bool {
	if x != nil {
		return x.ReadOnlyWarn
	}
	return false
}

func (x *NvmeController_Health) GetVolatileMemWarn() bool {
	if x != nil {
		return x.VolatileMemWarn
	}
	return false
}

func (x *NvmeController_Health) GetProgramFailCntNorm() uint32 {
	if x != nil {
		return x.ProgramFailCntNorm
	}
	return 0
}

func (x *NvmeController_Health) GetProgramFailCntRaw() uint64 {
	if x != nil {
		return x.ProgramFailCntRaw
	}
	return 0
}

func (x *NvmeController_Health) GetEraseFailCntNorm() uint32 {
	if x != nil {
		return x.EraseFailCntNorm
	}
	return 0
}

func (x *NvmeController_Health) GetEraseFailCntRaw() uint64 {
	if x != nil {
		return x.EraseFailCntRaw
	}
	return 0
}

func (x *NvmeController_Health) GetWearLevelingCntNorm() uint32 {
	if x != nil {
		return x.WearLevelingCntNorm
	}
	return 0
}

func (x *NvmeController_Health) GetWearLevelingCntMin() uint32 {
	if x != nil {
		return x.WearLevelingCntMin
	}
	return 0
}

func (x *NvmeController_Health) GetWearLevelingCntMax() uint32 {
	if x != nil {
		return x.WearLevelingCntMax
	}
	return 0
}

func (x *NvmeController_Health) GetWearLevelingCntAvg() uint32 {
	if x != nil {
		return x.WearLevelingCntAvg
	}
	return 0
}

func (x *NvmeController_Health) GetEndtoendErrCntRaw() uint64 {
	if x != nil {
		return x.EndtoendErrCntRaw
	}
	return 0
}

func (x *NvmeController_Health) GetCrcErrCntRaw() uint64 {
	if x != nil {
		return x.CrcErrCntRaw
	}
	return 0
}

func (x *NvmeController_Health) GetMediaWearRaw() uint64 {
	if x != nil {
		return x.MediaWearRaw
	}
	return 0
}

func (x *NvmeController_Health) GetHostReadsRaw() uint64 {
	if x != nil {
		return x.HostReadsRaw
	}
	return 0
}

func (x *NvmeController_Health) GetWorkloadTimerRaw() uint64 {
	if x != nil {
		return x.WorkloadTimerRaw
	}
	return 0
}

func (x *NvmeController_Health) GetThermalThrottleStatus() uint32 {
	if x != nil {
		return x.ThermalThrottleStatus
	}
	return 0
}

func (x *NvmeController_Health) GetThermalThrottleEventCnt() uint64 {
	if x != nil {
		return x.ThermalThrottleEventCnt
	}
	return 0
}

func (x *NvmeController_Health) GetRetryBufferOverflowCnt() uint64 {
	if x != nil {
		return x.RetryBufferOverflowCnt
	}
	return 0
}

func (x *NvmeController_Health) GetPllLockLossCnt() uint64 {
	if x != nil {
		return x.PllLockLossCnt
	}
	return 0
}

func (x *NvmeController_Health) GetNandBytesWritten() uint64 {
	if x != nil {
		return x.NandBytesWritten
	}
	return 0
}

func (x *NvmeController_Health) GetHostBytesWritten() uint64 {
	if x != nil {
		return x.HostBytesWritten
	}
	return 0
}

// Namespace represents a namespace created on an NvmeController.
type NvmeController_Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          // namespace id
	Size         uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`                                      // device capacity in bytes
	CtrlrPciAddr string `protobuf:"bytes,3,opt,name=ctrlr_pci_addr,json=ctrlrPciAddr,proto3" json:"ctrlr_pci_addr,omitempty"` // parent controller PCI address
}

func (x *NvmeController_Namespace) Reset() {
	*x = NvmeController_Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_storage_nvme_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeController_Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeController_Namespace) ProtoMessage() {}

func (x *NvmeController_Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_storage_nvme_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeController_Namespace.ProtoReflect.Descriptor instead.
func (*NvmeController_Namespace) Descriptor() ([]byte, []int) {
	return file_ctl_storage_nvme_proto_rawDescGZIP(), []int{0, 1}
}

func (x *NvmeController_Namespace) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NvmeController_Namespace) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *NvmeController_Namespace) GetCtrlrPciAddr() string {
	if x != nil {
		return x.CtrlrPciAddr
	}
	return ""
}

// SmdDevice represents a blobstore created on a NvmeController_Namespace.
// TODO: this should be embedded in Namespace above
type NvmeController_SmdDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                   // UUID of blobstore
	TgtIds      []int32 `protobuf:"varint,2,rep,packed,name=tgt_ids,json=tgtIds,proto3" json:"tgt_ids,omitempty"`         // VOS target IDs
	Rank        uint32  `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`                                  // DAOS I/O Engine using controller
	TotalBytes  uint64  `protobuf:"varint,5,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`    // blobstore clusters total bytes
	AvailBytes  uint64  `protobuf:"varint,6,opt,name=avail_bytes,json=availBytes,proto3" json:"avail_bytes,omitempty"`    // blobstore clusters available bytes
	TrAddr      string  `protobuf:"bytes,7,opt,name=tr_addr,json=trAddr,proto3" json:"tr_addr,omitempty"`                 // transport address of the blobstore
	DevState    string  `protobuf:"bytes,8,opt,name=dev_state,json=devState,proto3" json:"dev_state,omitempty"`           // NVMe device state
	ClusterSize uint64  `protobuf:"varint,9,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"` // blobstore cluster size in bytes
}

func (x *NvmeController_SmdDevice) Reset() {
	*x = NvmeController_SmdDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_storage_nvme_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeController_SmdDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeController_SmdDevice) ProtoMessage() {}

func (x *NvmeController_SmdDevice) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_storage_nvme_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeController_SmdDevice.ProtoReflect.Descriptor instead.
func (*NvmeController_SmdDevice) Descriptor() ([]byte, []int) {
	return file_ctl_storage_nvme_proto_rawDescGZIP(), []int{0, 2}
}

func (x *NvmeController_SmdDevice) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *NvmeController_SmdDevice) GetTgtIds() []int32 {
	if x != nil {
		return x.TgtIds
	}
	return nil
}

func (x *NvmeController_SmdDevice) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *NvmeController_SmdDevice) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *NvmeController_SmdDevice) GetAvailBytes() uint64 {
	if x != nil {
		return x.AvailBytes
	}
	return 0
}

func (x *NvmeController_SmdDevice) GetTrAddr() string {
	if x != nil {
		return x.TrAddr
	}
	return ""
}

func (x *NvmeController_SmdDevice) GetDevState() string {
	if x != nil {
		return x.DevState
	}
	return ""
}

func (x *NvmeController_SmdDevice) GetClusterSize() uint64 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

var File_ctl_storage_nvme_proto protoreflect.FileDescriptor

var file_ctl_storage_nvme_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x74, 0x6c, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x76,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x74, 0x6c, 0x1a, 0x10, 0x63,
	0x74, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x88, 0x12, 0x0a, 0x0e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x63, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x63, 0x69, 0x41, 0x64, 0x64, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x66,
	0x77, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x77, 0x52,
	0x65, 0x76, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x4e, 0x76, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3d,
	0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x0b, 0x73, 0x6d, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x0a, 0x73, 0x6d, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0xec, 0x0c,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x77, 0x61, 0x72, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x72, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x74, 0x72, 0x6c,
	0x42, 0x75, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x6e, 0x73,
	0x61, 0x66, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x72, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x72, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x72, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x65, 0x72, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x69, 0x6f, 0x52,
	0x65, 0x61, 0x64, 0x45, 0x72, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x69, 0x6f, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x62, 0x69, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x72, 0x72, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x69, 0x6f, 0x5f, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x69, 0x6f, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x45,
	0x72, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f,
	0x65, 0x72, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x5f, 0x73, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x70, 0x61, 0x72, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x64, 0x65, 0x76, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x57,
	0x61, 0x72, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x61,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x4d, 0x65,
	0x6d, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x61, 0x69,
	0x6c, 0x43, 0x6e, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x46,
	0x61, 0x69, 0x6c, 0x43, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x72, 0x61,
	0x73, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x72, 0x61, 0x73, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x43, 0x6e, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x72, 0x61, 0x73,
	0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x43,
	0x6e, 0x74, 0x52, 0x61, 0x77, 0x12, 0x33, 0x0a, 0x16, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x77, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6e, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x77, 0x65,
	0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6e, 0x74, 0x5f,
	0x6d, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x77, 0x65, 0x61, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x31, 0x0a,
	0x15, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x77, 0x65,
	0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6e, 0x74, 0x4d, 0x61, 0x78,
	0x12, 0x31, 0x0a, 0x15, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x77, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6e, 0x74,
	0x41, 0x76, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x74, 0x6f, 0x65, 0x6e, 0x64, 0x5f,
	0x65, 0x72, 0x72, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x74, 0x6f, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x43, 0x6e,
	0x74, 0x52, 0x61, 0x77, 0x12, 0x25, 0x0a, 0x0f, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x5f,
	0x63, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63,
	0x72, 0x63, 0x45, 0x72, 0x72, 0x43, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x57, 0x65, 0x61, 0x72, 0x52, 0x61,
	0x77, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f,
	0x72, 0x61, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x73, 0x52, 0x61, 0x77, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x52, 0x61, 0x77, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a,
	0x1a, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x17, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x43, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x70, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x70, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x73, 0x73, 0x43, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6e, 0x61,
	0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x68, 0x6f, 0x73, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x1a, 0x55, 0x0a, 0x09,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x63, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x50, 0x63, 0x69, 0x41,
	0x64, 0x64, 0x72, 0x1a, 0xf4, 0x01, 0x0a, 0x09, 0x53, 0x6d, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x67, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x67, 0x74, 0x49, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x14, 0x4e, 0x76,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x63, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x63, 0x69, 0x41, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x74, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4f, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x4e,
	0x76, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x22, 0x65, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6e,
	0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x74, 0x72, 0x6c,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x4e,
	0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x63,
	0x74, 0x72, 0x6c, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x0f, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x61, 0x6f, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x64, 0x61, 0x6f, 0x73, 0x2f, 0x73,
	0x72, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x74, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ctl_storage_nvme_proto_rawDescOnce sync.Once
	file_ctl_storage_nvme_proto_rawDescData = file_ctl_storage_nvme_proto_rawDesc
)

func file_ctl_storage_nvme_proto_rawDescGZIP() []byte {
	file_ctl_storage_nvme_proto_rawDescOnce.Do(func() {
		file_ctl_storage_nvme_proto_rawDescData = protoimpl.X.CompressGZIP(file_ctl_storage_nvme_proto_rawDescData)
	})
	return file_ctl_storage_nvme_proto_rawDescData
}

var file_ctl_storage_nvme_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_ctl_storage_nvme_proto_goTypes = []interface{}{
	(*NvmeController)(nil),           // 0: ctl.NvmeController
	(*NvmeControllerResult)(nil),     // 1: ctl.NvmeControllerResult
	(*ScanNvmeReq)(nil),              // 2: ctl.ScanNvmeReq
	(*ScanNvmeResp)(nil),             // 3: ctl.ScanNvmeResp
	(*FormatNvmeReq)(nil),            // 4: ctl.FormatNvmeReq
	(*NvmeController_Health)(nil),    // 5: ctl.NvmeController.Health
	(*NvmeController_Namespace)(nil), // 6: ctl.NvmeController.Namespace
	(*NvmeController_SmdDevice)(nil), // 7: ctl.NvmeController.SmdDevice
	(*ResponseState)(nil),            // 8: ctl.ResponseState
}
var file_ctl_storage_nvme_proto_depIdxs = []int32{
	5, // 0: ctl.NvmeController.health_stats:type_name -> ctl.NvmeController.Health
	6, // 1: ctl.NvmeController.namespaces:type_name -> ctl.NvmeController.Namespace
	7, // 2: ctl.NvmeController.smd_devices:type_name -> ctl.NvmeController.SmdDevice
	8, // 3: ctl.NvmeControllerResult.state:type_name -> ctl.ResponseState
	0, // 4: ctl.ScanNvmeResp.ctrlrs:type_name -> ctl.NvmeController
	8, // 5: ctl.ScanNvmeResp.state:type_name -> ctl.ResponseState
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_ctl_storage_nvme_proto_init() }
func file_ctl_storage_nvme_proto_init() {
	if File_ctl_storage_nvme_proto != nil {
		return
	}
	file_ctl_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ctl_storage_nvme_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_storage_nvme_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeControllerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_storage_nvme_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanNvmeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_storage_nvme_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanNvmeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_storage_nvme_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatNvmeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_storage_nvme_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeController_Health); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_storage_nvme_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeController_Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_storage_nvme_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeController_SmdDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ctl_storage_nvme_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ctl_storage_nvme_proto_goTypes,
		DependencyIndexes: file_ctl_storage_nvme_proto_depIdxs,
		MessageInfos:      file_ctl_storage_nvme_proto_msgTypes,
	}.Build()
	File_ctl_storage_nvme_proto = out.File
	file_ctl_storage_nvme_proto_rawDesc = nil
	file_ctl_storage_nvme_proto_goTypes = nil
	file_ctl_storage_nvme_proto_depIdxs = nil
}
