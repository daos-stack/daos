//
// (C) Copyright 2019-2022 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.5.0
// source: ctl/smd.proto

package ctl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BioHealthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevUuid string `protobuf:"bytes,1,opt,name=dev_uuid,json=devUuid,proto3" json:"dev_uuid,omitempty"`
	TgtId   string `protobuf:"bytes,2,opt,name=tgt_id,json=tgtId,proto3" json:"tgt_id,omitempty"`
}

func (x *BioHealthReq) Reset() {
	*x = BioHealthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioHealthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioHealthReq) ProtoMessage() {}

func (x *BioHealthReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioHealthReq.ProtoReflect.Descriptor instead.
func (*BioHealthReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{0}
}

func (x *BioHealthReq) GetDevUuid() string {
	if x != nil {
		return x.DevUuid
	}
	return ""
}

func (x *BioHealthReq) GetTgtId() string {
	if x != nil {
		return x.TgtId
	}
	return ""
}

// BioHealthResp mirrors nvme_health_stats structure.
type BioHealthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Device health details
	WarnTempTime    uint32 `protobuf:"varint,5,opt,name=warn_temp_time,json=warnTempTime,proto3" json:"warn_temp_time,omitempty"`
	CritTempTime    uint32 `protobuf:"varint,6,opt,name=crit_temp_time,json=critTempTime,proto3" json:"crit_temp_time,omitempty"`
	CtrlBusyTime    uint64 `protobuf:"varint,7,opt,name=ctrl_busy_time,json=ctrlBusyTime,proto3" json:"ctrl_busy_time,omitempty"`
	PowerCycles     uint64 `protobuf:"varint,8,opt,name=power_cycles,json=powerCycles,proto3" json:"power_cycles,omitempty"`
	PowerOnHours    uint64 `protobuf:"varint,9,opt,name=power_on_hours,json=powerOnHours,proto3" json:"power_on_hours,omitempty"`
	UnsafeShutdowns uint64 `protobuf:"varint,10,opt,name=unsafe_shutdowns,json=unsafeShutdowns,proto3" json:"unsafe_shutdowns,omitempty"`
	MediaErrs       uint64 `protobuf:"varint,11,opt,name=media_errs,json=mediaErrs,proto3" json:"media_errs,omitempty"`
	ErrLogEntries   uint64 `protobuf:"varint,12,opt,name=err_log_entries,json=errLogEntries,proto3" json:"err_log_entries,omitempty"`
	// I/O error counters
	BioReadErrs  uint32 `protobuf:"varint,13,opt,name=bio_read_errs,json=bioReadErrs,proto3" json:"bio_read_errs,omitempty"`
	BioWriteErrs uint32 `protobuf:"varint,14,opt,name=bio_write_errs,json=bioWriteErrs,proto3" json:"bio_write_errs,omitempty"`
	BioUnmapErrs uint32 `protobuf:"varint,15,opt,name=bio_unmap_errs,json=bioUnmapErrs,proto3" json:"bio_unmap_errs,omitempty"`
	ChecksumErrs uint32 `protobuf:"varint,16,opt,name=checksum_errs,json=checksumErrs,proto3" json:"checksum_errs,omitempty"`
	Temperature  uint32 `protobuf:"varint,17,opt,name=temperature,proto3" json:"temperature,omitempty"` // in Kelvin
	// Critical warnings
	TempWarn           bool   `protobuf:"varint,18,opt,name=temp_warn,json=tempWarn,proto3" json:"temp_warn,omitempty"`
	AvailSpareWarn     bool   `protobuf:"varint,19,opt,name=avail_spare_warn,json=availSpareWarn,proto3" json:"avail_spare_warn,omitempty"`
	DevReliabilityWarn bool   `protobuf:"varint,20,opt,name=dev_reliability_warn,json=devReliabilityWarn,proto3" json:"dev_reliability_warn,omitempty"`
	ReadOnlyWarn       bool   `protobuf:"varint,21,opt,name=read_only_warn,json=readOnlyWarn,proto3" json:"read_only_warn,omitempty"`
	VolatileMemWarn    bool   `protobuf:"varint,22,opt,name=volatile_mem_warn,json=volatileMemWarn,proto3" json:"volatile_mem_warn,omitempty"` // volatile memory backup
	Status             int32  `protobuf:"varint,23,opt,name=status,proto3" json:"status,omitempty"`                                            // DAOS err code
	DevUuid            string `protobuf:"bytes,24,opt,name=dev_uuid,json=devUuid,proto3" json:"dev_uuid,omitempty"`                            // UUID of blobstore
	// Usage stats
	TotalBytes uint64 `protobuf:"varint,25,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"` // size of blobstore
	AvailBytes uint64 `protobuf:"varint,26,opt,name=avail_bytes,json=availBytes,proto3" json:"avail_bytes,omitempty"` // free space in blobstore
	// Intel vendor SMART attributes
	ProgramFailCntNorm      uint32 `protobuf:"varint,27,opt,name=program_fail_cnt_norm,json=programFailCntNorm,proto3" json:"program_fail_cnt_norm,omitempty"` // percent remaining
	ProgramFailCntRaw       uint64 `protobuf:"varint,28,opt,name=program_fail_cnt_raw,json=programFailCntRaw,proto3" json:"program_fail_cnt_raw,omitempty"`    // current value
	EraseFailCntNorm        uint32 `protobuf:"varint,29,opt,name=erase_fail_cnt_norm,json=eraseFailCntNorm,proto3" json:"erase_fail_cnt_norm,omitempty"`
	EraseFailCntRaw         uint64 `protobuf:"varint,30,opt,name=erase_fail_cnt_raw,json=eraseFailCntRaw,proto3" json:"erase_fail_cnt_raw,omitempty"`
	WearLevelingCntNorm     uint32 `protobuf:"varint,31,opt,name=wear_leveling_cnt_norm,json=wearLevelingCntNorm,proto3" json:"wear_leveling_cnt_norm,omitempty"`
	WearLevelingCntMin      uint32 `protobuf:"varint,32,opt,name=wear_leveling_cnt_min,json=wearLevelingCntMin,proto3" json:"wear_leveling_cnt_min,omitempty"`
	WearLevelingCntMax      uint32 `protobuf:"varint,33,opt,name=wear_leveling_cnt_max,json=wearLevelingCntMax,proto3" json:"wear_leveling_cnt_max,omitempty"`
	WearLevelingCntAvg      uint32 `protobuf:"varint,34,opt,name=wear_leveling_cnt_avg,json=wearLevelingCntAvg,proto3" json:"wear_leveling_cnt_avg,omitempty"`
	EndtoendErrCntRaw       uint64 `protobuf:"varint,35,opt,name=endtoend_err_cnt_raw,json=endtoendErrCntRaw,proto3" json:"endtoend_err_cnt_raw,omitempty"`
	CrcErrCntRaw            uint64 `protobuf:"varint,36,opt,name=crc_err_cnt_raw,json=crcErrCntRaw,proto3" json:"crc_err_cnt_raw,omitempty"`
	MediaWearRaw            uint64 `protobuf:"varint,37,opt,name=media_wear_raw,json=mediaWearRaw,proto3" json:"media_wear_raw,omitempty"`
	HostReadsRaw            uint64 `protobuf:"varint,38,opt,name=host_reads_raw,json=hostReadsRaw,proto3" json:"host_reads_raw,omitempty"`
	WorkloadTimerRaw        uint64 `protobuf:"varint,39,opt,name=workload_timer_raw,json=workloadTimerRaw,proto3" json:"workload_timer_raw,omitempty"`
	ThermalThrottleStatus   uint32 `protobuf:"varint,40,opt,name=thermal_throttle_status,json=thermalThrottleStatus,proto3" json:"thermal_throttle_status,omitempty"`
	ThermalThrottleEventCnt uint64 `protobuf:"varint,41,opt,name=thermal_throttle_event_cnt,json=thermalThrottleEventCnt,proto3" json:"thermal_throttle_event_cnt,omitempty"`
	RetryBufferOverflowCnt  uint64 `protobuf:"varint,42,opt,name=retry_buffer_overflow_cnt,json=retryBufferOverflowCnt,proto3" json:"retry_buffer_overflow_cnt,omitempty"`
	PllLockLossCnt          uint64 `protobuf:"varint,43,opt,name=pll_lock_loss_cnt,json=pllLockLossCnt,proto3" json:"pll_lock_loss_cnt,omitempty"`
	NandBytesWritten        uint64 `protobuf:"varint,44,opt,name=nand_bytes_written,json=nandBytesWritten,proto3" json:"nand_bytes_written,omitempty"`
	HostBytesWritten        uint64 `protobuf:"varint,45,opt,name=host_bytes_written,json=hostBytesWritten,proto3" json:"host_bytes_written,omitempty"`
	// Engine configs properties
	ClusterSize uint64 `protobuf:"varint,46,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"` // blobstore cluster size in bytes
}

func (x *BioHealthResp) Reset() {
	*x = BioHealthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioHealthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioHealthResp) ProtoMessage() {}

func (x *BioHealthResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioHealthResp.ProtoReflect.Descriptor instead.
func (*BioHealthResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{1}
}

func (x *BioHealthResp) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BioHealthResp) GetWarnTempTime() uint32 {
	if x != nil {
		return x.WarnTempTime
	}
	return 0
}

func (x *BioHealthResp) GetCritTempTime() uint32 {
	if x != nil {
		return x.CritTempTime
	}
	return 0
}

func (x *BioHealthResp) GetCtrlBusyTime() uint64 {
	if x != nil {
		return x.CtrlBusyTime
	}
	return 0
}

func (x *BioHealthResp) GetPowerCycles() uint64 {
	if x != nil {
		return x.PowerCycles
	}
	return 0
}

func (x *BioHealthResp) GetPowerOnHours() uint64 {
	if x != nil {
		return x.PowerOnHours
	}
	return 0
}

func (x *BioHealthResp) GetUnsafeShutdowns() uint64 {
	if x != nil {
		return x.UnsafeShutdowns
	}
	return 0
}

func (x *BioHealthResp) GetMediaErrs() uint64 {
	if x != nil {
		return x.MediaErrs
	}
	return 0
}

func (x *BioHealthResp) GetErrLogEntries() uint64 {
	if x != nil {
		return x.ErrLogEntries
	}
	return 0
}

func (x *BioHealthResp) GetBioReadErrs() uint32 {
	if x != nil {
		return x.BioReadErrs
	}
	return 0
}

func (x *BioHealthResp) GetBioWriteErrs() uint32 {
	if x != nil {
		return x.BioWriteErrs
	}
	return 0
}

func (x *BioHealthResp) GetBioUnmapErrs() uint32 {
	if x != nil {
		return x.BioUnmapErrs
	}
	return 0
}

func (x *BioHealthResp) GetChecksumErrs() uint32 {
	if x != nil {
		return x.ChecksumErrs
	}
	return 0
}

func (x *BioHealthResp) GetTemperature() uint32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *BioHealthResp) GetTempWarn() bool {
	if x != nil {
		return x.TempWarn
	}
	return false
}

func (x *BioHealthResp) GetAvailSpareWarn() bool {
	if x != nil {
		return x.AvailSpareWarn
	}
	return false
}

func (x *BioHealthResp) GetDevReliabilityWarn() bool {
	if x != nil {
		return x.DevReliabilityWarn
	}
	return false
}

func (x *BioHealthResp) GetReadOnlyWarn() bool {
	if x != nil {
		return x.ReadOnlyWarn
	}
	return false
}

func (x *BioHealthResp) GetVolatileMemWarn() bool {
	if x != nil {
		return x.VolatileMemWarn
	}
	return false
}

func (x *BioHealthResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BioHealthResp) GetDevUuid() string {
	if x != nil {
		return x.DevUuid
	}
	return ""
}

func (x *BioHealthResp) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *BioHealthResp) GetAvailBytes() uint64 {
	if x != nil {
		return x.AvailBytes
	}
	return 0
}

func (x *BioHealthResp) GetProgramFailCntNorm() uint32 {
	if x != nil {
		return x.ProgramFailCntNorm
	}
	return 0
}

func (x *BioHealthResp) GetProgramFailCntRaw() uint64 {
	if x != nil {
		return x.ProgramFailCntRaw
	}
	return 0
}

func (x *BioHealthResp) GetEraseFailCntNorm() uint32 {
	if x != nil {
		return x.EraseFailCntNorm
	}
	return 0
}

func (x *BioHealthResp) GetEraseFailCntRaw() uint64 {
	if x != nil {
		return x.EraseFailCntRaw
	}
	return 0
}

func (x *BioHealthResp) GetWearLevelingCntNorm() uint32 {
	if x != nil {
		return x.WearLevelingCntNorm
	}
	return 0
}

func (x *BioHealthResp) GetWearLevelingCntMin() uint32 {
	if x != nil {
		return x.WearLevelingCntMin
	}
	return 0
}

func (x *BioHealthResp) GetWearLevelingCntMax() uint32 {
	if x != nil {
		return x.WearLevelingCntMax
	}
	return 0
}

func (x *BioHealthResp) GetWearLevelingCntAvg() uint32 {
	if x != nil {
		return x.WearLevelingCntAvg
	}
	return 0
}

func (x *BioHealthResp) GetEndtoendErrCntRaw() uint64 {
	if x != nil {
		return x.EndtoendErrCntRaw
	}
	return 0
}

func (x *BioHealthResp) GetCrcErrCntRaw() uint64 {
	if x != nil {
		return x.CrcErrCntRaw
	}
	return 0
}

func (x *BioHealthResp) GetMediaWearRaw() uint64 {
	if x != nil {
		return x.MediaWearRaw
	}
	return 0
}

func (x *BioHealthResp) GetHostReadsRaw() uint64 {
	if x != nil {
		return x.HostReadsRaw
	}
	return 0
}

func (x *BioHealthResp) GetWorkloadTimerRaw() uint64 {
	if x != nil {
		return x.WorkloadTimerRaw
	}
	return 0
}

func (x *BioHealthResp) GetThermalThrottleStatus() uint32 {
	if x != nil {
		return x.ThermalThrottleStatus
	}
	return 0
}

func (x *BioHealthResp) GetThermalThrottleEventCnt() uint64 {
	if x != nil {
		return x.ThermalThrottleEventCnt
	}
	return 0
}

func (x *BioHealthResp) GetRetryBufferOverflowCnt() uint64 {
	if x != nil {
		return x.RetryBufferOverflowCnt
	}
	return 0
}

func (x *BioHealthResp) GetPllLockLossCnt() uint64 {
	if x != nil {
		return x.PllLockLossCnt
	}
	return 0
}

func (x *BioHealthResp) GetNandBytesWritten() uint64 {
	if x != nil {
		return x.NandBytesWritten
	}
	return 0
}

func (x *BioHealthResp) GetHostBytesWritten() uint64 {
	if x != nil {
		return x.HostBytesWritten
	}
	return 0
}

func (x *BioHealthResp) GetClusterSize() uint64 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

type SmdDevReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SmdDevReq) Reset() {
	*x = SmdDevReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdDevReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdDevReq) ProtoMessage() {}

func (x *SmdDevReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdDevReq.ProtoReflect.Descriptor instead.
func (*SmdDevReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{2}
}

type SmdDevResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32                `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Devices []*SmdDevResp_Device `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *SmdDevResp) Reset() {
	*x = SmdDevResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdDevResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdDevResp) ProtoMessage() {}

func (x *SmdDevResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdDevResp.ProtoReflect.Descriptor instead.
func (*SmdDevResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{3}
}

func (x *SmdDevResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SmdDevResp) GetDevices() []*SmdDevResp_Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

type SmdPoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SmdPoolReq) Reset() {
	*x = SmdPoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdPoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdPoolReq) ProtoMessage() {}

func (x *SmdPoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdPoolReq.ProtoReflect.Descriptor instead.
func (*SmdPoolReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{4}
}

type SmdPoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32               `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Pools  []*SmdPoolResp_Pool `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *SmdPoolResp) Reset() {
	*x = SmdPoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdPoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdPoolResp) ProtoMessage() {}

func (x *SmdPoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdPoolResp.ProtoReflect.Descriptor instead.
func (*SmdPoolResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{5}
}

func (x *SmdPoolResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SmdPoolResp) GetPools() []*SmdPoolResp_Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

type DevStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevUuid string `protobuf:"bytes,1,opt,name=dev_uuid,json=devUuid,proto3" json:"dev_uuid,omitempty"` // UUID of blobstore
}

func (x *DevStateReq) Reset() {
	*x = DevStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevStateReq) ProtoMessage() {}

func (x *DevStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevStateReq.ProtoReflect.Descriptor instead.
func (*DevStateReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{6}
}

func (x *DevStateReq) GetDevUuid() string {
	if x != nil {
		return x.DevUuid
	}
	return ""
}

type DevStateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                    // DAOS error code
	DevUuid  string `protobuf:"bytes,2,opt,name=dev_uuid,json=devUuid,proto3" json:"dev_uuid,omitempty"`    // UUID of blobstore
	DevState string `protobuf:"bytes,4,opt,name=dev_state,json=devState,proto3" json:"dev_state,omitempty"` // NVMe device state
}

func (x *DevStateResp) Reset() {
	*x = DevStateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevStateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevStateResp) ProtoMessage() {}

func (x *DevStateResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevStateResp.ProtoReflect.Descriptor instead.
func (*DevStateResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{7}
}

func (x *DevStateResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DevStateResp) GetDevUuid() string {
	if x != nil {
		return x.DevUuid
	}
	return ""
}

func (x *DevStateResp) GetDevState() string {
	if x != nil {
		return x.DevState
	}
	return ""
}

type DevReplaceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldDevUuid string `protobuf:"bytes,1,opt,name=old_dev_uuid,json=oldDevUuid,proto3" json:"old_dev_uuid,omitempty"` // UUID of old (hot-removed) blobstore/device
	NewDevUuid string `protobuf:"bytes,2,opt,name=new_dev_uuid,json=newDevUuid,proto3" json:"new_dev_uuid,omitempty"` // UUID of new (hot-plugged) blobstore/device
	NoReint    bool   `protobuf:"varint,3,opt,name=noReint,proto3" json:"noReint,omitempty"`                          // Skip device reintegration if set
}

func (x *DevReplaceReq) Reset() {
	*x = DevReplaceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevReplaceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevReplaceReq) ProtoMessage() {}

func (x *DevReplaceReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevReplaceReq.ProtoReflect.Descriptor instead.
func (*DevReplaceReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{8}
}

func (x *DevReplaceReq) GetOldDevUuid() string {
	if x != nil {
		return x.OldDevUuid
	}
	return ""
}

func (x *DevReplaceReq) GetNewDevUuid() string {
	if x != nil {
		return x.NewDevUuid
	}
	return ""
}

func (x *DevReplaceReq) GetNoReint() bool {
	if x != nil {
		return x.NoReint
	}
	return false
}

type DevReplaceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                            // DAOS error code
	NewDevUuid string `protobuf:"bytes,2,opt,name=new_dev_uuid,json=newDevUuid,proto3" json:"new_dev_uuid,omitempty"` // UUID of new (hot-plugged) blobstore/device
	DevState   string `protobuf:"bytes,4,opt,name=dev_state,json=devState,proto3" json:"dev_state,omitempty"`         // NVMe device state
}

func (x *DevReplaceResp) Reset() {
	*x = DevReplaceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevReplaceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevReplaceResp) ProtoMessage() {}

func (x *DevReplaceResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevReplaceResp.ProtoReflect.Descriptor instead.
func (*DevReplaceResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{9}
}

func (x *DevReplaceResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DevReplaceResp) GetNewDevUuid() string {
	if x != nil {
		return x.NewDevUuid
	}
	return ""
}

func (x *DevReplaceResp) GetDevState() string {
	if x != nil {
		return x.DevState
	}
	return ""
}

type DevIdentifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevUuid string `protobuf:"bytes,1,opt,name=dev_uuid,json=devUuid,proto3" json:"dev_uuid,omitempty"` // UUID of VMD uuid
}

func (x *DevIdentifyReq) Reset() {
	*x = DevIdentifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevIdentifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevIdentifyReq) ProtoMessage() {}

func (x *DevIdentifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevIdentifyReq.ProtoReflect.Descriptor instead.
func (*DevIdentifyReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{10}
}

func (x *DevIdentifyReq) GetDevUuid() string {
	if x != nil {
		return x.DevUuid
	}
	return ""
}

type DevIdentifyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                    // DAOS error code
	DevUuid  string `protobuf:"bytes,2,opt,name=dev_uuid,json=devUuid,proto3" json:"dev_uuid,omitempty"`    // UUID of VMD uuid
	DevState string `protobuf:"bytes,4,opt,name=dev_state,json=devState,proto3" json:"dev_state,omitempty"` // NVMe device state
}

func (x *DevIdentifyResp) Reset() {
	*x = DevIdentifyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevIdentifyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevIdentifyResp) ProtoMessage() {}

func (x *DevIdentifyResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevIdentifyResp.ProtoReflect.Descriptor instead.
func (*DevIdentifyResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{11}
}

func (x *DevIdentifyResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DevIdentifyResp) GetDevUuid() string {
	if x != nil {
		return x.DevUuid
	}
	return ""
}

func (x *DevIdentifyResp) GetDevState() string {
	if x != nil {
		return x.DevState
	}
	return ""
}

type SmdQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OmitDevices      bool   `protobuf:"varint,1,opt,name=omit_devices,json=omitDevices,proto3" json:"omit_devices,omitempty"`                  // query should omit devices
	OmitPools        bool   `protobuf:"varint,2,opt,name=omit_pools,json=omitPools,proto3" json:"omit_pools,omitempty"`                        // query should omit pools
	IncludeBioHealth bool   `protobuf:"varint,3,opt,name=include_bio_health,json=includeBioHealth,proto3" json:"include_bio_health,omitempty"` // query should include BIO health for devices
	SetFaulty        bool   `protobuf:"varint,4,opt,name=set_faulty,json=setFaulty,proto3" json:"set_faulty,omitempty"`                        // set the specified device to FAULTY
	Uuid             string `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                    // constrain query to this UUID (pool or device)
	Rank             uint32 `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`                                                   // response should only include information about this rank
	Target           string `protobuf:"bytes,7,opt,name=target,proto3" json:"target,omitempty"`                                                // response should only include information about this VOS target
	NoReint          bool   `protobuf:"varint,9,opt,name=no_reint,json=noReint,proto3" json:"no_reint,omitempty"`                              // specify if device reint is needed (used for replace cmd)
	Identify         bool   `protobuf:"varint,10,opt,name=identify,proto3" json:"identify,omitempty"`                                          // set the VMD LED state to quickly blink
	StateMask        uint32 `protobuf:"varint,11,opt,name=state_mask,json=stateMask,proto3" json:"state_mask,omitempty"`                       // show only devices with state matching bit-mask
	ReplaceUuid      string `protobuf:"bytes,12,opt,name=replace_uuid,json=replaceUuid,proto3" json:"replace_uuid,omitempty"`                  // UUID of new device to replace storage with
}

func (x *SmdQueryReq) Reset() {
	*x = SmdQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdQueryReq) ProtoMessage() {}

func (x *SmdQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdQueryReq.ProtoReflect.Descriptor instead.
func (*SmdQueryReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{12}
}

func (x *SmdQueryReq) GetOmitDevices() bool {
	if x != nil {
		return x.OmitDevices
	}
	return false
}

func (x *SmdQueryReq) GetOmitPools() bool {
	if x != nil {
		return x.OmitPools
	}
	return false
}

func (x *SmdQueryReq) GetIncludeBioHealth() bool {
	if x != nil {
		return x.IncludeBioHealth
	}
	return false
}

func (x *SmdQueryReq) GetSetFaulty() bool {
	if x != nil {
		return x.SetFaulty
	}
	return false
}

func (x *SmdQueryReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SmdQueryReq) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SmdQueryReq) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *SmdQueryReq) GetNoReint() bool {
	if x != nil {
		return x.NoReint
	}
	return false
}

func (x *SmdQueryReq) GetIdentify() bool {
	if x != nil {
		return x.Identify
	}
	return false
}

func (x *SmdQueryReq) GetStateMask() uint32 {
	if x != nil {
		return x.StateMask
	}
	return 0
}

func (x *SmdQueryReq) GetReplaceUuid() string {
	if x != nil {
		return x.ReplaceUuid
	}
	return ""
}

type SmdQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32                    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // DAOS error code
	Ranks  []*SmdQueryResp_RankResp `protobuf:"bytes,2,rep,name=ranks,proto3" json:"ranks,omitempty"`    // List of per-rank responses
}

func (x *SmdQueryResp) Reset() {
	*x = SmdQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdQueryResp) ProtoMessage() {}

func (x *SmdQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdQueryResp.ProtoReflect.Descriptor instead.
func (*SmdQueryResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{13}
}

func (x *SmdQueryResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SmdQueryResp) GetRanks() []*SmdQueryResp_RankResp {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type SmdDevResp_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                           // UUID of blobstore
	TgtIds   []int32 `protobuf:"varint,2,rep,packed,name=tgt_ids,json=tgtIds,proto3" json:"tgt_ids,omitempty"` // VOS target IDs
	TrAddr   string  `protobuf:"bytes,4,opt,name=tr_addr,json=trAddr,proto3" json:"tr_addr,omitempty"`         // Transport address of blobstore
	DevState string  `protobuf:"bytes,5,opt,name=dev_state,json=devState,proto3" json:"dev_state,omitempty"`   // NVMe device state
}

func (x *SmdDevResp_Device) Reset() {
	*x = SmdDevResp_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdDevResp_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdDevResp_Device) ProtoMessage() {}

func (x *SmdDevResp_Device) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdDevResp_Device.ProtoReflect.Descriptor instead.
func (*SmdDevResp_Device) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SmdDevResp_Device) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SmdDevResp_Device) GetTgtIds() []int32 {
	if x != nil {
		return x.TgtIds
	}
	return nil
}

func (x *SmdDevResp_Device) GetTrAddr() string {
	if x != nil {
		return x.TrAddr
	}
	return ""
}

func (x *SmdDevResp_Device) GetDevState() string {
	if x != nil {
		return x.DevState
	}
	return ""
}

type SmdPoolResp_Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                           // UUID of VOS pool
	TgtIds []int32  `protobuf:"varint,2,rep,packed,name=tgt_ids,json=tgtIds,proto3" json:"tgt_ids,omitempty"` // VOS target IDs
	Blobs  []uint64 `protobuf:"varint,3,rep,packed,name=blobs,proto3" json:"blobs,omitempty"`                 // SPDK blobs
}

func (x *SmdPoolResp_Pool) Reset() {
	*x = SmdPoolResp_Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdPoolResp_Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdPoolResp_Pool) ProtoMessage() {}

func (x *SmdPoolResp_Pool) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdPoolResp_Pool.ProtoReflect.Descriptor instead.
func (*SmdPoolResp_Pool) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SmdPoolResp_Pool) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SmdPoolResp_Pool) GetTgtIds() []int32 {
	if x != nil {
		return x.TgtIds
	}
	return nil
}

func (x *SmdPoolResp_Pool) GetBlobs() []uint64 {
	if x != nil {
		return x.Blobs
	}
	return nil
}

type SmdQueryResp_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string         `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                           // UUID of blobstore
	TgtIds   []int32        `protobuf:"varint,2,rep,packed,name=tgt_ids,json=tgtIds,proto3" json:"tgt_ids,omitempty"` // VOS target IDs
	TrAddr   string         `protobuf:"bytes,4,opt,name=tr_addr,json=trAddr,proto3" json:"tr_addr,omitempty"`         // Transport address of blobstore
	Health   *BioHealthResp `protobuf:"bytes,5,opt,name=health,proto3" json:"health,omitempty"`                       // optional BIO health
	DevState string         `protobuf:"bytes,6,opt,name=dev_state,json=devState,proto3" json:"dev_state,omitempty"`   // NVMe device state
}

func (x *SmdQueryResp_Device) Reset() {
	*x = SmdQueryResp_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdQueryResp_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdQueryResp_Device) ProtoMessage() {}

func (x *SmdQueryResp_Device) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdQueryResp_Device.ProtoReflect.Descriptor instead.
func (*SmdQueryResp_Device) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{13, 0}
}

func (x *SmdQueryResp_Device) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SmdQueryResp_Device) GetTgtIds() []int32 {
	if x != nil {
		return x.TgtIds
	}
	return nil
}

func (x *SmdQueryResp_Device) GetTrAddr() string {
	if x != nil {
		return x.TrAddr
	}
	return ""
}

func (x *SmdQueryResp_Device) GetHealth() *BioHealthResp {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *SmdQueryResp_Device) GetDevState() string {
	if x != nil {
		return x.DevState
	}
	return ""
}

type SmdQueryResp_Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                           // UUID of VOS pool
	TgtIds []int32  `protobuf:"varint,2,rep,packed,name=tgt_ids,json=tgtIds,proto3" json:"tgt_ids,omitempty"` // VOS target IDs
	Blobs  []uint64 `protobuf:"varint,3,rep,packed,name=blobs,proto3" json:"blobs,omitempty"`                 // SPDK blobs
}

func (x *SmdQueryResp_Pool) Reset() {
	*x = SmdQueryResp_Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdQueryResp_Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdQueryResp_Pool) ProtoMessage() {}

func (x *SmdQueryResp_Pool) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdQueryResp_Pool.ProtoReflect.Descriptor instead.
func (*SmdQueryResp_Pool) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{13, 1}
}

func (x *SmdQueryResp_Pool) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SmdQueryResp_Pool) GetTgtIds() []int32 {
	if x != nil {
		return x.TgtIds
	}
	return nil
}

func (x *SmdQueryResp_Pool) GetBlobs() []uint64 {
	if x != nil {
		return x.Blobs
	}
	return nil
}

type SmdQueryResp_RankResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank    uint32                 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`      // rank to which this response corresponds
	Devices []*SmdQueryResp_Device `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"` // List of devices on the rank
	Pools   []*SmdQueryResp_Pool   `protobuf:"bytes,3,rep,name=pools,proto3" json:"pools,omitempty"`     // List of pools on the rank
}

func (x *SmdQueryResp_RankResp) Reset() {
	*x = SmdQueryResp_RankResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdQueryResp_RankResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdQueryResp_RankResp) ProtoMessage() {}

func (x *SmdQueryResp_RankResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdQueryResp_RankResp.ProtoReflect.Descriptor instead.
func (*SmdQueryResp_RankResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{13, 2}
}

func (x *SmdQueryResp_RankResp) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SmdQueryResp_RankResp) GetDevices() []*SmdQueryResp_Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *SmdQueryResp_RankResp) GetPools() []*SmdQueryResp_Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

var File_ctl_smd_proto protoreflect.FileDescriptor

var file_ctl_smd_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x74, 0x6c, 0x2f, 0x73, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x63, 0x74, 0x6c, 0x22, 0x40, 0x0a, 0x0c, 0x42, 0x69, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x67, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x67, 0x74, 0x49, 0x64, 0x22, 0x97, 0x0e, 0x0a, 0x0d, 0x42, 0x69, 0x6f, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x77, 0x61, 0x72, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x72, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x74, 0x72, 0x6c,
	0x42, 0x75, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x6e, 0x73,
	0x61, 0x66, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x72, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x72, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x72, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x65, 0x72, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x69, 0x6f, 0x52,
	0x65, 0x61, 0x64, 0x45, 0x72, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x69, 0x6f, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x62, 0x69, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x72, 0x72, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x69, 0x6f, 0x5f, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x69, 0x6f, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x45,
	0x72, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f,
	0x65, 0x72, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x5f, 0x73, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x70, 0x61, 0x72, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x64, 0x65, 0x76, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x57,
	0x61, 0x72, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x61,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x4d, 0x65,
	0x6d, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x65, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x72, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6e, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x12, 0x2f, 0x0a,
	0x14, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6e,
	0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x12, 0x2d,
	0x0a, 0x13, 0x65, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x72, 0x61,
	0x73, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6e, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x12, 0x2b, 0x0a,
	0x12, 0x65, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x5f,
	0x72, 0x61, 0x77, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x72, 0x61, 0x73, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x43, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x12, 0x33, 0x0a, 0x16, 0x77, 0x65,
	0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x72, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x77, 0x65, 0x61, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6e, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x12,
	0x31, 0x0a, 0x15, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x77, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6e, 0x74, 0x4d,
	0x69, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x77, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x77, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x74,
	0x6f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x74, 0x6f, 0x65, 0x6e, 0x64,
	0x45, 0x72, 0x72, 0x43, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x12, 0x25, 0x0a, 0x0f, 0x63, 0x72, 0x63,
	0x5f, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x63, 0x45, 0x72, 0x72, 0x43, 0x6e, 0x74, 0x52, 0x61, 0x77,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x72,
	0x61, 0x77, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x57,
	0x65, 0x61, 0x72, 0x52, 0x61, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x68, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x61, 0x77, 0x12, 0x2c, 0x0a, 0x12,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x72,
	0x61, 0x77, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x61, 0x77, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x19, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x72, 0x65, 0x74, 0x72, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x70, 0x6c,
	0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f,
	0x73, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x6e, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x22, 0x0b, 0x0a, 0x09, 0x53, 0x6d, 0x64, 0x44, 0x65, 0x76, 0x52, 0x65, 0x71, 0x22, 0xd0, 0x01,
	0x0a, 0x0a, 0x53, 0x6d, 0x64, 0x44, 0x65, 0x76, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x6d, 0x64, 0x44,
	0x65, 0x76, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x78, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x67, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x67, 0x74, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x0c, 0x0a, 0x0a, 0x53, 0x6d, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x22, 0x9d,
	0x01, 0x0a, 0x0b, 0x53, 0x6d, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x6d, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x1a, 0x49, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x67, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x67, 0x74, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x22, 0x28,
	0x0a, 0x0b, 0x44, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x65, 0x76, 0x55, 0x75, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x6d,
	0x0a, 0x0d, 0x44, 0x65, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x76, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x52, 0x65, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x52, 0x65, 0x69, 0x6e, 0x74, 0x22, 0x6d, 0x0a,
	0x0e, 0x44, 0x65, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x64,
	0x65, 0x76, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x65, 0x77, 0x44, 0x65, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x2b, 0x0a, 0x0e,
	0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x65, 0x76, 0x55, 0x75, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x0f, 0x44, 0x65, 0x76,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x52, 0x09, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe8, 0x02,
	0x0a, 0x0b, 0x53, 0x6d, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x69, 0x6f, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x42, 0x69, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x65, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6e, 0x6f, 0x52, 0x65, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0xcd, 0x03, 0x0a, 0x0c, 0x53, 0x6d, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x6d, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x6b, 0x73, 0x1a, 0xa4, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x67, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x67, 0x74, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x42, 0x69, 0x6f, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x49, 0x0a, 0x04, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x67, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x67, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x62, 0x73, 0x1a, 0x80, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x6d,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x74, 0x6c, 0x2e,
	0x53, 0x6d, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6f, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2f, 0x64, 0x61, 0x6f, 0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x74, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ctl_smd_proto_rawDescOnce sync.Once
	file_ctl_smd_proto_rawDescData = file_ctl_smd_proto_rawDesc
)

func file_ctl_smd_proto_rawDescGZIP() []byte {
	file_ctl_smd_proto_rawDescOnce.Do(func() {
		file_ctl_smd_proto_rawDescData = protoimpl.X.CompressGZIP(file_ctl_smd_proto_rawDescData)
	})
	return file_ctl_smd_proto_rawDescData
}

var file_ctl_smd_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_ctl_smd_proto_goTypes = []interface{}{
	(*BioHealthReq)(nil),          // 0: ctl.BioHealthReq
	(*BioHealthResp)(nil),         // 1: ctl.BioHealthResp
	(*SmdDevReq)(nil),             // 2: ctl.SmdDevReq
	(*SmdDevResp)(nil),            // 3: ctl.SmdDevResp
	(*SmdPoolReq)(nil),            // 4: ctl.SmdPoolReq
	(*SmdPoolResp)(nil),           // 5: ctl.SmdPoolResp
	(*DevStateReq)(nil),           // 6: ctl.DevStateReq
	(*DevStateResp)(nil),          // 7: ctl.DevStateResp
	(*DevReplaceReq)(nil),         // 8: ctl.DevReplaceReq
	(*DevReplaceResp)(nil),        // 9: ctl.DevReplaceResp
	(*DevIdentifyReq)(nil),        // 10: ctl.DevIdentifyReq
	(*DevIdentifyResp)(nil),       // 11: ctl.DevIdentifyResp
	(*SmdQueryReq)(nil),           // 12: ctl.SmdQueryReq
	(*SmdQueryResp)(nil),          // 13: ctl.SmdQueryResp
	(*SmdDevResp_Device)(nil),     // 14: ctl.SmdDevResp.Device
	(*SmdPoolResp_Pool)(nil),      // 15: ctl.SmdPoolResp.Pool
	(*SmdQueryResp_Device)(nil),   // 16: ctl.SmdQueryResp.Device
	(*SmdQueryResp_Pool)(nil),     // 17: ctl.SmdQueryResp.Pool
	(*SmdQueryResp_RankResp)(nil), // 18: ctl.SmdQueryResp.RankResp
}
var file_ctl_smd_proto_depIdxs = []int32{
	14, // 0: ctl.SmdDevResp.devices:type_name -> ctl.SmdDevResp.Device
	15, // 1: ctl.SmdPoolResp.pools:type_name -> ctl.SmdPoolResp.Pool
	18, // 2: ctl.SmdQueryResp.ranks:type_name -> ctl.SmdQueryResp.RankResp
	1,  // 3: ctl.SmdQueryResp.Device.health:type_name -> ctl.BioHealthResp
	16, // 4: ctl.SmdQueryResp.RankResp.devices:type_name -> ctl.SmdQueryResp.Device
	17, // 5: ctl.SmdQueryResp.RankResp.pools:type_name -> ctl.SmdQueryResp.Pool
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_ctl_smd_proto_init() }
func file_ctl_smd_proto_init() {
	if File_ctl_smd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ctl_smd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioHealthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioHealthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdDevReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdDevResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdPoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdPoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevStateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevReplaceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevReplaceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevIdentifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevIdentifyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdDevResp_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdPoolResp_Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdQueryResp_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdQueryResp_Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdQueryResp_RankResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ctl_smd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ctl_smd_proto_goTypes,
		DependencyIndexes: file_ctl_smd_proto_depIdxs,
		MessageInfos:      file_ctl_smd_proto_msgTypes,
	}.Build()
	File_ctl_smd_proto = out.File
	file_ctl_smd_proto_rawDesc = nil
	file_ctl_smd_proto_goTypes = nil
	file_ctl_smd_proto_depIdxs = nil
}
