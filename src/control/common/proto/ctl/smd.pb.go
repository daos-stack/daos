//
// (C) Copyright 2019-2023 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.5.0
// source: ctl/smd.proto

package ctl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NvmeDevState int32

const (
	NvmeDevState_NORMAL    NvmeDevState = 0 // Device is in a normal operational state
	NvmeDevState_NEW       NvmeDevState = 1 // Device is new and is not yet in-use
	NvmeDevState_EVICTED   NvmeDevState = 2 // Device is faulty and has been evicted
	NvmeDevState_UNPLUGGED NvmeDevState = 3 // Device has been physically removed
)

// Enum value maps for NvmeDevState.
var (
	NvmeDevState_name = map[int32]string{
		0: "NORMAL",
		1: "NEW",
		2: "EVICTED",
		3: "UNPLUGGED",
	}
	NvmeDevState_value = map[string]int32{
		"NORMAL":    0,
		"NEW":       1,
		"EVICTED":   2,
		"UNPLUGGED": 3,
	}
)

func (x NvmeDevState) Enum() *NvmeDevState {
	p := new(NvmeDevState)
	*p = x
	return p
}

func (x NvmeDevState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeDevState) Descriptor() protoreflect.EnumDescriptor {
	return file_ctl_smd_proto_enumTypes[0].Descriptor()
}

func (NvmeDevState) Type() protoreflect.EnumType {
	return &file_ctl_smd_proto_enumTypes[0]
}

func (x NvmeDevState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeDevState.Descriptor instead.
func (NvmeDevState) EnumDescriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{0}
}

type LedState int32

const (
	LedState_OFF         LedState = 0 // Equivalent to SPDK_VMD_LED_STATE_OFF
	LedState_QUICK_BLINK LedState = 1 // Equivalent to SPDK_VMD_LED_STATE_IDENTIFY	(4Hz blink)
	LedState_ON          LedState = 2 // Equivalent to SPDK_VMD_LED_STATE_FAULT	(solid on)
	LedState_SLOW_BLINK  LedState = 3 // Equivalent to SPDK_VMD_LED_STATE_REBUILD	(1Hz blink)
	LedState_NA          LedState = 4 // Equivalent to SPDK_VMD_LED_STATE_UNKNOWN	(VMD not enabled)
)

// Enum value maps for LedState.
var (
	LedState_name = map[int32]string{
		0: "OFF",
		1: "QUICK_BLINK",
		2: "ON",
		3: "SLOW_BLINK",
		4: "NA",
	}
	LedState_value = map[string]int32{
		"OFF":         0,
		"QUICK_BLINK": 1,
		"ON":          2,
		"SLOW_BLINK":  3,
		"NA":          4,
	}
)

func (x LedState) Enum() *LedState {
	p := new(LedState)
	*p = x
	return p
}

func (x LedState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LedState) Descriptor() protoreflect.EnumDescriptor {
	return file_ctl_smd_proto_enumTypes[1].Descriptor()
}

func (LedState) Type() protoreflect.EnumType {
	return &file_ctl_smd_proto_enumTypes[1]
}

func (x LedState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LedState.Descriptor instead.
func (LedState) EnumDescriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{1}
}

type LedAction int32

const (
	LedAction_GET   LedAction = 0
	LedAction_SET   LedAction = 1
	LedAction_RESET LedAction = 2
)

// Enum value maps for LedAction.
var (
	LedAction_name = map[int32]string{
		0: "GET",
		1: "SET",
		2: "RESET",
	}
	LedAction_value = map[string]int32{
		"GET":   0,
		"SET":   1,
		"RESET": 2,
	}
)

func (x LedAction) Enum() *LedAction {
	p := new(LedAction)
	*p = x
	return p
}

func (x LedAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LedAction) Descriptor() protoreflect.EnumDescriptor {
	return file_ctl_smd_proto_enumTypes[2].Descriptor()
}

func (LedAction) Type() protoreflect.EnumType {
	return &file_ctl_smd_proto_enumTypes[2]
}

func (x LedAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LedAction.Descriptor instead.
func (LedAction) EnumDescriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{2}
}

type BioHealthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevUuid  string `protobuf:"bytes,1,opt,name=dev_uuid,json=devUuid,proto3" json:"dev_uuid,omitempty"`
	MetaSize uint64 `protobuf:"varint,2,opt,name=meta_size,json=metaSize,proto3" json:"meta_size,omitempty"` // Size of the metadata (i.e. vos file index) blob
	RdbSize  uint64 `protobuf:"varint,3,opt,name=rdb_size,json=rdbSize,proto3" json:"rdb_size,omitempty"`    // Size of the RDB blob
}

func (x *BioHealthReq) Reset() {
	*x = BioHealthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioHealthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioHealthReq) ProtoMessage() {}

func (x *BioHealthReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioHealthReq.ProtoReflect.Descriptor instead.
func (*BioHealthReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{0}
}

func (x *BioHealthReq) GetDevUuid() string {
	if x != nil {
		return x.DevUuid
	}
	return ""
}

func (x *BioHealthReq) GetMetaSize() uint64 {
	if x != nil {
		return x.MetaSize
	}
	return 0
}

func (x *BioHealthReq) GetRdbSize() uint64 {
	if x != nil {
		return x.RdbSize
	}
	return 0
}

// BioHealthResp mirrors nvme_health_stats structure.
type BioHealthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Device health details
	WarnTempTime    uint32 `protobuf:"varint,5,opt,name=warn_temp_time,json=warnTempTime,proto3" json:"warn_temp_time,omitempty"`
	CritTempTime    uint32 `protobuf:"varint,6,opt,name=crit_temp_time,json=critTempTime,proto3" json:"crit_temp_time,omitempty"`
	CtrlBusyTime    uint64 `protobuf:"varint,7,opt,name=ctrl_busy_time,json=ctrlBusyTime,proto3" json:"ctrl_busy_time,omitempty"`
	PowerCycles     uint64 `protobuf:"varint,8,opt,name=power_cycles,json=powerCycles,proto3" json:"power_cycles,omitempty"`
	PowerOnHours    uint64 `protobuf:"varint,9,opt,name=power_on_hours,json=powerOnHours,proto3" json:"power_on_hours,omitempty"`
	UnsafeShutdowns uint64 `protobuf:"varint,10,opt,name=unsafe_shutdowns,json=unsafeShutdowns,proto3" json:"unsafe_shutdowns,omitempty"`
	MediaErrs       uint64 `protobuf:"varint,11,opt,name=media_errs,json=mediaErrs,proto3" json:"media_errs,omitempty"`
	ErrLogEntries   uint64 `protobuf:"varint,12,opt,name=err_log_entries,json=errLogEntries,proto3" json:"err_log_entries,omitempty"`
	// I/O error counters
	BioReadErrs  uint32 `protobuf:"varint,13,opt,name=bio_read_errs,json=bioReadErrs,proto3" json:"bio_read_errs,omitempty"`
	BioWriteErrs uint32 `protobuf:"varint,14,opt,name=bio_write_errs,json=bioWriteErrs,proto3" json:"bio_write_errs,omitempty"`
	BioUnmapErrs uint32 `protobuf:"varint,15,opt,name=bio_unmap_errs,json=bioUnmapErrs,proto3" json:"bio_unmap_errs,omitempty"`
	ChecksumErrs uint32 `protobuf:"varint,16,opt,name=checksum_errs,json=checksumErrs,proto3" json:"checksum_errs,omitempty"`
	Temperature  uint32 `protobuf:"varint,17,opt,name=temperature,proto3" json:"temperature,omitempty"` // in Kelvin
	// Critical warnings
	TempWarn           bool   `protobuf:"varint,18,opt,name=temp_warn,json=tempWarn,proto3" json:"temp_warn,omitempty"`
	AvailSpareWarn     bool   `protobuf:"varint,19,opt,name=avail_spare_warn,json=availSpareWarn,proto3" json:"avail_spare_warn,omitempty"`
	DevReliabilityWarn bool   `protobuf:"varint,20,opt,name=dev_reliability_warn,json=devReliabilityWarn,proto3" json:"dev_reliability_warn,omitempty"`
	ReadOnlyWarn       bool   `protobuf:"varint,21,opt,name=read_only_warn,json=readOnlyWarn,proto3" json:"read_only_warn,omitempty"`
	VolatileMemWarn    bool   `protobuf:"varint,22,opt,name=volatile_mem_warn,json=volatileMemWarn,proto3" json:"volatile_mem_warn,omitempty"` // volatile memory backup
	Status             int32  `protobuf:"varint,23,opt,name=status,proto3" json:"status,omitempty"`                                            // DAOS err code
	DevUuid            string `protobuf:"bytes,24,opt,name=dev_uuid,json=devUuid,proto3" json:"dev_uuid,omitempty"`                            // UUID of blobstore
	// Usage stats
	TotalBytes uint64 `protobuf:"varint,25,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"` // size of blobstore
	AvailBytes uint64 `protobuf:"varint,26,opt,name=avail_bytes,json=availBytes,proto3" json:"avail_bytes,omitempty"` // free space in blobstore
	// Intel vendor SMART attributes
	ProgramFailCntNorm      uint32 `protobuf:"varint,27,opt,name=program_fail_cnt_norm,json=programFailCntNorm,proto3" json:"program_fail_cnt_norm,omitempty"` // percent remaining
	ProgramFailCntRaw       uint64 `protobuf:"varint,28,opt,name=program_fail_cnt_raw,json=programFailCntRaw,proto3" json:"program_fail_cnt_raw,omitempty"`    // current value
	EraseFailCntNorm        uint32 `protobuf:"varint,29,opt,name=erase_fail_cnt_norm,json=eraseFailCntNorm,proto3" json:"erase_fail_cnt_norm,omitempty"`
	EraseFailCntRaw         uint64 `protobuf:"varint,30,opt,name=erase_fail_cnt_raw,json=eraseFailCntRaw,proto3" json:"erase_fail_cnt_raw,omitempty"`
	WearLevelingCntNorm     uint32 `protobuf:"varint,31,opt,name=wear_leveling_cnt_norm,json=wearLevelingCntNorm,proto3" json:"wear_leveling_cnt_norm,omitempty"`
	WearLevelingCntMin      uint32 `protobuf:"varint,32,opt,name=wear_leveling_cnt_min,json=wearLevelingCntMin,proto3" json:"wear_leveling_cnt_min,omitempty"`
	WearLevelingCntMax      uint32 `protobuf:"varint,33,opt,name=wear_leveling_cnt_max,json=wearLevelingCntMax,proto3" json:"wear_leveling_cnt_max,omitempty"`
	WearLevelingCntAvg      uint32 `protobuf:"varint,34,opt,name=wear_leveling_cnt_avg,json=wearLevelingCntAvg,proto3" json:"wear_leveling_cnt_avg,omitempty"`
	EndtoendErrCntRaw       uint64 `protobuf:"varint,35,opt,name=endtoend_err_cnt_raw,json=endtoendErrCntRaw,proto3" json:"endtoend_err_cnt_raw,omitempty"`
	CrcErrCntRaw            uint64 `protobuf:"varint,36,opt,name=crc_err_cnt_raw,json=crcErrCntRaw,proto3" json:"crc_err_cnt_raw,omitempty"`
	MediaWearRaw            uint64 `protobuf:"varint,37,opt,name=media_wear_raw,json=mediaWearRaw,proto3" json:"media_wear_raw,omitempty"`
	HostReadsRaw            uint64 `protobuf:"varint,38,opt,name=host_reads_raw,json=hostReadsRaw,proto3" json:"host_reads_raw,omitempty"`
	WorkloadTimerRaw        uint64 `protobuf:"varint,39,opt,name=workload_timer_raw,json=workloadTimerRaw,proto3" json:"workload_timer_raw,omitempty"`
	ThermalThrottleStatus   uint32 `protobuf:"varint,40,opt,name=thermal_throttle_status,json=thermalThrottleStatus,proto3" json:"thermal_throttle_status,omitempty"`
	ThermalThrottleEventCnt uint64 `protobuf:"varint,41,opt,name=thermal_throttle_event_cnt,json=thermalThrottleEventCnt,proto3" json:"thermal_throttle_event_cnt,omitempty"`
	RetryBufferOverflowCnt  uint64 `protobuf:"varint,42,opt,name=retry_buffer_overflow_cnt,json=retryBufferOverflowCnt,proto3" json:"retry_buffer_overflow_cnt,omitempty"`
	PllLockLossCnt          uint64 `protobuf:"varint,43,opt,name=pll_lock_loss_cnt,json=pllLockLossCnt,proto3" json:"pll_lock_loss_cnt,omitempty"`
	NandBytesWritten        uint64 `protobuf:"varint,44,opt,name=nand_bytes_written,json=nandBytesWritten,proto3" json:"nand_bytes_written,omitempty"`
	HostBytesWritten        uint64 `protobuf:"varint,45,opt,name=host_bytes_written,json=hostBytesWritten,proto3" json:"host_bytes_written,omitempty"`
	// Engine configs properties
	ClusterSize uint64 `protobuf:"varint,46,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`   // blobstore cluster size in bytes
	MetaWalSize uint64 `protobuf:"varint,47,opt,name=meta_wal_size,json=metaWalSize,proto3" json:"meta_wal_size,omitempty"` // metadata WAL blob size
	RdbWalSize  uint64 `protobuf:"varint,48,opt,name=rdb_wal_size,json=rdbWalSize,proto3" json:"rdb_wal_size,omitempty"`    // RDB WAL blob size
}

func (x *BioHealthResp) Reset() {
	*x = BioHealthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioHealthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioHealthResp) ProtoMessage() {}

func (x *BioHealthResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioHealthResp.ProtoReflect.Descriptor instead.
func (*BioHealthResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{1}
}

func (x *BioHealthResp) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BioHealthResp) GetWarnTempTime() uint32 {
	if x != nil {
		return x.WarnTempTime
	}
	return 0
}

func (x *BioHealthResp) GetCritTempTime() uint32 {
	if x != nil {
		return x.CritTempTime
	}
	return 0
}

func (x *BioHealthResp) GetCtrlBusyTime() uint64 {
	if x != nil {
		return x.CtrlBusyTime
	}
	return 0
}

func (x *BioHealthResp) GetPowerCycles() uint64 {
	if x != nil {
		return x.PowerCycles
	}
	return 0
}

func (x *BioHealthResp) GetPowerOnHours() uint64 {
	if x != nil {
		return x.PowerOnHours
	}
	return 0
}

func (x *BioHealthResp) GetUnsafeShutdowns() uint64 {
	if x != nil {
		return x.UnsafeShutdowns
	}
	return 0
}

func (x *BioHealthResp) GetMediaErrs() uint64 {
	if x != nil {
		return x.MediaErrs
	}
	return 0
}

func (x *BioHealthResp) GetErrLogEntries() uint64 {
	if x != nil {
		return x.ErrLogEntries
	}
	return 0
}

func (x *BioHealthResp) GetBioReadErrs() uint32 {
	if x != nil {
		return x.BioReadErrs
	}
	return 0
}

func (x *BioHealthResp) GetBioWriteErrs() uint32 {
	if x != nil {
		return x.BioWriteErrs
	}
	return 0
}

func (x *BioHealthResp) GetBioUnmapErrs() uint32 {
	if x != nil {
		return x.BioUnmapErrs
	}
	return 0
}

func (x *BioHealthResp) GetChecksumErrs() uint32 {
	if x != nil {
		return x.ChecksumErrs
	}
	return 0
}

func (x *BioHealthResp) GetTemperature() uint32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *BioHealthResp) GetTempWarn() bool {
	if x != nil {
		return x.TempWarn
	}
	return false
}

func (x *BioHealthResp) GetAvailSpareWarn() bool {
	if x != nil {
		return x.AvailSpareWarn
	}
	return false
}

func (x *BioHealthResp) GetDevReliabilityWarn() bool {
	if x != nil {
		return x.DevReliabilityWarn
	}
	return false
}

func (x *BioHealthResp) GetReadOnlyWarn() bool {
	if x != nil {
		return x.ReadOnlyWarn
	}
	return false
}

func (x *BioHealthResp) GetVolatileMemWarn() bool {
	if x != nil {
		return x.VolatileMemWarn
	}
	return false
}

func (x *BioHealthResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BioHealthResp) GetDevUuid() string {
	if x != nil {
		return x.DevUuid
	}
	return ""
}

func (x *BioHealthResp) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *BioHealthResp) GetAvailBytes() uint64 {
	if x != nil {
		return x.AvailBytes
	}
	return 0
}

func (x *BioHealthResp) GetProgramFailCntNorm() uint32 {
	if x != nil {
		return x.ProgramFailCntNorm
	}
	return 0
}

func (x *BioHealthResp) GetProgramFailCntRaw() uint64 {
	if x != nil {
		return x.ProgramFailCntRaw
	}
	return 0
}

func (x *BioHealthResp) GetEraseFailCntNorm() uint32 {
	if x != nil {
		return x.EraseFailCntNorm
	}
	return 0
}

func (x *BioHealthResp) GetEraseFailCntRaw() uint64 {
	if x != nil {
		return x.EraseFailCntRaw
	}
	return 0
}

func (x *BioHealthResp) GetWearLevelingCntNorm() uint32 {
	if x != nil {
		return x.WearLevelingCntNorm
	}
	return 0
}

func (x *BioHealthResp) GetWearLevelingCntMin() uint32 {
	if x != nil {
		return x.WearLevelingCntMin
	}
	return 0
}

func (x *BioHealthResp) GetWearLevelingCntMax() uint32 {
	if x != nil {
		return x.WearLevelingCntMax
	}
	return 0
}

func (x *BioHealthResp) GetWearLevelingCntAvg() uint32 {
	if x != nil {
		return x.WearLevelingCntAvg
	}
	return 0
}

func (x *BioHealthResp) GetEndtoendErrCntRaw() uint64 {
	if x != nil {
		return x.EndtoendErrCntRaw
	}
	return 0
}

func (x *BioHealthResp) GetCrcErrCntRaw() uint64 {
	if x != nil {
		return x.CrcErrCntRaw
	}
	return 0
}

func (x *BioHealthResp) GetMediaWearRaw() uint64 {
	if x != nil {
		return x.MediaWearRaw
	}
	return 0
}

func (x *BioHealthResp) GetHostReadsRaw() uint64 {
	if x != nil {
		return x.HostReadsRaw
	}
	return 0
}

func (x *BioHealthResp) GetWorkloadTimerRaw() uint64 {
	if x != nil {
		return x.WorkloadTimerRaw
	}
	return 0
}

func (x *BioHealthResp) GetThermalThrottleStatus() uint32 {
	if x != nil {
		return x.ThermalThrottleStatus
	}
	return 0
}

func (x *BioHealthResp) GetThermalThrottleEventCnt() uint64 {
	if x != nil {
		return x.ThermalThrottleEventCnt
	}
	return 0
}

func (x *BioHealthResp) GetRetryBufferOverflowCnt() uint64 {
	if x != nil {
		return x.RetryBufferOverflowCnt
	}
	return 0
}

func (x *BioHealthResp) GetPllLockLossCnt() uint64 {
	if x != nil {
		return x.PllLockLossCnt
	}
	return 0
}

func (x *BioHealthResp) GetNandBytesWritten() uint64 {
	if x != nil {
		return x.NandBytesWritten
	}
	return 0
}

func (x *BioHealthResp) GetHostBytesWritten() uint64 {
	if x != nil {
		return x.HostBytesWritten
	}
	return 0
}

func (x *BioHealthResp) GetClusterSize() uint64 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *BioHealthResp) GetMetaWalSize() uint64 {
	if x != nil {
		return x.MetaWalSize
	}
	return 0
}

func (x *BioHealthResp) GetRdbWalSize() uint64 {
	if x != nil {
		return x.RdbWalSize
	}
	return 0
}

// SmdDevice represents a DAOS BIO device, identified by a UUID written into a label stored on a
// SPDK blobstore created on a NVMe namespace. Multiple SmdDevices may exist per NVMe controller.
type SmdDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                // UUID of blobstore
	TgtIds      []int32      `protobuf:"varint,2,rep,packed,name=tgt_ids,json=tgtIds,proto3" json:"tgt_ids,omitempty"`                      // VOS target IDs
	TrAddr      string       `protobuf:"bytes,3,opt,name=tr_addr,json=trAddr,proto3" json:"tr_addr,omitempty"`                              // Transport address of blobstore
	DevState    NvmeDevState `protobuf:"varint,4,opt,name=dev_state,json=devState,proto3,enum=ctl.NvmeDevState" json:"dev_state,omitempty"` // NVMe device state
	LedState    LedState     `protobuf:"varint,5,opt,name=led_state,json=ledState,proto3,enum=ctl.LedState" json:"led_state,omitempty"`     // LED state
	TotalBytes  uint64       `protobuf:"varint,6,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`                 // blobstore clusters total bytes
	AvailBytes  uint64       `protobuf:"varint,7,opt,name=avail_bytes,json=availBytes,proto3" json:"avail_bytes,omitempty"`                 // Available RAW storage for data
	ClusterSize uint64       `protobuf:"varint,8,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`              // blobstore cluster size in bytes
	Rank        uint32       `protobuf:"varint,9,opt,name=rank,proto3" json:"rank,omitempty"`                                               // DAOS I/O Engine using controller
	RoleBits    uint32       `protobuf:"varint,10,opt,name=role_bits,json=roleBits,proto3" json:"role_bits,omitempty"`                      // Device active roles (bitmask)
	MetaSize    uint64       `protobuf:"varint,11,opt,name=meta_size,json=metaSize,proto3" json:"meta_size,omitempty"`                      // Size of the metadata (i.e. vos file index) blob
	MetaWalSize uint64       `protobuf:"varint,12,opt,name=meta_wal_size,json=metaWalSize,proto3" json:"meta_wal_size,omitempty"`           // Size of the metadata WAL blob
	RdbSize     uint64       `protobuf:"varint,13,opt,name=rdb_size,json=rdbSize,proto3" json:"rdb_size,omitempty"`                         // Size of the RDB blob
	RdbWalSize  uint64       `protobuf:"varint,14,opt,name=rdb_wal_size,json=rdbWalSize,proto3" json:"rdb_wal_size,omitempty"`              // Size of the RDB WAL blob
	UsableBytes uint64       `protobuf:"varint,15,opt,name=usable_bytes,json=usableBytes,proto3" json:"usable_bytes,omitempty"`             // Effective storage available for data
}

func (x *SmdDevice) Reset() {
	*x = SmdDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdDevice) ProtoMessage() {}

func (x *SmdDevice) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdDevice.ProtoReflect.Descriptor instead.
func (*SmdDevice) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{2}
}

func (x *SmdDevice) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SmdDevice) GetTgtIds() []int32 {
	if x != nil {
		return x.TgtIds
	}
	return nil
}

func (x *SmdDevice) GetTrAddr() string {
	if x != nil {
		return x.TrAddr
	}
	return ""
}

func (x *SmdDevice) GetDevState() NvmeDevState {
	if x != nil {
		return x.DevState
	}
	return NvmeDevState_NORMAL
}

func (x *SmdDevice) GetLedState() LedState {
	if x != nil {
		return x.LedState
	}
	return LedState_OFF
}

func (x *SmdDevice) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *SmdDevice) GetAvailBytes() uint64 {
	if x != nil {
		return x.AvailBytes
	}
	return 0
}

func (x *SmdDevice) GetClusterSize() uint64 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *SmdDevice) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SmdDevice) GetRoleBits() uint32 {
	if x != nil {
		return x.RoleBits
	}
	return 0
}

func (x *SmdDevice) GetMetaSize() uint64 {
	if x != nil {
		return x.MetaSize
	}
	return 0
}

func (x *SmdDevice) GetMetaWalSize() uint64 {
	if x != nil {
		return x.MetaWalSize
	}
	return 0
}

func (x *SmdDevice) GetRdbSize() uint64 {
	if x != nil {
		return x.RdbSize
	}
	return 0
}

func (x *SmdDevice) GetRdbWalSize() uint64 {
	if x != nil {
		return x.RdbWalSize
	}
	return 0
}

func (x *SmdDevice) GetUsableBytes() uint64 {
	if x != nil {
		return x.UsableBytes
	}
	return 0
}

type SmdDevReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SmdDevReq) Reset() {
	*x = SmdDevReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdDevReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdDevReq) ProtoMessage() {}

func (x *SmdDevReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdDevReq.ProtoReflect.Descriptor instead.
func (*SmdDevReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{3}
}

type SmdDevResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32        `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Devices []*SmdDevice `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *SmdDevResp) Reset() {
	*x = SmdDevResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdDevResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdDevResp) ProtoMessage() {}

func (x *SmdDevResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdDevResp.ProtoReflect.Descriptor instead.
func (*SmdDevResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{4}
}

func (x *SmdDevResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SmdDevResp) GetDevices() []*SmdDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

type SmdPoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SmdPoolReq) Reset() {
	*x = SmdPoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdPoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdPoolReq) ProtoMessage() {}

func (x *SmdPoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdPoolReq.ProtoReflect.Descriptor instead.
func (*SmdPoolReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{5}
}

type SmdPoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32               `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Pools  []*SmdPoolResp_Pool `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *SmdPoolResp) Reset() {
	*x = SmdPoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdPoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdPoolResp) ProtoMessage() {}

func (x *SmdPoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdPoolResp.ProtoReflect.Descriptor instead.
func (*SmdPoolResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{6}
}

func (x *SmdPoolResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SmdPoolResp) GetPools() []*SmdPoolResp_Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

type SmdQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OmitDevices      bool   `protobuf:"varint,1,opt,name=omit_devices,json=omitDevices,proto3" json:"omit_devices,omitempty"`                  // Indicate query should omit devices
	OmitPools        bool   `protobuf:"varint,2,opt,name=omit_pools,json=omitPools,proto3" json:"omit_pools,omitempty"`                        // Indicate query should omit pools
	IncludeBioHealth bool   `protobuf:"varint,3,opt,name=include_bio_health,json=includeBioHealth,proto3" json:"include_bio_health,omitempty"` // Indicate query should include BIO health for devices
	Uuid             string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                    // Constrain query to this UUID (pool or device)
	Rank             uint32 `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`                                                   // Restrict response to only include info about this rank
}

func (x *SmdQueryReq) Reset() {
	*x = SmdQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdQueryReq) ProtoMessage() {}

func (x *SmdQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdQueryReq.ProtoReflect.Descriptor instead.
func (*SmdQueryReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{7}
}

func (x *SmdQueryReq) GetOmitDevices() bool {
	if x != nil {
		return x.OmitDevices
	}
	return false
}

func (x *SmdQueryReq) GetOmitPools() bool {
	if x != nil {
		return x.OmitPools
	}
	return false
}

func (x *SmdQueryReq) GetIncludeBioHealth() bool {
	if x != nil {
		return x.IncludeBioHealth
	}
	return false
}

func (x *SmdQueryReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SmdQueryReq) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type SmdQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32                    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // DAOS error code
	Ranks  []*SmdQueryResp_RankResp `protobuf:"bytes,2,rep,name=ranks,proto3" json:"ranks,omitempty"`    // List of per-rank responses
}

func (x *SmdQueryResp) Reset() {
	*x = SmdQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdQueryResp) ProtoMessage() {}

func (x *SmdQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdQueryResp.ProtoReflect.Descriptor instead.
func (*SmdQueryResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{8}
}

func (x *SmdQueryResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SmdQueryResp) GetRanks() []*SmdQueryResp_RankResp {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type LedManageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids             string    `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`                                                   // List of Device-UUIDs and/or PCI-addresses
	LedAction       LedAction `protobuf:"varint,3,opt,name=led_action,json=ledAction,proto3,enum=ctl.LedAction" json:"led_action,omitempty"`  // LED action to perform
	LedState        LedState  `protobuf:"varint,4,opt,name=led_state,json=ledState,proto3,enum=ctl.LedState" json:"led_state,omitempty"`      // LED state to set (used if action is SET)
	LedDurationMins uint32    `protobuf:"varint,5,opt,name=led_duration_mins,json=ledDurationMins,proto3" json:"led_duration_mins,omitempty"` // LED action duration (how long to blink LED in minutes)
}

func (x *LedManageReq) Reset() {
	*x = LedManageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedManageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedManageReq) ProtoMessage() {}

func (x *LedManageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedManageReq.ProtoReflect.Descriptor instead.
func (*LedManageReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{9}
}

func (x *LedManageReq) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

func (x *LedManageReq) GetLedAction() LedAction {
	if x != nil {
		return x.LedAction
	}
	return LedAction_GET
}

func (x *LedManageReq) GetLedState() LedState {
	if x != nil {
		return x.LedState
	}
	return LedState_OFF
}

func (x *LedManageReq) GetLedDurationMins() uint32 {
	if x != nil {
		return x.LedDurationMins
	}
	return 0
}

type DevReplaceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldDevUuid string `protobuf:"bytes,1,opt,name=old_dev_uuid,json=oldDevUuid,proto3" json:"old_dev_uuid,omitempty"` // UUID of old (hot-removed) blobstore/device
	NewDevUuid string `protobuf:"bytes,2,opt,name=new_dev_uuid,json=newDevUuid,proto3" json:"new_dev_uuid,omitempty"` // UUID of new (hot-plugged) blobstore/device
	NoReint    bool   `protobuf:"varint,3,opt,name=no_reint,json=noReint,proto3" json:"no_reint,omitempty"`           // Skip device reintegration if set
}

func (x *DevReplaceReq) Reset() {
	*x = DevReplaceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevReplaceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevReplaceReq) ProtoMessage() {}

func (x *DevReplaceReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevReplaceReq.ProtoReflect.Descriptor instead.
func (*DevReplaceReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{10}
}

func (x *DevReplaceReq) GetOldDevUuid() string {
	if x != nil {
		return x.OldDevUuid
	}
	return ""
}

func (x *DevReplaceReq) GetNewDevUuid() string {
	if x != nil {
		return x.NewDevUuid
	}
	return ""
}

func (x *DevReplaceReq) GetNoReint() bool {
	if x != nil {
		return x.NoReint
	}
	return false
}

type SetFaultyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // Device-UUID (as recorded in SMD)
}

func (x *SetFaultyReq) Reset() {
	*x = SetFaultyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFaultyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFaultyReq) ProtoMessage() {}

func (x *SetFaultyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFaultyReq.ProtoReflect.Descriptor instead.
func (*SetFaultyReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{11}
}

func (x *SetFaultyReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DevManageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32      `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // DAOS error code
	Device *SmdDevice `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`  // Details of device that has been managed
}

func (x *DevManageResp) Reset() {
	*x = DevManageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevManageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevManageResp) ProtoMessage() {}

func (x *DevManageResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevManageResp.ProtoReflect.Descriptor instead.
func (*DevManageResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{12}
}

func (x *DevManageResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DevManageResp) GetDevice() *SmdDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

type SmdManageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Op:
	//	*SmdManageReq_Led
	//	*SmdManageReq_Replace
	//	*SmdManageReq_Faulty
	Op isSmdManageReq_Op `protobuf_oneof:"op"`
}

func (x *SmdManageReq) Reset() {
	*x = SmdManageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdManageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdManageReq) ProtoMessage() {}

func (x *SmdManageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdManageReq.ProtoReflect.Descriptor instead.
func (*SmdManageReq) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{13}
}

func (m *SmdManageReq) GetOp() isSmdManageReq_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *SmdManageReq) GetLed() *LedManageReq {
	if x, ok := x.GetOp().(*SmdManageReq_Led); ok {
		return x.Led
	}
	return nil
}

func (x *SmdManageReq) GetReplace() *DevReplaceReq {
	if x, ok := x.GetOp().(*SmdManageReq_Replace); ok {
		return x.Replace
	}
	return nil
}

func (x *SmdManageReq) GetFaulty() *SetFaultyReq {
	if x, ok := x.GetOp().(*SmdManageReq_Faulty); ok {
		return x.Faulty
	}
	return nil
}

type isSmdManageReq_Op interface {
	isSmdManageReq_Op()
}

type SmdManageReq_Led struct {
	Led *LedManageReq `protobuf:"bytes,1,opt,name=led,proto3,oneof"` // Request to manage LED state
}

type SmdManageReq_Replace struct {
	Replace *DevReplaceReq `protobuf:"bytes,2,opt,name=replace,proto3,oneof"` // Request to replace SMD device
}

type SmdManageReq_Faulty struct {
	Faulty *SetFaultyReq `protobuf:"bytes,3,opt,name=faulty,proto3,oneof"` // Request to set SMD device faulty
}

func (*SmdManageReq_Led) isSmdManageReq_Op() {}

func (*SmdManageReq_Replace) isSmdManageReq_Op() {}

func (*SmdManageReq_Faulty) isSmdManageReq_Op() {}

type SmdManageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranks []*SmdManageResp_RankResp `protobuf:"bytes,1,rep,name=ranks,proto3" json:"ranks,omitempty"` // List of per-rank responses
}

func (x *SmdManageResp) Reset() {
	*x = SmdManageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdManageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdManageResp) ProtoMessage() {}

func (x *SmdManageResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdManageResp.ProtoReflect.Descriptor instead.
func (*SmdManageResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{14}
}

func (x *SmdManageResp) GetRanks() []*SmdManageResp_RankResp {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type SmdPoolResp_Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                           // UUID of VOS pool
	TgtIds []int32  `protobuf:"varint,2,rep,packed,name=tgt_ids,json=tgtIds,proto3" json:"tgt_ids,omitempty"` // VOS target IDs
	Blobs  []uint64 `protobuf:"varint,3,rep,packed,name=blobs,proto3" json:"blobs,omitempty"`                 // SPDK blobs
}

func (x *SmdPoolResp_Pool) Reset() {
	*x = SmdPoolResp_Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdPoolResp_Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdPoolResp_Pool) ProtoMessage() {}

func (x *SmdPoolResp_Pool) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdPoolResp_Pool.ProtoReflect.Descriptor instead.
func (*SmdPoolResp_Pool) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SmdPoolResp_Pool) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SmdPoolResp_Pool) GetTgtIds() []int32 {
	if x != nil {
		return x.TgtIds
	}
	return nil
}

func (x *SmdPoolResp_Pool) GetBlobs() []uint64 {
	if x != nil {
		return x.Blobs
	}
	return nil
}

type SmdQueryResp_SmdDeviceWithHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *SmdDevice     `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Health  *BioHealthResp `protobuf:"bytes,2,opt,name=health,proto3" json:"health,omitempty"` // optional BIO health
}

func (x *SmdQueryResp_SmdDeviceWithHealth) Reset() {
	*x = SmdQueryResp_SmdDeviceWithHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdQueryResp_SmdDeviceWithHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdQueryResp_SmdDeviceWithHealth) ProtoMessage() {}

func (x *SmdQueryResp_SmdDeviceWithHealth) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdQueryResp_SmdDeviceWithHealth.ProtoReflect.Descriptor instead.
func (*SmdQueryResp_SmdDeviceWithHealth) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SmdQueryResp_SmdDeviceWithHealth) GetDetails() *SmdDevice {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SmdQueryResp_SmdDeviceWithHealth) GetHealth() *BioHealthResp {
	if x != nil {
		return x.Health
	}
	return nil
}

type SmdQueryResp_Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                           // UUID of VOS pool
	TgtIds []int32  `protobuf:"varint,2,rep,packed,name=tgt_ids,json=tgtIds,proto3" json:"tgt_ids,omitempty"` // VOS target IDs
	Blobs  []uint64 `protobuf:"varint,3,rep,packed,name=blobs,proto3" json:"blobs,omitempty"`                 // SPDK blobs
}

func (x *SmdQueryResp_Pool) Reset() {
	*x = SmdQueryResp_Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdQueryResp_Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdQueryResp_Pool) ProtoMessage() {}

func (x *SmdQueryResp_Pool) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdQueryResp_Pool.ProtoReflect.Descriptor instead.
func (*SmdQueryResp_Pool) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{8, 1}
}

func (x *SmdQueryResp_Pool) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SmdQueryResp_Pool) GetTgtIds() []int32 {
	if x != nil {
		return x.TgtIds
	}
	return nil
}

func (x *SmdQueryResp_Pool) GetBlobs() []uint64 {
	if x != nil {
		return x.Blobs
	}
	return nil
}

type SmdQueryResp_RankResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank    uint32                              `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`      // rank to which this response corresponds
	Devices []*SmdQueryResp_SmdDeviceWithHealth `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"` // List of devices on the rank
	Pools   []*SmdQueryResp_Pool                `protobuf:"bytes,3,rep,name=pools,proto3" json:"pools,omitempty"`     // List of pools on the rank
}

func (x *SmdQueryResp_RankResp) Reset() {
	*x = SmdQueryResp_RankResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdQueryResp_RankResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdQueryResp_RankResp) ProtoMessage() {}

func (x *SmdQueryResp_RankResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdQueryResp_RankResp.ProtoReflect.Descriptor instead.
func (*SmdQueryResp_RankResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{8, 2}
}

func (x *SmdQueryResp_RankResp) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SmdQueryResp_RankResp) GetDevices() []*SmdQueryResp_SmdDeviceWithHealth {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *SmdQueryResp_RankResp) GetPools() []*SmdQueryResp_Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

type SmdManageResp_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32      `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // DAOS error code
	Device *SmdDevice `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *SmdManageResp_Result) Reset() {
	*x = SmdManageResp_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdManageResp_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdManageResp_Result) ProtoMessage() {}

func (x *SmdManageResp_Result) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdManageResp_Result.ProtoReflect.Descriptor instead.
func (*SmdManageResp_Result) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{14, 0}
}

func (x *SmdManageResp_Result) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SmdManageResp_Result) GetDevice() *SmdDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

type SmdManageResp_RankResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank    uint32                  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`      // Rank to which this response corresponds
	Results []*SmdManageResp_Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"` // List of device results on the rank
}

func (x *SmdManageResp_RankResp) Reset() {
	*x = SmdManageResp_RankResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctl_smd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmdManageResp_RankResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmdManageResp_RankResp) ProtoMessage() {}

func (x *SmdManageResp_RankResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctl_smd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmdManageResp_RankResp.ProtoReflect.Descriptor instead.
func (*SmdManageResp_RankResp) Descriptor() ([]byte, []int) {
	return file_ctl_smd_proto_rawDescGZIP(), []int{14, 1}
}

func (x *SmdManageResp_RankResp) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SmdManageResp_RankResp) GetResults() []*SmdManageResp_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_ctl_smd_proto protoreflect.FileDescriptor

var file_ctl_smd_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x74, 0x6c, 0x2f, 0x73, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x63, 0x74, 0x6c, 0x22, 0x61, 0x0a, 0x0c, 0x42, 0x69, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x64, 0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x72, 0x64, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xdd, 0x0e, 0x0a, 0x0d, 0x42, 0x69, 0x6f, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x77, 0x61, 0x72, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x72, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x62, 0x75, 0x73, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x74, 0x72,
	0x6c, 0x42, 0x75, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x6e,
	0x73, 0x61, 0x66, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x72, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x72, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x65, 0x72, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x65, 0x72, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x69, 0x6f,
	0x52, 0x65, 0x61, 0x64, 0x45, 0x72, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x69, 0x6f, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x62, 0x69, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x72, 0x72, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x62, 0x69, 0x6f, 0x5f, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x69, 0x6f, 0x55, 0x6e, 0x6d, 0x61, 0x70,
	0x45, 0x72, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x5f, 0x65, 0x72, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6d, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x70, 0x61, 0x72, 0x65, 0x57, 0x61,
	0x72, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x64, 0x65, 0x76, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x57, 0x61, 0x72, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x6d, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x65, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x72, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6e, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x12, 0x2f,
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63,
	0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x12,
	0x2d, 0x0a, 0x13, 0x65, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6e,
	0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x72,
	0x61, 0x73, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6e, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x12, 0x2b,
	0x0a, 0x12, 0x65, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6e, 0x74,
	0x5f, 0x72, 0x61, 0x77, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x72, 0x61, 0x73,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x12, 0x33, 0x0a, 0x16, 0x77,
	0x65, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x77, 0x65, 0x61,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6e, 0x74, 0x4e, 0x6f, 0x72, 0x6d,
	0x12, 0x31, 0x0a, 0x15, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x77, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6e, 0x74,
	0x4d, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x77, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x77, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x6e, 0x64,
	0x74, 0x6f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x72, 0x61,
	0x77, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x74, 0x6f, 0x65, 0x6e,
	0x64, 0x45, 0x72, 0x72, 0x43, 0x6e, 0x74, 0x52, 0x61, 0x77, 0x12, 0x25, 0x0a, 0x0f, 0x63, 0x72,
	0x63, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x63, 0x45, 0x72, 0x72, 0x43, 0x6e, 0x74, 0x52, 0x61,
	0x77, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f,
	0x72, 0x61, 0x77, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x57, 0x65, 0x61, 0x72, 0x52, 0x61, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x61, 0x77, 0x12, 0x2c, 0x0a,
	0x12, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x77, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x61, 0x77, 0x12, 0x36, 0x0a, 0x17, 0x74,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6e, 0x74,
	0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x65, 0x74, 0x72, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x70,
	0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x4c,
	0x6f, 0x73, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x61, 0x6e, 0x64, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x6e, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x77, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65,
	0x74, 0x61, 0x57, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x64, 0x62,
	0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x72, 0x64, 0x62, 0x57, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xe4, 0x03, 0x0a, 0x09, 0x53, 0x6d, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x67, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x67, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x64, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6c,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x4c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6c,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x57, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x64, 0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x72, 0x64, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x64, 0x62,
	0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x72, 0x64, 0x62, 0x57, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x0b,
	0x0a, 0x09, 0x53, 0x6d, 0x64, 0x44, 0x65, 0x76, 0x52, 0x65, 0x71, 0x22, 0x4e, 0x0a, 0x0a, 0x53,
	0x6d, 0x64, 0x44, 0x65, 0x76, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x6d, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x0c, 0x0a, 0x0a, 0x53,
	0x6d, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x53, 0x6d,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x6d, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x1a, 0x49,
	0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x67,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x67, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0b, 0x53, 0x6d,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6d, 0x69,
	0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6f, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6f, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x69, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x42, 0x69, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x22, 0xa0, 0x03, 0x0a, 0x0c, 0x53, 0x6d, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x74, 0x6c, 0x2e,
	0x53, 0x6d, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x1a, 0x6b, 0x0a, 0x13,
	0x53, 0x6d, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x6d, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x74, 0x6c, 0x2e, 0x42, 0x69, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x1a, 0x49, 0x0a, 0x04, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x67, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x67, 0x74, 0x49, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x62,
	0x6c, 0x6f, 0x62, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x3f, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x6d, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x53, 0x6d, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x6d, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x4c, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x74,
	0x6c, 0x2e, 0x4c, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x09, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x63, 0x74, 0x6c, 0x2e,
	0x4c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c,
	0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x73, 0x22, 0x6e,
	0x0a, 0x0d, 0x44, 0x65, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x76, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x52, 0x65, 0x69, 0x6e, 0x74, 0x22, 0x22,
	0x0a, 0x0c, 0x53, 0x65, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x4f, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x74,
	0x6c, 0x2e, 0x53, 0x6d, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x53, 0x6d, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x03, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x4c, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x74, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x74,
	0x6c, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x71, 0x48, 0x00,
	0x52, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x79, 0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70, 0x22, 0xe1,
	0x01, 0x0a, 0x0d, 0x53, 0x6d, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x31, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x6d, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x6b, 0x73, 0x1a, 0x48, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x6d, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x53, 0x0a,
	0x08, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x33, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x74, 0x6c, 0x2e, 0x53, 0x6d, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2a, 0x3f, 0x0a, 0x0c, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x56, 0x49, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x50, 0x4c, 0x55, 0x47, 0x47, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0x44, 0x0a, 0x08, 0x4c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x55, 0x49, 0x43,
	0x4b, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x03, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x41, 0x10, 0x04, 0x2a, 0x28, 0x0a, 0x09, 0x4c, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x10, 0x02, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x61, 0x6f, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x64, 0x61, 0x6f,
	0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x74, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ctl_smd_proto_rawDescOnce sync.Once
	file_ctl_smd_proto_rawDescData = file_ctl_smd_proto_rawDesc
)

func file_ctl_smd_proto_rawDescGZIP() []byte {
	file_ctl_smd_proto_rawDescOnce.Do(func() {
		file_ctl_smd_proto_rawDescData = protoimpl.X.CompressGZIP(file_ctl_smd_proto_rawDescData)
	})
	return file_ctl_smd_proto_rawDescData
}

var file_ctl_smd_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ctl_smd_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_ctl_smd_proto_goTypes = []interface{}{
	(NvmeDevState)(0),                        // 0: ctl.NvmeDevState
	(LedState)(0),                            // 1: ctl.LedState
	(LedAction)(0),                           // 2: ctl.LedAction
	(*BioHealthReq)(nil),                     // 3: ctl.BioHealthReq
	(*BioHealthResp)(nil),                    // 4: ctl.BioHealthResp
	(*SmdDevice)(nil),                        // 5: ctl.SmdDevice
	(*SmdDevReq)(nil),                        // 6: ctl.SmdDevReq
	(*SmdDevResp)(nil),                       // 7: ctl.SmdDevResp
	(*SmdPoolReq)(nil),                       // 8: ctl.SmdPoolReq
	(*SmdPoolResp)(nil),                      // 9: ctl.SmdPoolResp
	(*SmdQueryReq)(nil),                      // 10: ctl.SmdQueryReq
	(*SmdQueryResp)(nil),                     // 11: ctl.SmdQueryResp
	(*LedManageReq)(nil),                     // 12: ctl.LedManageReq
	(*DevReplaceReq)(nil),                    // 13: ctl.DevReplaceReq
	(*SetFaultyReq)(nil),                     // 14: ctl.SetFaultyReq
	(*DevManageResp)(nil),                    // 15: ctl.DevManageResp
	(*SmdManageReq)(nil),                     // 16: ctl.SmdManageReq
	(*SmdManageResp)(nil),                    // 17: ctl.SmdManageResp
	(*SmdPoolResp_Pool)(nil),                 // 18: ctl.SmdPoolResp.Pool
	(*SmdQueryResp_SmdDeviceWithHealth)(nil), // 19: ctl.SmdQueryResp.SmdDeviceWithHealth
	(*SmdQueryResp_Pool)(nil),                // 20: ctl.SmdQueryResp.Pool
	(*SmdQueryResp_RankResp)(nil),            // 21: ctl.SmdQueryResp.RankResp
	(*SmdManageResp_Result)(nil),             // 22: ctl.SmdManageResp.Result
	(*SmdManageResp_RankResp)(nil),           // 23: ctl.SmdManageResp.RankResp
}
var file_ctl_smd_proto_depIdxs = []int32{
	0,  // 0: ctl.SmdDevice.dev_state:type_name -> ctl.NvmeDevState
	1,  // 1: ctl.SmdDevice.led_state:type_name -> ctl.LedState
	5,  // 2: ctl.SmdDevResp.devices:type_name -> ctl.SmdDevice
	18, // 3: ctl.SmdPoolResp.pools:type_name -> ctl.SmdPoolResp.Pool
	21, // 4: ctl.SmdQueryResp.ranks:type_name -> ctl.SmdQueryResp.RankResp
	2,  // 5: ctl.LedManageReq.led_action:type_name -> ctl.LedAction
	1,  // 6: ctl.LedManageReq.led_state:type_name -> ctl.LedState
	5,  // 7: ctl.DevManageResp.device:type_name -> ctl.SmdDevice
	12, // 8: ctl.SmdManageReq.led:type_name -> ctl.LedManageReq
	13, // 9: ctl.SmdManageReq.replace:type_name -> ctl.DevReplaceReq
	14, // 10: ctl.SmdManageReq.faulty:type_name -> ctl.SetFaultyReq
	23, // 11: ctl.SmdManageResp.ranks:type_name -> ctl.SmdManageResp.RankResp
	5,  // 12: ctl.SmdQueryResp.SmdDeviceWithHealth.details:type_name -> ctl.SmdDevice
	4,  // 13: ctl.SmdQueryResp.SmdDeviceWithHealth.health:type_name -> ctl.BioHealthResp
	19, // 14: ctl.SmdQueryResp.RankResp.devices:type_name -> ctl.SmdQueryResp.SmdDeviceWithHealth
	20, // 15: ctl.SmdQueryResp.RankResp.pools:type_name -> ctl.SmdQueryResp.Pool
	5,  // 16: ctl.SmdManageResp.Result.device:type_name -> ctl.SmdDevice
	22, // 17: ctl.SmdManageResp.RankResp.results:type_name -> ctl.SmdManageResp.Result
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_ctl_smd_proto_init() }
func file_ctl_smd_proto_init() {
	if File_ctl_smd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ctl_smd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioHealthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioHealthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdDevReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdDevResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdPoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdPoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedManageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevReplaceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFaultyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevManageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdManageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdManageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdPoolResp_Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdQueryResp_SmdDeviceWithHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdQueryResp_Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdQueryResp_RankResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdManageResp_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctl_smd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmdManageResp_RankResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ctl_smd_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*SmdManageReq_Led)(nil),
		(*SmdManageReq_Replace)(nil),
		(*SmdManageReq_Faulty)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ctl_smd_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ctl_smd_proto_goTypes,
		DependencyIndexes: file_ctl_smd_proto_depIdxs,
		EnumInfos:         file_ctl_smd_proto_enumTypes,
		MessageInfos:      file_ctl_smd_proto_msgTypes,
	}.Build()
	File_ctl_smd_proto = out.File
	file_ctl_smd_proto_rawDesc = nil
	file_ctl_smd_proto_goTypes = nil
	file_ctl_smd_proto_depIdxs = nil
}
