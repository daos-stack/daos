//
// (C) Copyright 2018 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

package agent

import (
	"context"
	"errors"
	secpb "modules/security/proto"
	"net"
	"time"

	"common/log"

	"github.com/satori/go.uuid"
	"google.golang.org/grpc"
	"google.golang.org/grpc/connectivity"
)

// DAOSAgentClient is an abstraction around the AgentServiceClient
// generated by gRPC. It provides a simplified mechanism so users can
// minimize their use of protobuf datatypes.
type DAOSAgentClient struct {
	logger *log.Logger
	client secpb.SecurityAgentClient
	gconn  *grpc.ClientConn
}

// In the event that proxy settings are set gRPC attempts to be helpful and
// passes the request to the proxy first to resolve. This causes problems
// with local connections to unix domain sockets. This dialer is specifically
// used for the local case to avoid the proxy handling urls of the form
// unix:/path/to/file
func unixDialer(addr string, timeout time.Duration) (net.Conn, error) {
	return net.Dial("unix", addr)
}

// Connect provides an easy interface to connect to local DAOS agents.
// It takes the path to the Unix domain socket without any protocol
// specifier.
//	addr: Path to agent unix domain socket (ex. /tmp/agent/agent.grpc)
func (ac *DAOSAgentClient) Connect(addr string) error {
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithInsecure(), grpc.WithDialer(unixDialer))
	conn, err := grpc.Dial(addr, opts...)
	if err != nil {
		return ac.logger.LogGrpcErr(err)
	}
	ac.client = secpb.NewSecurityAgentClient(conn)
	ac.gconn = conn
	return nil
}

// Close terminates the underlying channel used by the grpc client service.
func (ac *DAOSAgentClient) Close() error {
	return ac.gconn.Close()
}

// Connected determines if the underlying socket connection is alive and well.
func (ac *DAOSAgentClient) Connected() bool {
	if ac.gconn == nil {
		return false
	}

	state := ac.gconn.GetState()
	return state == connectivity.Idle || state == connectivity.Ready
}

// RequestSecurityContext generates a request to the DAOS agent with
// the appropraite security flavor (Currnetly only AUTH_SYS is supported)
// and returns an auth token representing the security handle.
func (ac *DAOSAgentClient) RequestSecurityContext() (*secpb.AuthToken, error) {
	if ac.Connected() == false {
		return nil, nil
	}

	token := &secpb.AuthToken{
		Flavor: secpb.AuthFlavor_AUTH_SYS,
	}
	result, err := ac.client.RequestSecurityContext(context.Background(), token)

	if err != nil {
		return nil, err
	}

	status := result.GetStatus()
	if status.GetStatus() != secpb.Status_SUCCESS {
		return nil, errors.New("Request Security Context Failed")
	}

	return result.GetResponse(), nil
}

// VerifySecurityHandle takes a string representing the UUID of the security
// handle and validates that it is properly formatted. Upon verifying the string
// it will make a call to the client agent to pass it allong and retrieve the
//	handle: A string representing the UUID of the security handle
func (ac *DAOSAgentClient) VerifySecurityHandle(handle string) (*secpb.AuthToken, error) {
	if ac.Connected() == false {
		return nil, nil
	}

	handleUUID, err := uuid.FromString(handle)
	if err != nil {
		return nil, err
	}

	pbhandle := &secpb.SecurityHandle{
		Handle: handleUUID.Bytes(),
	}
	result, err := ac.client.VerifySecurityHandle(context.Background(), pbhandle)

	if err != nil {
		return nil, err
	}

	status := result.GetStatus()
	if status.GetStatus() != secpb.Status_SUCCESS {
		return nil, errors.New("Request Security Context Failed")
	}

	return result.GetResponse(), nil
}

// NewDAOSAgentClient returns an initialized instance of the DAOSAgentClient
// object
func NewDAOSAgentClient() *DAOSAgentClient {
	return &DAOSAgentClient{logger: log.NewLogger()}
}
