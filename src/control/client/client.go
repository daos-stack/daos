//
// (C) Copyright 2018 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

package mgmtclient

import (
	"fmt"
	"io"
	"time"

	pb "github.com/daos-stack/daos/src/control/common/proto/mgmt"

	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/connectivity"
)

var errConnect = fmt.Errorf("no client connection was found, please connect")

// FeatureMap is an alias for mgmt features supported by gRPC server.
type FeatureMap map[string]string

// ScmModules is an alias for protobuf ScmModule message slice representing
// a number of SCM modules installed on a storage node.
type ScmModules []*pb.ScmModule

// NvmeControllers is an alias for protobuf NvmeController message slice
// representing a number of NVMe SSD controllers installed on a storage node.
type NvmeControllers []*pb.NvmeController

// MgmtClient interface specifies gRPC client functionality.
type MgmtClient interface {
	connect(string) error
	close() error
	connected() (connectivity.State, bool)
	getAddress() string
	listAllFeatures() (FeatureMap, error)
	listScmModules() (ScmModules, error)
	listNvmeCtrlrs() (NvmeControllers, error)
}

// client is an abstraction around the MgmtControlClient
// generated by gRPC. It provides a simplified mechanism so users can
// minimize their use of protobuf datatypes.
type client struct {
	client pb.MgmtControlClient
	gconn  *grpc.ClientConn
}

func newMgmtClient(address string) (MgmtClient, error) {
	c := &client{}
	if err := c.connect(address); err != nil {
		return nil, err
	}
	return c, nil
}

// connect provides an easy interface to connect to Mgmt DAOS server.
//
// It takes address and port in a string.
//	addr: address and port number separated by a ":"
func (mc *client) connect(addr string) (err error) {
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithInsecure())

	conn, err := grpc.Dial(addr, opts...)
	if err != nil {
		return
	}
	mc.client = pb.NewMgmtControlClient(conn)
	mc.gconn = conn

	return
}

// close terminates the underlying channel used by the grpc client service.
func (mc *client) close() error {
	return mc.gconn.Close()
}

// getAddress returns the target address of the connection.
func (mc *client) getAddress() string {
	return mc.gconn.Target()
}

func checkState(state connectivity.State) bool {
	return (state == connectivity.Idle || state == connectivity.Ready)
}

// connected determines if the underlying socket connection is alive and well.
func (mc *client) connected() (state connectivity.State, ok bool) {
	if mc.gconn == nil {
		return
	}

	state = mc.gconn.GetState()
	return state, checkState(state)
}

// getFeature returns a feature from a requested name.
func (mc *client) getFeature(name string) (*pb.Feature, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	return mc.client.GetFeature(ctx, &pb.FeatureName{Name: name})
}

// listAllFeatures returns map of all supported management features.
func (mc *client) listAllFeatures() (fm FeatureMap, err error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	stream, err := mc.client.ListAllFeatures(ctx, &pb.EmptyParams{})
	if err != nil {
		return
	}

	fm = make(FeatureMap)
	var f *pb.Feature
	for {
		f, err = stream.Recv()
		if err == io.EOF {
			err = nil
			break
		} else if err != nil {
			return
		}
		fm[f.Fname.Name] = fmt.Sprintf(
			"category %s, %s", f.Category.Category, f.Description)
	}

	return
}

// listFeatures returns supported management features for a given category.
func (mc *client) listFeatures(category string) (
	fm FeatureMap, err error) {

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	stream, err := mc.client.ListFeatures(ctx, &pb.Category{Category: category})
	if err != nil {
		return
	}

	fm = make(FeatureMap)
	var f *pb.Feature
	for {
		f, err = stream.Recv()
		if err == io.EOF {
			err = nil
			break
		} else if err != nil {
			return
		}
		fm[f.Fname.Name] = f.Description
	}
	return
}
