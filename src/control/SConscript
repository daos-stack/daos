#!/bin/env python
"""Build DAOS Control Plane"""
#pylint: disable=too-many-locals
import os
from os.path import join, isdir

GO_COMPILER = 'go'
MIN_GO_VERSION = '1.10.0'

def check_dir_exists(path):
    """
    Check if path points to an existing directory. If it is a file but not a
    directory, delete it.
    """
    if not isdir(path):
        # Not a directory - clear out any file
        if os.path.exists(path):
            os.unlink(path)
        return False
    return True

def do_build(env, path, gosrc, cmd):
    """execute a build command"""
    # Link the version-controlled DAOS Go source directory src/control into
    # GOPATH/src/REPOPATH/src/control in the build directory.
    if not check_dir_exists(path):
        os.makedirs(path)
    path = join(path, "control")
    if not check_dir_exists(path):
        os.symlink(gosrc, path)
    return env.Execute(cmd)

def cmd_build(gopath, repopath, cmd):
    """create a command that ensure paths exist before execution"""
    return lambda target, source, env: do_build(env, gopath, repopath, cmd)

def get_install_src_dir(repopath, name):
    """Get the Gopath-based directory to run 'go install' on"""
    return join(repopath, "src", "control", "cmd", name)

def get_install_bin_path(env, name):
    """Get the final installation location for a binary with a given name"""
    return join(env.subst("$PREFIX"), "bin", name)

def get_bin_path(gopath, name):
    """Get the default location of the binary generated by go build"""
    return join(gopath, "bin", name)

#pylint: disable=too-many-arguments
def install_go_bin(denv, gosrc, gopath, libs, name, install_name):
    """
    Build a Go binary whose source is under directory 'name' and install it
    as 'install_name'.
    libs should be a list of scons-built libraries, or None if none are needed.
    """
    # Repository path shared by DAOS Go package import paths
    repopath = join("github.com", "daos-stack", "daos")
    # Go path to DAOS code
    path = join(gopath, "src", repopath, "src")

    bin_path = get_bin_path(gopath, name)
    mod_src = join(gosrc, "cmd", name, "main.go") # Module src
    install_src = get_install_src_dir(repopath, name)
    install_bin = get_install_bin_path(denv, install_name)
    src = [mod_src]
    if libs is not None:
        src.extend(libs)
    denv.Command(bin_path, src,
                 cmd_build(path, gosrc,
                           "go install %s" % install_src))
    denv.InstallAs(install_bin, bin_path)
#pylint: enable=too-many-arguments

def scons():
    """Execute build"""
    Import('env', 'prereqs')

    env.AppendUnique(LIBPATH=[Dir('.')])

    denv = env.Clone()
    prereqs.require(denv, 'pmdk', 'fio', 'spdk')

    # if SPDK_PREFIX differs from PREFIX, copy dir so files can be accessed at
    # runtime
    if denv.subst("$SPDK_PREFIX") != "/usr":
        if denv.subst("$SPDK_PREFIX") != denv.subst("$PREFIX"):
            for subdir in ["scripts", "fio_plugin"]:
                sharedir = join("share", "spdk", subdir)
                tpath = join(denv.subst("$PREFIX"), sharedir)
                if not check_dir_exists(tpath):
                    denv.Command(
                        tpath,
                        join(denv.subst("$SPDK_PREFIX"), sharedir),
                        Copy("$TARGET", "$SOURCE"))
        tpath = join(denv.subst("$PREFIX"), "include")
        if not check_dir_exists(tpath):
            denv.Command(
                tpath,
                join(denv.subst("$SPDK_PREFIX"), "include"),
                Copy("$TARGET", "$SOURCE"))

    def CheckGoVersion(context):
        context.Display('Checking for Go compiler in $PATH... ')
        go_path = context.env.WhereIs(GO_COMPILER)
        if go_path:
            context.Display(go_path + '\n')
        else:
            context.Result(0)
            return 0

        context.Display('Checking %s version... ' % go_path)
        out = os.popen('%s version' % go_path).read()
        if len(out.split(' ')) < 3:
            context.Result('failed to get version from "%s"' % out)
            return 0

        # go version go1.2.3 linux/amd64
        go_version = out.split(' ')[2].replace('go', '')
        if len([x for x, y in
                zip(go_version.split('.'), MIN_GO_VERSION.split('.'))
                if int(x) < int(y)]) > 0:
            context.Result('%s is too old (min supported: %s) ' % (go_version, MIN_GO_VERSION))
            return 0
        else:
            context.Result('%s' % go_version)
            return 1

    conf = Configure(denv, custom_tests={'CheckGoVersion': CheckGoVersion})
    if not conf.CheckGoVersion():
        print 'no usable Go compiler found (yum install golang?)'
        exit(1)
    denv = conf.Finish()

    # GOPATH for SCons builds in the build directory
    gopath = Dir('.').abspath
    # Version-controlled DAOS Go source directory src/control
    gosrc = Dir('.').srcnode().abspath

    denv.Append(GOPATH=[gopath])
    denv.AppendENVPath('GOPATH', denv['GOPATH'])
    denv['ENV']['GOBIN'] = join(gopath, "bin")

    install_go_bin(denv, gosrc, gopath, None, "agent", "daos_agent")

    gospdkpath = join(gosrc, "vendor", "github.com", "daos-stack", "go-spdk",
                      "spdk")

    # CGO prerequisite libs for go-spdk bindings
    denv.AppendUnique(CPPPATH=[join(gospdkpath, "include")])

    install_go_bin(denv, gosrc, gopath, None, "dmg", "daos_shell")
    install_go_bin(denv, gosrc, gopath, None, "drpc_test", "hello_drpc")

    agentbin = get_bin_path(gopath, "agent")
    shellbin = get_bin_path(gopath, "dmg")
    drpcbin = get_bin_path(gopath, "drpc_test")
    AlwaysBuild([agentbin, shellbin, drpcbin])

    senv = denv.Clone()
    # Link to DPDK static libs
    senv.AppendUnique(LINKFLAGS=['-Wl,--whole-archive', \
                      '-lrte_mempool', '-lrte_mempool_ring', '-lrte_bus_pci', \
                      '-lrte_pci', '-lrte_ring', '-lrte_mbuf', '-lrte_eal', \
                      '-lrte_kvargs', \
                      '-Wl,--no-whole-archive'])

    # hack to avoid building this library with cov compiler for the moment
    compiler = senv.get('COMPILER').lower()
    if compiler == "covc":
        compiler = "gcc"

    nvmecontrol = senv.StaticLibrary(
        "nvme_control",
        join(gospdkpath, "src", "nvme_control.c"),
        CC=compiler, LIBS=['spdk', 'spdk_env_dpdk', 'numa'])

    senv.Install(join(senv.subst("$PREFIX"), "lib"), nvmecontrol)

    # CGO shell env vars.

    senv.AppendENVPath(
        "CGO_LDFLAGS",
        senv.subst("-L%s -L$SPDK_PREFIX/lib -L$PREFIX/opt/isal/lib "
                   " $_RPATH" % gopath) + \
                   " -lspdk -lspdk_env_dpdk -lspdk_nvme -lspdk_util " + \
                   " -lspdk_sock -lspdk_log " + \
                   " -lrte_mempool -lrte_mempool_ring -lrte_bus_pci" + \
                   " -lrte_pci -lrte_ring -lrte_mbuf -lrte_eal -lrte_kvargs" + \
                   " -lnuma -ldl -lisal")
    senv.AppendENVPath(
        "CGO_CFLAGS",
        senv.subst("-I$SPDK_PREFIX/include"))

    # copy server init files to be used at runtime, explicitly
    # remove first because recursive Delete() on dir fails.
    moduleserver = join(gosrc, "server")
    for fname in ["mgmtinit_db.json", "setup_spdk.sh"]:
        senv.Command(
            join("$PREFIX", "share", "daos", "control", fname),
            join(moduleserver, "init", fname),
            [
                Delete("$TARGET"),
                Copy("$TARGET", "$SOURCE")
            ])

    install_go_bin(senv, gosrc, gopath, [nvmecontrol], "daos_server",
                   "daos_server")

    serverbin = get_bin_path(gopath, "daos_server")
    AlwaysBuild([serverbin,])

if __name__ == "SCons.Script":
    scons()
