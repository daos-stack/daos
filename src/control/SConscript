#!/bin/env python
"""Build DAOS Control Plane"""
#pylint: disable=too-many-locals
import os
from SCons.Script import Literal
from os.path import join, isdir

def check_dir_exists(path):
    """
    Check if path points to an existing directory. If it is a file but not a
    directory, delete it.
    """
    if not isdir(path):
        # Not a directory - clear out any file
        if os.path.exists(path):
            os.unlink(path)
        return False
    return True

def do_build(env, path, gosrc, cmd):
    """execute a build command"""
    # Link the version-controlled DAOS Go source directory src/control into
    # GOPATH/src/REPOPATH/src/control in the build directory.
    if not check_dir_exists(path):
        os.makedirs(path)
    path = join(path, "control")
    if not check_dir_exists(path):
        os.symlink(gosrc, path)
    return env.Execute(cmd)

def cmd_build(gopath, repopath, cmd):
    """create a command that ensure paths exist before execution"""
    return lambda target, source, env: do_build(env, gopath, repopath, cmd)

def get_install_src_dir(repopath, name):
    """Get the Gopath-based directory to run 'go install' on"""
    return join(repopath, "src", "control", name)

def get_install_bin_path(env, name):
    """Get the final installation location for a binary with a given name"""
    return join(env.subst("$PREFIX"), "bin", name)

def get_bin_path(gopath, name):
    """Get the default location of the binary generated by go build"""
    return join(gopath, "bin", name)

def install_go_bin(denv, gosrc, gopath, libs, name, install_name):
    """
    Build a Go binary whose source is under directory 'name' and install it
    as 'install_name'.
    libs should be a list of scons-built libraries, or None if none are needed.
    """
    # Repository path shared by DAOS Go package import paths
    repopath = join("github.com", "daos-stack", "daos")
    # Go path to DAOS code
    path = join(gopath, "src", repopath, "src")

    bin = get_bin_path(gopath, name)
    mod_src = join(gosrc, name, "main.go") # Module src
    install_src = get_install_src_dir(repopath, name)
    install_bin = get_install_bin_path(denv, install_name)
    if libs is not None:
        src = [mod_src]
        src.extend(libs)
    else:
        src = mod_src
    denv.Command(bin, src,
                 cmd_build(path, gosrc,
                           "go install %s" % install_src))
    denv.InstallAs(install_bin, bin)

def scons():
    """Execute build"""
    Import('env', 'prereqs')

    env.AppendUnique(LIBPATH=[Dir('.')])

    denv = env.Clone()
    prereqs.require(denv, 'spdk')

    # if SPDK_PREFIX differs from PREFIX, copy dir so files can be accessed at
    # runtime
    if denv.subst("$SPDK_PREFIX") != denv.subst("$PREFIX"):
        for d in ["include", "scripts", "fio_plugin"]:
            sharedir = join("share", "spdk", d)
            tpath = join(denv.subst("$PREFIX"), sharedir)
            if not check_dir_exists(tpath):
                denv.Command(
                    tpath,
                    join(denv.subst("$SPDK_PREFIX"), sharedir),
                    Copy("$TARGET", "$SOURCE"))

    # GOPATH for SCons builds in the build directory
    gopath = Dir('.').abspath
    # Version-controlled DAOS Go source directory src/control
    gosrc = Dir('.').srcnode().abspath

    denv.Append(GOPATH=[gopath])
    denv.AppendENVPath('GOPATH', denv['GOPATH'])
    denv['ENV']['GOBIN'] = join(gopath, "bin")

    install_go_bin(denv, gosrc, gopath, None, "agent", "daos_agent")

    gospdkpath = join(gosrc, "vendor", "github.com", "daos-stack", "go-spdk",
                      "spdk")

    # CGO prerequisite libs for nvme
    denv.AppendUnique(CPPPATH=[join(gospdkpath, "include")])
    nvmecontrol = denv.StaticLibrary(
        "nvme_control",
        join(gospdkpath, "src", "nvme_control.c"),
        LIBS=['spdk'])
    nc_installed = denv.Install(join(denv.subst("$PREFIX"), "lib"), nvmecontrol)

    # CGO shell env vars.
    denv.AppendENVPath(
        "CGO_LDFLAGS",
        denv.subst("-L$SPDK_PREFIX/lib -L$PREFIX/lib $_RPATH"))
    denv.AppendENVPath(
        "CGO_CFLAGS",
        denv.subst("-I$SPDK_PREFIX/include"))

    # copy server init files to be used at runtime, explicitly
    # remove first because recursive Delete() on dir fails.
    moduleserver = join(gosrc, "server")
    for f in ["mgmtinit_db.json", "setup_spdk.sh"]:
        denv.Command(
            join("$PREFIX", "share", "control", f),
            join(moduleserver, "init", f),
            [
                Delete("$TARGET"),
                Copy("$TARGET", "$SOURCE")
            ])

    # TODO: copy fio sample configurations for use at runtime
#    for f in ["example_config.fio", "full_bench.fio"]:
#        denv.Command(
#            "$PREFIX/share/spdk/fio_plugin/" + f,
#            join(moduleserver, "fio", f),
#            Copy("$TARGET", "$SOURCE"))

    install_go_bin(denv, gosrc, gopath, [nc_installed], "server", "daos_server")
    install_go_bin(denv, gosrc, gopath, None, "dmg", "daos_shell")
    install_go_bin(denv, gosrc, gopath, None, "drpc_test", "hello_drpc")

    agentbin = get_bin_path(gopath, "agent")
    serverbin = get_bin_path(gopath, "server")
    shellbin = get_bin_path(gopath, "dmg")
    drpcbin = get_bin_path(gopath, "drpc_test")
    AlwaysBuild([agentbin, serverbin, shellbin, drpcbin])

if __name__ == "SCons.Script":
    scons()
