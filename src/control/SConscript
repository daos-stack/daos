#!/bin/env python
"""Build DAOS Control Plane"""
#pylint: disable=too-many-locals
import os
from SCons.Script import Literal
from os.path import join, isdir

def do_build(env, path, gosrc, cmd):
    """execute a build command"""
    # Link the version-controlled DAOS Go source directory src/control into
    # GOPATH/src/REPOPATH/src/control in the build directory.
    if isdir(path) is False:
        os.makedirs(path)
    path += "/control"
    if isdir(path) is False:
        os.symlink(gosrc, path)
    return env.Execute(cmd)

def cmd_build(gopath, repopath, cmd):
    """create a command that ensure paths exist before execution"""
    return lambda target, source, env: do_build(env, gopath, repopath, cmd)

def scons():
    """Execute build"""
    Import('env', 'prereqs')

    env.AppendUnique(LIBPATH=[Dir('.')])

    denv = env.Clone()
    prereqs.require(denv, 'spdk')

    # if SPDK_PREFIX differs from PREFIX, copy dir so files can be accessed at
    # runtime
    if denv.subst("$SPDK_PREFIX") != denv.subst("$PREFIX"):
        for d in ["include", "scripts", "fio_plugin"]:
            sharedir = join("share", "spdk", d)
            tpath = join(denv.subst("$PREFIX"), sharedir)
            if not isdir(tpath):
                denv.Command(
                    tpath,
                    join(denv.subst("$SPDK_PREFIX"), sharedir),
                    Copy("$TARGET", "$SOURCE"))

    # GOPATH for SCons builds in the build directory
    gopath = Dir('.').abspath
    # Version-controlled DAOS Go source directory src/control
    gosrc = Dir('.').srcnode().abspath
    # Repository path shared by DAOS Go package import paths
    repopath = "github.com/daos-stack/daos"

    denv.Append(GOPATH=[gopath])
    denv.AppendENVPath('GOPATH', denv['GOPATH'])
    denv['ENV']['GOBIN'] = "%s/bin" % gopath

    path = "%s/src/%s/src" % (gopath, repopath)

    agentbin = "%s/bin/agent" % gopath
    agentsrc = "%s/agent/main.go" % gosrc
    denv.Command(agentbin, agentsrc,
                 cmd_build(path, gosrc,
                           "go install %s/src/control/agent" % repopath))
    denv.InstallAs("$PREFIX/bin/daos_agent", agentbin)

    gospdkpath = "%s/vendor/github.com/daos-stack/go-spdk/spdk" % gosrc

    # CGO prerequisite libs for nvme
    denv.AppendUnique(CPPPATH=['%s/include' % gospdkpath])
    nvmecontrol = denv.StaticLibrary(
        "nvme_control",
        '%s/src/nvme_control.c' % gospdkpath,
        LIBS=['spdk'])
    nc_installed = denv.Install('$PREFIX/lib', nvmecontrol)

    # CGO shell env vars.
    denv.AppendENVPath(
        "CGO_LDFLAGS",
        denv.subst("-L$SPDK_PREFIX/lib -L$PREFIX/lib $_RPATH"))
    denv.AppendENVPath(
        "CGO_CFLAGS",
        denv.subst("-I$SPDK_PREFIX/include -I%s/../include" % gosrc))

    # copy server init files to be used at runtime, explicitly
    # remove first because recursive Delete() on dir fails.
    moduleserver = join(gosrc, "server")
    for f in ["mgmtinit_db.json", "setup_spdk.sh"]:
        denv.Command(
            join("$PREFIX", "share", "control", f),
            join(moduleserver, "init", f),
            [
                Delete("$TARGET"),
                Copy("$TARGET", "$SOURCE")
            ])

    # TODO: copy fio sample configurations for use at runtime
#    for f in ["example_config.fio", "full_bench.fio"]:
#        denv.Command(
#            "$PREFIX/share/spdk/fio_plugin/" + f,
#            join(moduleserver, "fio", f),
#            Copy("$TARGET", "$SOURCE"))

    serverbin = "%s/bin/server" % gopath
    serversrc = "%s/server/main.go" % gosrc
    denv.Command(serverbin, [serversrc, nc_installed],
                 cmd_build(path, gosrc,
                           "go install %s/src/control/server" % repopath))
    denv.InstallAs("$PREFIX/bin/daos_server", serverbin)

    shellbin = "%s/bin/dmg" % gopath
    shellsrc = "%s/dmg/main.go" % gosrc
    denv.Command(shellbin, shellsrc,
                 cmd_build(path, gosrc,
                           "go install %s/src/control/dmg" % repopath))
    denv.InstallAs("$PREFIX/bin/daos_shell", shellbin)

    drpcbin = "%s/bin/drpc_test" % gopath
    drpcsrc = "%s/drpc_test/main.go" % gosrc
    denv.Command(drpcbin, drpcsrc,
                 cmd_build(path, gosrc,
                           "go install %s/src/control/drpc_test" % repopath))
    denv.InstallAs("$PREFIX/bin/hello_drpc", drpcbin)

    AlwaysBuild([agentbin, serverbin, shellbin, drpcbin])
if __name__ == "SCons.Script":
    scons()
