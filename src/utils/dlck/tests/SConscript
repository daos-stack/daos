"""Build versioned object store tests"""


def build_dlck_d_vector_ut(venv):
    """Build d_vector.h test"""
    venv.require('cmocka', 'pmdk')
    libs = ['cmocka', 'gurt', 'daos_common_pmem']
    srcs = ['dlck_d_vector_ut.c']

    program = venv.d_test_program('dlck_d_vector_ut', srcs, LIBS=libs)
    venv.Install('$PREFIX/bin/', program)


def build_dlck_dtx_act_recs_recover_ut(venv):
    """Build dlck_dtx_act_recs_recover.c unit test"""
    venv.Append(OBJPREFIX="dlck_ut_")
    venv.AppendUnique(RPATH_FULL=['$PREFIX/lib64/daos_srv'])
    venv.AppendUnique(LINKFLAGS=['-Wl,--wrap=d_calloc'])
    venv.require('cmocka', 'argobots')
    libs = ['cmocka', 'gurt', 'uuid', 'daos_common_pmem', 'abt', 'vos', 'bio']
    srcs = [
        'dlck_dtx_act_recs_recover_ut.c',
        'mocks.c',
        '../dlck_dtx_act_recs_recover.c',
    ]

    program = venv.d_test_program('dlck_dtx_act_recs_recover_ut', srcs, LIBS=libs)
    venv.Install('$PREFIX/bin/', program)


def build_dlck_test_helper(henv):
    """Build dlck_test_helper"""
    henv.Append(OBJPREFIX="dlck_ut_helper_")
    henv.Append(CPPPATH=[Dir('../../../').srcnode()])
    henv.AppendUnique(RPATH_FULL=['$PREFIX/lib64/daos_srv'])
    henv.require('argobots', 'cmocka')

    libs = [
        'vos_srv', 'gurt', 'daos_common_pmem', 'bio', 'cmocka', 'uuid', 'dtx', 'abt', 'pthread'
    ]

    srcs = [
        'dlck_test_helper.c',
        '../dlck_abt.c',
        '../dlck_tls.c',
        '../dlck_args_engine.c',
        '../dlck_args_files.c',
        '../dlck_args_parse.c',
        '../dlck_engine.c',
        '../dlck_pool.c',
        '../../../dtx/tests/srv_mock.c',
        '../../../dtx/tests/ult_mock.c',
        '../../../dtx/tests/pl_map_mock.c',
        '../../../dtx/tests/sched_mock.c',
        '../../../engine/util.c',
        '../../../mgmt/srv_util_file.c',
    ]
    program = henv.d_test_program('dlck_test_helper', srcs, LIBS=libs)
    henv.Install('$PREFIX/bin/', program)


def scons():
    """Execute build"""
    Import('env')

    build_dlck_d_vector_ut(env.Clone())
    build_dlck_dtx_act_recs_recover_ut(env.Clone())
    build_dlck_test_helper(env.Clone())


if __name__ == "SCons.Script":
    scons()
